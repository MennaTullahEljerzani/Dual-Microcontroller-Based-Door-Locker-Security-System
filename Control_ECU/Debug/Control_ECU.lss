
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002a72  00002b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007c  0080007c  00002b22  2**0
                  ALLOC
  3 .stab         00002f34  00000000  00000000  00002b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002432  00000000  00000000  00005a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000813a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ac6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ba1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000be09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__vector_4>
      14:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__vector_9>
      28:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__vector_10>
      2c:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void timer1_SetRequiredCallBackFunction(void);
void inits(void);
/*******************************************************************************
 *                                    Main                                     *
 *******************************************************************************/
int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	c8 55       	subi	r28, 0x58	; 88
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
	uint8 size = PASSWORD_SIZE + 1;
     b5c:	86 e0       	ldi	r24, 0x06	; 6
     b5e:	8d a7       	std	Y+45, r24	; 0x2d
	uint8 enteredPass[size] , savedPass[size];
     b60:	8d a5       	ldd	r24, Y+45	; 0x2d
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	2d b7       	in	r18, 0x3d	; 61
     b68:	3e b7       	in	r19, 0x3e	; 62
     b6a:	28 1b       	sub	r18, r24
     b6c:	39 0b       	sbc	r19, r25
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	3e bf       	out	0x3e, r19	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	2d bf       	out	0x3d, r18	; 61
     b78:	8d b7       	in	r24, 0x3d	; 61
     b7a:	9e b7       	in	r25, 0x3e	; 62
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	2a 96       	adiw	r28, 0x0a	; 10
     b80:	9f af       	std	Y+63, r25	; 0x3f
     b82:	8e af       	std	Y+62, r24	; 0x3e
     b84:	2a 97       	sbiw	r28, 0x0a	; 10
     b86:	2a 96       	adiw	r28, 0x0a	; 10
     b88:	8e ad       	ldd	r24, Y+62	; 0x3e
     b8a:	9f ad       	ldd	r25, Y+63	; 0x3f
     b8c:	2a 97       	sbiw	r28, 0x0a	; 10
     b8e:	00 96       	adiw	r24, 0x00	; 0
     b90:	2a 96       	adiw	r28, 0x0a	; 10
     b92:	9f af       	std	Y+63, r25	; 0x3f
     b94:	8e af       	std	Y+62, r24	; 0x3e
     b96:	2a 97       	sbiw	r28, 0x0a	; 10
     b98:	2a 96       	adiw	r28, 0x0a	; 10
     b9a:	ee ad       	ldd	r30, Y+62	; 0x3e
     b9c:	ff ad       	ldd	r31, Y+63	; 0x3f
     b9e:	2a 97       	sbiw	r28, 0x0a	; 10
     ba0:	f9 ab       	std	Y+49, r31	; 0x31
     ba2:	e8 ab       	std	Y+48, r30	; 0x30
     ba4:	8d a5       	ldd	r24, Y+45	; 0x2d
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	2d b7       	in	r18, 0x3d	; 61
     bac:	3e b7       	in	r19, 0x3e	; 62
     bae:	28 1b       	sub	r18, r24
     bb0:	39 0b       	sbc	r19, r25
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	3e bf       	out	0x3e, r19	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	2d bf       	out	0x3d, r18	; 61
     bbc:	8d b7       	in	r24, 0x3d	; 61
     bbe:	9e b7       	in	r25, 0x3e	; 62
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	28 96       	adiw	r28, 0x08	; 8
     bc4:	9f af       	std	Y+63, r25	; 0x3f
     bc6:	8e af       	std	Y+62, r24	; 0x3e
     bc8:	28 97       	sbiw	r28, 0x08	; 8
     bca:	28 96       	adiw	r28, 0x08	; 8
     bcc:	8e ad       	ldd	r24, Y+62	; 0x3e
     bce:	9f ad       	ldd	r25, Y+63	; 0x3f
     bd0:	28 97       	sbiw	r28, 0x08	; 8
     bd2:	00 96       	adiw	r24, 0x00	; 0
     bd4:	28 96       	adiw	r28, 0x08	; 8
     bd6:	9f af       	std	Y+63, r25	; 0x3f
     bd8:	8e af       	std	Y+62, r24	; 0x3e
     bda:	28 97       	sbiw	r28, 0x08	; 8
     bdc:	28 96       	adiw	r28, 0x08	; 8
     bde:	ee ad       	ldd	r30, Y+62	; 0x3e
     be0:	ff ad       	ldd	r31, Y+63	; 0x3f
     be2:	28 97       	sbiw	r28, 0x08	; 8
     be4:	ff a7       	std	Y+47, r31	; 0x2f
     be6:	ee a7       	std	Y+46, r30	; 0x2e
	uint8 action = 0;
     be8:	1c a6       	std	Y+44, r1	; 0x2c
	/*uint8 door_locking=0;*/
	/* Create configuration structure for timer driver */
	Timer_ConfigType timerConfig = {0,7812,TIMER1_ID,TIMER_F_CPU_1024,TIMER_COMPARE_MODE};
     bea:	9e 01       	movw	r18, r28
     bec:	2e 5c       	subi	r18, 0xCE	; 206
     bee:	3f 4f       	sbci	r19, 0xFF	; 255
     bf0:	2c 96       	adiw	r28, 0x0c	; 12
     bf2:	3f af       	std	Y+63, r19	; 0x3f
     bf4:	2e af       	std	Y+62, r18	; 0x3e
     bf6:	2c 97       	sbiw	r28, 0x0c	; 12
     bf8:	85 e7       	ldi	r24, 0x75	; 117
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	2e 96       	adiw	r28, 0x0e	; 14
     bfe:	9f af       	std	Y+63, r25	; 0x3f
     c00:	8e af       	std	Y+62, r24	; 0x3e
     c02:	2e 97       	sbiw	r28, 0x0e	; 14
     c04:	97 e0       	ldi	r25, 0x07	; 7
     c06:	2f 96       	adiw	r28, 0x0f	; 15
     c08:	9f af       	std	Y+63, r25	; 0x3f
     c0a:	2f 97       	sbiw	r28, 0x0f	; 15
     c0c:	2e 96       	adiw	r28, 0x0e	; 14
     c0e:	ee ad       	ldd	r30, Y+62	; 0x3e
     c10:	ff ad       	ldd	r31, Y+63	; 0x3f
     c12:	2e 97       	sbiw	r28, 0x0e	; 14
     c14:	00 80       	ld	r0, Z
     c16:	2e 96       	adiw	r28, 0x0e	; 14
     c18:	2e ad       	ldd	r18, Y+62	; 0x3e
     c1a:	3f ad       	ldd	r19, Y+63	; 0x3f
     c1c:	2e 97       	sbiw	r28, 0x0e	; 14
     c1e:	2f 5f       	subi	r18, 0xFF	; 255
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	2e 96       	adiw	r28, 0x0e	; 14
     c24:	3f af       	std	Y+63, r19	; 0x3f
     c26:	2e af       	std	Y+62, r18	; 0x3e
     c28:	2e 97       	sbiw	r28, 0x0e	; 14
     c2a:	2c 96       	adiw	r28, 0x0c	; 12
     c2c:	ee ad       	ldd	r30, Y+62	; 0x3e
     c2e:	ff ad       	ldd	r31, Y+63	; 0x3f
     c30:	2c 97       	sbiw	r28, 0x0c	; 12
     c32:	00 82       	st	Z, r0
     c34:	2c 96       	adiw	r28, 0x0c	; 12
     c36:	2e ad       	ldd	r18, Y+62	; 0x3e
     c38:	3f ad       	ldd	r19, Y+63	; 0x3f
     c3a:	2c 97       	sbiw	r28, 0x0c	; 12
     c3c:	2f 5f       	subi	r18, 0xFF	; 255
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
     c40:	2c 96       	adiw	r28, 0x0c	; 12
     c42:	3f af       	std	Y+63, r19	; 0x3f
     c44:	2e af       	std	Y+62, r18	; 0x3e
     c46:	2c 97       	sbiw	r28, 0x0c	; 12
     c48:	2f 96       	adiw	r28, 0x0f	; 15
     c4a:	3f ad       	ldd	r19, Y+63	; 0x3f
     c4c:	2f 97       	sbiw	r28, 0x0f	; 15
     c4e:	31 50       	subi	r19, 0x01	; 1
     c50:	2f 96       	adiw	r28, 0x0f	; 15
     c52:	3f af       	std	Y+63, r19	; 0x3f
     c54:	2f 97       	sbiw	r28, 0x0f	; 15
     c56:	2f 96       	adiw	r28, 0x0f	; 15
     c58:	8f ad       	ldd	r24, Y+63	; 0x3f
     c5a:	2f 97       	sbiw	r28, 0x0f	; 15
     c5c:	88 23       	and	r24, r24
     c5e:	b1 f6       	brne	.-84     	; 0xc0c <main+0xc6>
	/* Create configuration structure for UART driver */
	UART_ConfigType uartConfig = {UART_8_BIT, UART_NO_PARITY, UART_ONE_STOP_BIT, 9600};
     c60:	fe 01       	movw	r30, r28
     c62:	f9 96       	adiw	r30, 0x39	; 57
     c64:	61 96       	adiw	r28, 0x11	; 17
     c66:	ff af       	std	Y+63, r31	; 0x3f
     c68:	ee af       	std	Y+62, r30	; 0x3e
     c6a:	61 97       	sbiw	r28, 0x11	; 17
     c6c:	2e e6       	ldi	r18, 0x6E	; 110
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	63 96       	adiw	r28, 0x13	; 19
     c72:	3f af       	std	Y+63, r19	; 0x3f
     c74:	2e af       	std	Y+62, r18	; 0x3e
     c76:	63 97       	sbiw	r28, 0x13	; 19
     c78:	37 e0       	ldi	r19, 0x07	; 7
     c7a:	64 96       	adiw	r28, 0x14	; 20
     c7c:	3f af       	std	Y+63, r19	; 0x3f
     c7e:	64 97       	sbiw	r28, 0x14	; 20
     c80:	63 96       	adiw	r28, 0x13	; 19
     c82:	ee ad       	ldd	r30, Y+62	; 0x3e
     c84:	ff ad       	ldd	r31, Y+63	; 0x3f
     c86:	63 97       	sbiw	r28, 0x13	; 19
     c88:	00 80       	ld	r0, Z
     c8a:	63 96       	adiw	r28, 0x13	; 19
     c8c:	2e ad       	ldd	r18, Y+62	; 0x3e
     c8e:	3f ad       	ldd	r19, Y+63	; 0x3f
     c90:	63 97       	sbiw	r28, 0x13	; 19
     c92:	2f 5f       	subi	r18, 0xFF	; 255
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	63 96       	adiw	r28, 0x13	; 19
     c98:	3f af       	std	Y+63, r19	; 0x3f
     c9a:	2e af       	std	Y+62, r18	; 0x3e
     c9c:	63 97       	sbiw	r28, 0x13	; 19
     c9e:	61 96       	adiw	r28, 0x11	; 17
     ca0:	ee ad       	ldd	r30, Y+62	; 0x3e
     ca2:	ff ad       	ldd	r31, Y+63	; 0x3f
     ca4:	61 97       	sbiw	r28, 0x11	; 17
     ca6:	00 82       	st	Z, r0
     ca8:	61 96       	adiw	r28, 0x11	; 17
     caa:	2e ad       	ldd	r18, Y+62	; 0x3e
     cac:	3f ad       	ldd	r19, Y+63	; 0x3f
     cae:	61 97       	sbiw	r28, 0x11	; 17
     cb0:	2f 5f       	subi	r18, 0xFF	; 255
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	61 96       	adiw	r28, 0x11	; 17
     cb6:	3f af       	std	Y+63, r19	; 0x3f
     cb8:	2e af       	std	Y+62, r18	; 0x3e
     cba:	61 97       	sbiw	r28, 0x11	; 17
     cbc:	64 96       	adiw	r28, 0x14	; 20
     cbe:	3f ad       	ldd	r19, Y+63	; 0x3f
     cc0:	64 97       	sbiw	r28, 0x14	; 20
     cc2:	31 50       	subi	r19, 0x01	; 1
     cc4:	64 96       	adiw	r28, 0x14	; 20
     cc6:	3f af       	std	Y+63, r19	; 0x3f
     cc8:	64 97       	sbiw	r28, 0x14	; 20
     cca:	64 96       	adiw	r28, 0x14	; 20
     ccc:	8f ad       	ldd	r24, Y+63	; 0x3f
     cce:	64 97       	sbiw	r28, 0x14	; 20
     cd0:	88 23       	and	r24, r24
     cd2:	b1 f6       	brne	.-84     	; 0xc80 <main+0x13a>
	/* Enable Global Interrupt */
	SREG |= (1<<7);
     cd4:	af e5       	ldi	r26, 0x5F	; 95
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ef e5       	ldi	r30, 0x5F	; 95
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 68       	ori	r24, 0x80	; 128
     ce0:	8c 93       	st	X, r24
	 * Baud-rate = 9600 bits/sec
	 * one stop bit
	 * No parity
	 * 8-bit data
	 */
	UART_init(&uartConfig);
     ce2:	ce 01       	movw	r24, r28
     ce4:	c9 96       	adiw	r24, 0x39	; 57
     ce6:	0e 94 75 13 	call	0x26ea	; 0x26ea <UART_init>
	/* Create configuration structure for TWI/I2C driver */
	TWI_configType twiConfig = {PRESCALER_1, 400000, 0x01};
     cea:	fe 01       	movw	r30, r28
     cec:	e0 5c       	subi	r30, 0xC0	; 192
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	66 96       	adiw	r28, 0x16	; 22
     cf2:	ff af       	std	Y+63, r31	; 0x3f
     cf4:	ee af       	std	Y+62, r30	; 0x3e
     cf6:	66 97       	sbiw	r28, 0x16	; 22
     cf8:	28 e6       	ldi	r18, 0x68	; 104
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	68 96       	adiw	r28, 0x18	; 24
     cfe:	3f af       	std	Y+63, r19	; 0x3f
     d00:	2e af       	std	Y+62, r18	; 0x3e
     d02:	68 97       	sbiw	r28, 0x18	; 24
     d04:	36 e0       	ldi	r19, 0x06	; 6
     d06:	69 96       	adiw	r28, 0x19	; 25
     d08:	3f af       	std	Y+63, r19	; 0x3f
     d0a:	69 97       	sbiw	r28, 0x19	; 25
     d0c:	68 96       	adiw	r28, 0x18	; 24
     d0e:	ee ad       	ldd	r30, Y+62	; 0x3e
     d10:	ff ad       	ldd	r31, Y+63	; 0x3f
     d12:	68 97       	sbiw	r28, 0x18	; 24
     d14:	00 80       	ld	r0, Z
     d16:	68 96       	adiw	r28, 0x18	; 24
     d18:	2e ad       	ldd	r18, Y+62	; 0x3e
     d1a:	3f ad       	ldd	r19, Y+63	; 0x3f
     d1c:	68 97       	sbiw	r28, 0x18	; 24
     d1e:	2f 5f       	subi	r18, 0xFF	; 255
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	68 96       	adiw	r28, 0x18	; 24
     d24:	3f af       	std	Y+63, r19	; 0x3f
     d26:	2e af       	std	Y+62, r18	; 0x3e
     d28:	68 97       	sbiw	r28, 0x18	; 24
     d2a:	66 96       	adiw	r28, 0x16	; 22
     d2c:	ee ad       	ldd	r30, Y+62	; 0x3e
     d2e:	ff ad       	ldd	r31, Y+63	; 0x3f
     d30:	66 97       	sbiw	r28, 0x16	; 22
     d32:	00 82       	st	Z, r0
     d34:	66 96       	adiw	r28, 0x16	; 22
     d36:	2e ad       	ldd	r18, Y+62	; 0x3e
     d38:	3f ad       	ldd	r19, Y+63	; 0x3f
     d3a:	66 97       	sbiw	r28, 0x16	; 22
     d3c:	2f 5f       	subi	r18, 0xFF	; 255
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	66 96       	adiw	r28, 0x16	; 22
     d42:	3f af       	std	Y+63, r19	; 0x3f
     d44:	2e af       	std	Y+62, r18	; 0x3e
     d46:	66 97       	sbiw	r28, 0x16	; 22
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	3f ad       	ldd	r19, Y+63	; 0x3f
     d4c:	69 97       	sbiw	r28, 0x19	; 25
     d4e:	31 50       	subi	r19, 0x01	; 1
     d50:	69 96       	adiw	r28, 0x19	; 25
     d52:	3f af       	std	Y+63, r19	; 0x3f
     d54:	69 97       	sbiw	r28, 0x19	; 25
     d56:	69 96       	adiw	r28, 0x19	; 25
     d58:	8f ad       	ldd	r24, Y+63	; 0x3f
     d5a:	69 97       	sbiw	r28, 0x19	; 25
     d5c:	88 23       	and	r24, r24
     d5e:	b1 f6       	brne	.-84     	; 0xd0c <main+0x1c6>

	/* Initialize the TWI driver with :
	 * my address = 0x01
	 * bite rate = 0x02    so SCL frequency= 400 bit/s
	 */
	TWI_init(&twiConfig);
     d60:	ce 01       	movw	r24, r28
     d62:	80 5c       	subi	r24, 0xC0	; 192
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	0e 94 b2 12 	call	0x2564	; 0x2564 <TWI_init>
	Timer_setCallBack(timer1_SetRequiredCallBackFunction, TIMER1_ID);
     d6a:	86 e8       	ldi	r24, 0x86	; 134
     d6c:	99 e0       	ldi	r25, 0x09	; 9
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	0e 94 86 10 	call	0x210c	; 0x210c <Timer_setCallBack>
	inits();
     d74:	0e 94 92 09 	call	0x1324	; 0x1324 <inits>
	/* Get the password from HMI_ECU and save it in the External EEPRPOM */
	getAndSavePassword();
     d78:	0e 94 04 09 	call	0x1208	; 0x1208 <getAndSavePassword>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	a0 e2       	ldi	r26, 0x20	; 32
     d82:	b1 e4       	ldi	r27, 0x41	; 65
     d84:	8f a3       	std	Y+39, r24	; 0x27
     d86:	98 a7       	std	Y+40, r25	; 0x28
     d88:	a9 a7       	std	Y+41, r26	; 0x29
     d8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8c:	6f a1       	ldd	r22, Y+39	; 0x27
     d8e:	78 a5       	ldd	r23, Y+40	; 0x28
     d90:	89 a5       	ldd	r24, Y+41	; 0x29
     d92:	9a a5       	ldd	r25, Y+42	; 0x2a
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	4a ef       	ldi	r20, 0xFA	; 250
     d9a:	54 e4       	ldi	r21, 0x44	; 68
     d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	8b a3       	std	Y+35, r24	; 0x23
     da6:	9c a3       	std	Y+36, r25	; 0x24
     da8:	ad a3       	std	Y+37, r26	; 0x25
     daa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dac:	6b a1       	ldd	r22, Y+35	; 0x23
     dae:	7c a1       	ldd	r23, Y+36	; 0x24
     db0:	8d a1       	ldd	r24, Y+37	; 0x25
     db2:	9e a1       	ldd	r25, Y+38	; 0x26
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e8       	ldi	r20, 0x80	; 128
     dba:	5f e3       	ldi	r21, 0x3F	; 63
     dbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc0:	88 23       	and	r24, r24
     dc2:	2c f4       	brge	.+10     	; 0xdce <main+0x288>
		__ticks = 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	9a a3       	std	Y+34, r25	; 0x22
     dca:	89 a3       	std	Y+33, r24	; 0x21
     dcc:	3f c0       	rjmp	.+126    	; 0xe4c <main+0x306>
	else if (__tmp > 65535)
     dce:	6b a1       	ldd	r22, Y+35	; 0x23
     dd0:	7c a1       	ldd	r23, Y+36	; 0x24
     dd2:	8d a1       	ldd	r24, Y+37	; 0x25
     dd4:	9e a1       	ldd	r25, Y+38	; 0x26
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	3f ef       	ldi	r19, 0xFF	; 255
     dda:	4f e7       	ldi	r20, 0x7F	; 127
     ddc:	57 e4       	ldi	r21, 0x47	; 71
     dde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de2:	18 16       	cp	r1, r24
     de4:	4c f5       	brge	.+82     	; 0xe38 <main+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de6:	6f a1       	ldd	r22, Y+39	; 0x27
     de8:	78 a5       	ldd	r23, Y+40	; 0x28
     dea:	89 a5       	ldd	r24, Y+41	; 0x29
     dec:	9a a5       	ldd	r25, Y+42	; 0x2a
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e2       	ldi	r20, 0x20	; 32
     df4:	51 e4       	ldi	r21, 0x41	; 65
     df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	bc 01       	movw	r22, r24
     e00:	cd 01       	movw	r24, r26
     e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	9a a3       	std	Y+34, r25	; 0x22
     e0c:	89 a3       	std	Y+33, r24	; 0x21
     e0e:	0f c0       	rjmp	.+30     	; 0xe2e <main+0x2e8>
     e10:	88 ec       	ldi	r24, 0xC8	; 200
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	98 a3       	std	Y+32, r25	; 0x20
     e16:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e18:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e1a:	98 a1       	ldd	r25, Y+32	; 0x20
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <main+0x2d6>
     e20:	98 a3       	std	Y+32, r25	; 0x20
     e22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e24:	89 a1       	ldd	r24, Y+33	; 0x21
     e26:	9a a1       	ldd	r25, Y+34	; 0x22
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	9a a3       	std	Y+34, r25	; 0x22
     e2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2e:	89 a1       	ldd	r24, Y+33	; 0x21
     e30:	9a a1       	ldd	r25, Y+34	; 0x22
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	69 f7       	brne	.-38     	; 0xe10 <main+0x2ca>
     e36:	14 c0       	rjmp	.+40     	; 0xe60 <main+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e38:	6b a1       	ldd	r22, Y+35	; 0x23
     e3a:	7c a1       	ldd	r23, Y+36	; 0x24
     e3c:	8d a1       	ldd	r24, Y+37	; 0x25
     e3e:	9e a1       	ldd	r25, Y+38	; 0x26
     e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9a a3       	std	Y+34, r25	; 0x22
     e4a:	89 a3       	std	Y+33, r24	; 0x21
     e4c:	89 a1       	ldd	r24, Y+33	; 0x21
     e4e:	9a a1       	ldd	r25, Y+34	; 0x22
     e50:	9e 8f       	std	Y+30, r25	; 0x1e
     e52:	8d 8f       	std	Y+29, r24	; 0x1d
     e54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e56:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <main+0x312>
     e5c:	9e 8f       	std	Y+30, r25	; 0x1e
     e5e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	for(;;){
		uint8 loop_counter;
		/* loop 3 times until the user enter the true password */
		for(loop_counter=0 ; loop_counter<3 ; loop_counter++){
     e60:	1b a6       	std	Y+43, r1	; 0x2b
     e62:	28 c0       	rjmp	.+80     	; 0xeb4 <main+0x36e>
			/* Send CONTROL_ECU_READY byte to HMI_ECU to ask it to send the password */
			UART_sendByte(CONTROL_ECU_READY);
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
			/* Receive the password from HMI_ECU through UART */
			UART_receiveString(enteredPass);
     e6a:	88 a9       	ldd	r24, Y+48	; 0x30
     e6c:	99 a9       	ldd	r25, Y+49	; 0x31
     e6e:	0e 94 45 14 	call	0x288a	; 0x288a <UART_receiveString>
			/* get the password saved in the EEPROM */
			EEPROM_readData(0x0311,savedPass,PASSWORD_SIZE);
     e72:	2e a5       	ldd	r18, Y+46	; 0x2e
     e74:	3f a5       	ldd	r19, Y+47	; 0x2f
     e76:	81 e1       	ldi	r24, 0x11	; 17
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	b9 01       	movw	r22, r18
     e7c:	45 e0       	ldi	r20, 0x05	; 5
     e7e:	0e 94 23 0b 	call	0x1646	; 0x1646 <EEPROM_readData>
			savedPass[PASSWORD_SIZE] = '\0';
     e82:	ee a5       	ldd	r30, Y+46	; 0x2e
     e84:	ff a5       	ldd	r31, Y+47	; 0x2f
     e86:	15 82       	std	Z+5, r1	; 0x05
			/* compare the received password and the saved password */
			if(!strcmp((char*)enteredPass,(char*)savedPass)){
     e88:	88 a9       	ldd	r24, Y+48	; 0x30
     e8a:	99 a9       	ldd	r25, Y+49	; 0x31
     e8c:	2e a5       	ldd	r18, Y+46	; 0x2e
     e8e:	3f a5       	ldd	r19, Y+47	; 0x2f
     e90:	b9 01       	movw	r22, r18
     e92:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <strcmp>
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	39 f4       	brne	.+14     	; 0xea8 <main+0x362>
				/* if the two passwords are the same send TRUE_PASSWORD byte to HMI_ECU */
				UART_sendByte(TRUE_PASSWORD);
     e9a:	83 e3       	ldi	r24, 0x33	; 51
     e9c:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
				/* Receive an action byte from HMI_ECU (Open Door or Change Password) */
				action = UART_recieveByte();
     ea0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <UART_recieveByte>
     ea4:	8c a7       	std	Y+44, r24	; 0x2c
     ea6:	09 c0       	rjmp	.+18     	; 0xeba <main+0x374>
				break;
			}else{
				/* if the two passwords are not the same send WRONG_PASSWORD byte to HMI_ECU */
				UART_sendByte(WRONG_PASSWORD);
     ea8:	82 e3       	ldi	r24, 0x32	; 50
     eaa:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
	getAndSavePassword();
	_delay_ms(10);
	for(;;){
		uint8 loop_counter;
		/* loop 3 times until the user enter the true password */
		for(loop_counter=0 ; loop_counter<3 ; loop_counter++){
     eae:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	8b a7       	std	Y+43, r24	; 0x2b
     eb4:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	a8 f2       	brcs	.-86     	; 0xe64 <main+0x31e>
				/* if the two passwords are not the same send WRONG_PASSWORD byte to HMI_ECU */
				UART_sendByte(WRONG_PASSWORD);
			}
		}
		/* if loop_counter variable reach 3, this means the user enters wrong password 3 times */
		if(loop_counter == 3){
     eba:	8b a5       	ldd	r24, Y+43	; 0x2b
     ebc:	83 30       	cpi	r24, 0x03	; 3
     ebe:	a1 f4       	brne	.+40     	; 0xee8 <main+0x3a2>
			 * prescaler 1024
			 * compare mode
			 * initial value = 0
			 * compare value = 7812, so the interrupt occurs every 1 seconds
			 */
			Timer_init(&timerConfig);
     ec0:	ce 01       	movw	r24, r28
     ec2:	c2 96       	adiw	r24, 0x32	; 50
     ec4:	0e 94 bf 10 	call	0x217e	; 0x217e <Timer_init>
			/* turn on buzzer */
			Buzzer_on();
     ec8:	0e 94 b0 09 	call	0x1360	; 0x1360 <Buzzer_on>
			/*to stop the system one minute*/
			g_seconds_counter = 0;
     ecc:	10 92 7c 00 	sts	0x007C, r1
			while (g_seconds_counter <= 60){
     ed0:	80 91 7c 00 	lds	r24, 0x007C
     ed4:	8d 33       	cpi	r24, 0x3D	; 61
     ed6:	e0 f3       	brcs	.-8      	; 0xed0 <main+0x38a>
			}
			/*Timer_deInit(TIMER1_ID);*/
			Timer_deInit(TIMER1_ID);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	0e 94 55 12 	call	0x24aa	; 0x24aa <Timer_deInit>

			g_seconds_counter=0;
     ede:	10 92 7c 00 	sts	0x007C, r1
			/* turn off buzzer */
			Buzzer_off();
     ee2:	0e 94 bc 09 	call	0x1378	; 0x1378 <Buzzer_off>
     ee6:	bc cf       	rjmp	.-136    	; 0xe60 <main+0x31a>
		}
		/* if loop_counter variable doesn't reach 3, then the user enter the true password */
		else{
			/* process Open Door option */
			if(action == UNLOCK_DOOR){
     ee8:	8c a5       	ldd	r24, Y+44	; 0x2c
     eea:	85 35       	cpi	r24, 0x55	; 85
     eec:	09 f0       	breq	.+2      	; 0xef0 <main+0x3aa>
     eee:	b7 c0       	rjmp	.+366    	; 0x105e <main+0x518>
				/* Set the call back function and initialize timer driver again  */

				Timer_init(&timerConfig);
     ef0:	ce 01       	movw	r24, r28
     ef2:	c2 96       	adiw	r24, 0x32	; 50
     ef4:	0e 94 bf 10 	call	0x217e	; 0x217e <Timer_init>
				/* Rotate the motor clockwise with maximum speed for 15 seconds */
				DcMotor_Rotate(ClockWise,100);
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	64 e6       	ldi	r22, 0x64	; 100
     efc:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DcMotor_Rotate>
				g_seconds_counter = 0;
     f00:	10 92 7c 00 	sts	0x007C, r1
				/* wait 15 seconds*/
				while (g_seconds_counter <= 15){
     f04:	80 91 7c 00 	lds	r24, 0x007C
     f08:	80 31       	cpi	r24, 0x10	; 16
     f0a:	e0 f3       	brcs	.-8      	; 0xf04 <main+0x3be>
				}

				/*Timer_deInit(TIMER1_ID);*/
				Timer_deInit(TIMER1_ID);
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0e 94 55 12 	call	0x24aa	; 0x24aa <Timer_deInit>

				g_seconds_counter=0;
     f12:	10 92 7c 00 	sts	0x007C, r1
				/* stop the motor to keep the door open */
				DcMotor_Rotate(STOP,0);
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DcMotor_Rotate>
				/*Timer_deInit(TIMER1_ID);*/

				Timer_init(&timerConfig);
     f1e:	ce 01       	movw	r24, r28
     f20:	c2 96       	adiw	r24, 0x32	; 50
     f22:	0e 94 bf 10 	call	0x217e	; 0x217e <Timer_init>

				/*wait for 3 sec and the motor is stop*/
				while(g_seconds_counter<3){};
     f26:	80 91 7c 00 	lds	r24, 0x007C
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	e0 f3       	brcs	.-8      	; 0xf26 <main+0x3e0>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a8 e4       	ldi	r26, 0x48	; 72
     f34:	b3 e4       	ldi	r27, 0x43	; 67
     f36:	89 8f       	std	Y+25, r24	; 0x19
     f38:	9a 8f       	std	Y+26, r25	; 0x1a
     f3a:	ab 8f       	std	Y+27, r26	; 0x1b
     f3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3e:	69 8d       	ldd	r22, Y+25	; 0x19
     f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4a ef       	ldi	r20, 0xFA	; 250
     f4c:	54 e4       	ldi	r21, 0x44	; 68
     f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	8d 8b       	std	Y+21, r24	; 0x15
     f58:	9e 8b       	std	Y+22, r25	; 0x16
     f5a:	af 8b       	std	Y+23, r26	; 0x17
     f5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f5e:	6d 89       	ldd	r22, Y+21	; 0x15
     f60:	7e 89       	ldd	r23, Y+22	; 0x16
     f62:	8f 89       	ldd	r24, Y+23	; 0x17
     f64:	98 8d       	ldd	r25, Y+24	; 0x18
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e8       	ldi	r20, 0x80	; 128
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f72:	88 23       	and	r24, r24
     f74:	2c f4       	brge	.+10     	; 0xf80 <main+0x43a>
		__ticks = 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c 8b       	std	Y+20, r25	; 0x14
     f7c:	8b 8b       	std	Y+19, r24	; 0x13
     f7e:	3f c0       	rjmp	.+126    	; 0xffe <main+0x4b8>
	else if (__tmp > 65535)
     f80:	6d 89       	ldd	r22, Y+21	; 0x15
     f82:	7e 89       	ldd	r23, Y+22	; 0x16
     f84:	8f 89       	ldd	r24, Y+23	; 0x17
     f86:	98 8d       	ldd	r25, Y+24	; 0x18
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	3f ef       	ldi	r19, 0xFF	; 255
     f8c:	4f e7       	ldi	r20, 0x7F	; 127
     f8e:	57 e4       	ldi	r21, 0x47	; 71
     f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f94:	18 16       	cp	r1, r24
     f96:	4c f5       	brge	.+82     	; 0xfea <main+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f98:	69 8d       	ldd	r22, Y+25	; 0x19
     f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	9c 8b       	std	Y+20, r25	; 0x14
     fbe:	8b 8b       	std	Y+19, r24	; 0x13
     fc0:	0f c0       	rjmp	.+30     	; 0xfe0 <main+0x49a>
     fc2:	88 ec       	ldi	r24, 0xC8	; 200
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9a 8b       	std	Y+18, r25	; 0x12
     fc8:	89 8b       	std	Y+17, r24	; 0x11
     fca:	89 89       	ldd	r24, Y+17	; 0x11
     fcc:	9a 89       	ldd	r25, Y+18	; 0x12
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <main+0x488>
     fd2:	9a 8b       	std	Y+18, r25	; 0x12
     fd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd6:	8b 89       	ldd	r24, Y+19	; 0x13
     fd8:	9c 89       	ldd	r25, Y+20	; 0x14
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	9c 8b       	std	Y+20, r25	; 0x14
     fde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe0:	8b 89       	ldd	r24, Y+19	; 0x13
     fe2:	9c 89       	ldd	r25, Y+20	; 0x14
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	69 f7       	brne	.-38     	; 0xfc2 <main+0x47c>
     fe8:	14 c0       	rjmp	.+40     	; 0x1012 <main+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    1000:	9c 89       	ldd	r25, Y+20	; 0x14
    1002:	98 8b       	std	Y+16, r25	; 0x10
    1004:	8f 87       	std	Y+15, r24	; 0x0f
    1006:	8f 85       	ldd	r24, Y+15	; 0x0f
    1008:	98 89       	ldd	r25, Y+16	; 0x10
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <main+0x4c4>
    100e:	98 8b       	std	Y+16, r25	; 0x10
    1010:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(200);
				do {
				motionDetected = PIR_getState();
    1012:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <PIR_getState>
    1016:	80 93 7d 00 	sts	0x007D, r24
				} while (motionDetected);
    101a:	80 91 7d 00 	lds	r24, 0x007D
    101e:	88 23       	and	r24, r24
    1020:	c1 f7       	brne	.-16     	; 0x1012 <main+0x4cc>

				/*Timer_deInit(TIMER1_ID);*/
				Timer_deInit(TIMER1_ID);
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 55 12 	call	0x24aa	; 0x24aa <Timer_deInit>

				g_seconds_counter=0;
    1028:	10 92 7c 00 	sts	0x007C, r1
				/* Set the call back function and initialize timer driver again*/

				/* Rotate the motor anti-clockwise with maximum speed for 15 seconds */

				/* Closing the door for 15 seconds */
				UART_sendByte(LOCKING_DOOR);
    102c:	84 e4       	ldi	r24, 0x44	; 68
    102e:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
				DcMotor_Rotate(Anti_ClockWise,100);
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	64 e6       	ldi	r22, 0x64	; 100
    1036:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DcMotor_Rotate>
				/* door_locking = UART_recieveByte();*/
			   	Timer_init(&timerConfig);
    103a:	ce 01       	movw	r24, r28
    103c:	c2 96       	adiw	r24, 0x32	; 50
    103e:	0e 94 bf 10 	call	0x217e	; 0x217e <Timer_init>
			   	while(g_seconds_counter<=15){};
    1042:	80 91 7c 00 	lds	r24, 0x007C
    1046:	80 31       	cpi	r24, 0x10	; 16
    1048:	e0 f3       	brcs	.-8      	; 0x1042 <main+0x4fc>
                /*Stop Timer1*/
			   	Timer_deInit(TIMER1_ID);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	0e 94 55 12 	call	0x24aa	; 0x24aa <Timer_deInit>

			   	g_seconds_counter=0;
    1050:	10 92 7c 00 	sts	0x007C, r1

				/* stop the motor */
				DcMotor_Rotate(STOP,0);
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DcMotor_Rotate>
    105c:	01 cf       	rjmp	.-510    	; 0xe60 <main+0x31a>
			}
			/* process Change Password option */
			else if(action == CHANGE_PASSWORD){
    105e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1060:	83 3e       	cpi	r24, 0xE3	; 227
    1062:	09 f0       	breq	.+2      	; 0x1066 <main+0x520>
    1064:	fd ce       	rjmp	.-518    	; 0xe60 <main+0x31a>
				/* Get the password from HMI_ECU and save it in the External EEPRPOM */
				changePassword();
    1066:	0e 94 a8 08 	call	0x1150	; 0x1150 <changePassword>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 e2       	ldi	r26, 0x20	; 32
    1070:	b1 e4       	ldi	r27, 0x41	; 65
    1072:	8b 87       	std	Y+11, r24	; 0x0b
    1074:	9c 87       	std	Y+12, r25	; 0x0c
    1076:	ad 87       	std	Y+13, r26	; 0x0d
    1078:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107a:	6b 85       	ldd	r22, Y+11	; 0x0b
    107c:	7c 85       	ldd	r23, Y+12	; 0x0c
    107e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1080:	9e 85       	ldd	r25, Y+14	; 0x0e
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	4a ef       	ldi	r20, 0xFA	; 250
    1088:	54 e4       	ldi	r21, 0x44	; 68
    108a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8f 83       	std	Y+7, r24	; 0x07
    1094:	98 87       	std	Y+8, r25	; 0x08
    1096:	a9 87       	std	Y+9, r26	; 0x09
    1098:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    109a:	6f 81       	ldd	r22, Y+7	; 0x07
    109c:	78 85       	ldd	r23, Y+8	; 0x08
    109e:	89 85       	ldd	r24, Y+9	; 0x09
    10a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	5f e3       	ldi	r21, 0x3F	; 63
    10aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ae:	88 23       	and	r24, r24
    10b0:	2c f4       	brge	.+10     	; 0x10bc <main+0x576>
		__ticks = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
    10ba:	3f c0       	rjmp	.+126    	; 0x113a <main+0x5f4>
	else if (__tmp > 65535)
    10bc:	6f 81       	ldd	r22, Y+7	; 0x07
    10be:	78 85       	ldd	r23, Y+8	; 0x08
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	57 e4       	ldi	r21, 0x47	; 71
    10cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	4c f5       	brge	.+82     	; 0x1126 <main+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10da:	9e 85       	ldd	r25, Y+14	; 0x0e
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e2       	ldi	r20, 0x20	; 32
    10e2:	51 e4       	ldi	r21, 0x41	; 65
    10e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	0f c0       	rjmp	.+30     	; 0x111c <main+0x5d6>
    10fe:	88 ec       	ldi	r24, 0xC8	; 200
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <main+0x5c4>
    110e:	9c 83       	std	Y+4, r25	; 0x04
    1110:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	69 f7       	brne	.-38     	; 0x10fe <main+0x5b8>
    1124:	9d ce       	rjmp	.-710    	; 0xe60 <main+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1126:	6f 81       	ldd	r22, Y+7	; 0x07
    1128:	78 85       	ldd	r23, Y+8	; 0x08
    112a:	89 85       	ldd	r24, Y+9	; 0x09
    112c:	9a 85       	ldd	r25, Y+10	; 0x0a
    112e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <main+0x600>
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	88 ce       	rjmp	.-752    	; 0xe60 <main+0x31a>

00001150 <changePassword>:
			}
		}
	}
}
void changePassword(void)
{
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	2f 97       	sbiw	r28, 0x0f	; 15
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
	uint8 i,enteredPass1[PASSWORD_SIZE+2],savedPass1[PASSWORD_SIZE+2];
	for (i = 0; i < PASSWORD_SIZE; i++) {
    1168:	19 82       	std	Y+1, r1	; 0x01
    116a:	0f c0       	rjmp	.+30     	; 0x118a <changePassword+0x3a>
		enteredPass1[i] = UART_recieveByte();
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	08 2f       	mov	r16, r24
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	0e 94 f5 13 	call	0x27ea	; 0x27ea <UART_recieveByte>
    1176:	28 2f       	mov	r18, r24
    1178:	ce 01       	movw	r24, r28
    117a:	02 96       	adiw	r24, 0x02	; 2
    117c:	fc 01       	movw	r30, r24
    117e:	e0 0f       	add	r30, r16
    1180:	f1 1f       	adc	r31, r17
    1182:	20 83       	st	Z, r18
	}
}
void changePassword(void)
{
	uint8 i,enteredPass1[PASSWORD_SIZE+2],savedPass1[PASSWORD_SIZE+2];
	for (i = 0; i < PASSWORD_SIZE; i++) {
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	85 30       	cpi	r24, 0x05	; 5
    118e:	70 f3       	brcs	.-36     	; 0x116c <changePassword+0x1c>
		enteredPass1[i] = UART_recieveByte();
	}

	// Read the old password from the External EEPROM
	EEPROM_readData(0x0311,savedPass1,PASSWORD_SIZE);
    1190:	9e 01       	movw	r18, r28
    1192:	27 5f       	subi	r18, 0xF7	; 247
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	81 e1       	ldi	r24, 0x11	; 17
    1198:	93 e0       	ldi	r25, 0x03	; 3
    119a:	b9 01       	movw	r22, r18
    119c:	45 e0       	ldi	r20, 0x05	; 5
    119e:	0e 94 23 0b 	call	0x1646	; 0x1646 <EEPROM_readData>
	// Checking the password
	for (i = 0; i < PASSWORD_SIZE; ++i) {
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	1b c0       	rjmp	.+54     	; 0x11dc <changePassword+0x8c>
		if (enteredPass1[i] != savedPass1[i]) {
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	ce 01       	movw	r24, r28
    11ae:	02 96       	adiw	r24, 0x02	; 2
    11b0:	fc 01       	movw	r30, r24
    11b2:	e2 0f       	add	r30, r18
    11b4:	f3 1f       	adc	r31, r19
    11b6:	40 81       	ld	r20, Z
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	ce 01       	movw	r24, r28
    11c0:	09 96       	adiw	r24, 0x09	; 9
    11c2:	fc 01       	movw	r30, r24
    11c4:	e2 0f       	add	r30, r18
    11c6:	f3 1f       	adc	r31, r19
    11c8:	80 81       	ld	r24, Z
    11ca:	48 17       	cp	r20, r24
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <changePassword+0x86>
			// Sends to the HMI that the passwords do not match
			UART_sendByte(TRUE_PASSWORD);
    11ce:	83 e3       	ldi	r24, 0x33	; 51
    11d0:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <changePassword+0x92>
	}

	// Read the old password from the External EEPROM
	EEPROM_readData(0x0311,savedPass1,PASSWORD_SIZE);
	// Checking the password
	for (i = 0; i < PASSWORD_SIZE; ++i) {
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	85 30       	cpi	r24, 0x05	; 5
    11e0:	10 f3       	brcs	.-60     	; 0x11a6 <changePassword+0x56>
			// Sends to the HMI that the passwords do not match
			UART_sendByte(TRUE_PASSWORD);
			break;
		}
	}
	if (i == PASSWORD_SIZE) {
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	85 30       	cpi	r24, 0x05	; 5
    11e6:	29 f4       	brne	.+10     	; 0x11f2 <changePassword+0xa2>
		/* Sends to the HMI that the password is correct */
		UART_sendByte(WRONG_PASSWORD);
    11e8:	82 e3       	ldi	r24, 0x32	; 50
    11ea:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
        getAndSavePassword();
    11ee:	0e 94 04 09 	call	0x1208	; 0x1208 <getAndSavePassword>
		}

}
    11f2:	2f 96       	adiw	r28, 0x0f	; 15
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	08 95       	ret

00001208 <getAndSavePassword>:
/*
 * Description :
 * Function responsible for Get the password from HMI_ECU and save it in the External EEPRPOM.
 */
void getAndSavePassword(void){
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	2d 97       	sbiw	r28, 0x0d	; 13
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
		}else{
			/* if the two passwords are not the same, send DIFF_PASSWORDS byte to HMI_ECU */
			UART_sendByte(DIFF_PASSWORDS);
		}
	}
}
    121c:	2d b7       	in	r18, 0x3d	; 61
    121e:	3e b7       	in	r19, 0x3e	; 62
    1220:	3d 87       	std	Y+13, r19	; 0x0d
    1222:	2c 87       	std	Y+12, r18	; 0x0c
}
/*
 * Description :
 * Function responsible for Get the password from HMI_ECU and save it in the External EEPRPOM.
 */
void getAndSavePassword(void){
    1224:	8d b7       	in	r24, 0x3d	; 61
    1226:	9e b7       	in	r25, 0x3e	; 62
    1228:	9f 83       	std	Y+7, r25	; 0x07
    122a:	8e 83       	std	Y+6, r24	; 0x06
	uint8 size = PASSWORD_SIZE+1;
    122c:	86 e0       	ldi	r24, 0x06	; 6
    122e:	89 83       	std	Y+1, r24	; 0x01
	uint8 pass1[size], pass2[size];
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	2d b7       	in	r18, 0x3d	; 61
    1238:	3e b7       	in	r19, 0x3e	; 62
    123a:	28 1b       	sub	r18, r24
    123c:	39 0b       	sbc	r19, r25
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	3e bf       	out	0x3e, r19	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	2d bf       	out	0x3d, r18	; 61
    1248:	8d b7       	in	r24, 0x3d	; 61
    124a:	9e b7       	in	r25, 0x3e	; 62
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	9b 87       	std	Y+11, r25	; 0x0b
    1250:	8a 87       	std	Y+10, r24	; 0x0a
    1252:	8a 85       	ldd	r24, Y+10	; 0x0a
    1254:	9b 85       	ldd	r25, Y+11	; 0x0b
    1256:	00 96       	adiw	r24, 0x00	; 0
    1258:	9b 87       	std	Y+11, r25	; 0x0b
    125a:	8a 87       	std	Y+10, r24	; 0x0a
    125c:	2a 85       	ldd	r18, Y+10	; 0x0a
    125e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1260:	3d 83       	std	Y+5, r19	; 0x05
    1262:	2c 83       	std	Y+4, r18	; 0x04
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	2d b7       	in	r18, 0x3d	; 61
    126c:	3e b7       	in	r19, 0x3e	; 62
    126e:	28 1b       	sub	r18, r24
    1270:	39 0b       	sbc	r19, r25
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	3e bf       	out	0x3e, r19	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	2d bf       	out	0x3d, r18	; 61
    127c:	8d b7       	in	r24, 0x3d	; 61
    127e:	9e b7       	in	r25, 0x3e	; 62
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	99 87       	std	Y+9, r25	; 0x09
    1284:	88 87       	std	Y+8, r24	; 0x08
    1286:	88 85       	ldd	r24, Y+8	; 0x08
    1288:	99 85       	ldd	r25, Y+9	; 0x09
    128a:	00 96       	adiw	r24, 0x00	; 0
    128c:	99 87       	std	Y+9, r25	; 0x09
    128e:	88 87       	std	Y+8, r24	; 0x08
    1290:	28 85       	ldd	r18, Y+8	; 0x08
    1292:	39 85       	ldd	r19, Y+9	; 0x09
    1294:	3b 83       	std	Y+3, r19	; 0x03
    1296:	2a 83       	std	Y+2, r18	; 0x02
	/* loop until the user enters same password twice for confimation  */
	for(;;){
		/* Send CONTROL_ECU_READY byte to HMI_ECU to ask it to send the two passwords */
		UART_sendByte(CONTROL_ECU_READY);
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
		/* Receive the password and the confirmation password from HMI_ECU */
		UART_receiveString(pass1);
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	9d 81       	ldd	r25, Y+5	; 0x05
    12a2:	0e 94 45 14 	call	0x288a	; 0x288a <UART_receiveString>
		UART_receiveString(pass2);
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	9b 81       	ldd	r25, Y+3	; 0x03
    12aa:	0e 94 45 14 	call	0x288a	; 0x288a <UART_receiveString>
		/* compare the two passwords */
		if(!strcmp((char *)pass1,(char *)pass2)){
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	2a 81       	ldd	r18, Y+2	; 0x02
    12b4:	3b 81       	ldd	r19, Y+3	; 0x03
    12b6:	b9 01       	movw	r22, r18
    12b8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <strcmp>
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	11 f5       	brne	.+68     	; 0x1304 <getAndSavePassword+0xfc>
			/* if the two passwords are the same save the password in the EEPROM */
			EEPROM_writeData(0x0311,pass1,PASSWORD_SIZE);
    12c0:	2c 81       	ldd	r18, Y+4	; 0x04
    12c2:	3d 81       	ldd	r19, Y+5	; 0x05
    12c4:	81 e1       	ldi	r24, 0x11	; 17
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	b9 01       	movw	r22, r18
    12ca:	45 e0       	ldi	r20, 0x05	; 5
    12cc:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROM_writeData>
			/* send PASSWORD_SAVED byte to HMI_ECU */
			UART_sendByte(PASSWORD_SAVED);
    12d0:	81 e1       	ldi	r24, 0x11	; 17
    12d2:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	9f 81       	ldd	r25, Y+7	; 0x07
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	9e bf       	out	0x3e, r25	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	8d bf       	out	0x3d, r24	; 61
		}else{
			/* if the two passwords are not the same, send DIFF_PASSWORDS byte to HMI_ECU */
			UART_sendByte(DIFF_PASSWORDS);
		}
	}
}
    12e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12e6:	3d 85       	ldd	r19, Y+13	; 0x0d
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	3e bf       	out	0x3e, r19	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	2d bf       	out	0x3d, r18	; 61
    12f2:	2d 96       	adiw	r28, 0x0d	; 13
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret
			/* send PASSWORD_SAVED byte to HMI_ECU */
			UART_sendByte(PASSWORD_SAVED);
			return;
		}else{
			/* if the two passwords are not the same, send DIFF_PASSWORDS byte to HMI_ECU */
			UART_sendByte(DIFF_PASSWORDS);
    1304:	82 e2       	ldi	r24, 0x22	; 34
    1306:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
    130a:	c6 cf       	rjmp	.-116    	; 0x1298 <getAndSavePassword+0x90>

0000130c <timer1_SetRequiredCallBackFunction>:
}
/*
 * Description :
 * call-back function.
 */
void timer1_SetRequiredCallBackFunction(void){
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	 g_seconds_counter++;
    1314:	80 91 7c 00 	lds	r24, 0x007C
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	80 93 7c 00 	sts	0x007C, r24
}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <inits>:
/*it Initialize buzzer, motor and PIR SENSOR*/
void inits(void){
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the Buzzer */
	Buzzer_init();
    132c:	0e 94 9f 09 	call	0x133e	; 0x133e <Buzzer_init>
	/* Initialize the DC Motor */
	DcMotor_Init();
    1330:	0e 94 c8 09 	call	0x1390	; 0x1390 <DcMotor_Init>
	/* Initialize the PIR Sensor */
	PIR_init();
    1334:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <PIR_init>
}
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <Buzzer_init>:
#include "gpio.h"
#include "std_types.h"

/*Initializes the buzzer pin direction and turn off the buzzer.*/
 void Buzzer_init(void)
 {
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	 GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	67 e0       	ldi	r22, 0x07	; 7
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <GPIO_setupPinDirection>
	 GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	67 e0       	ldi	r22, 0x07	; 7
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
 }
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <Buzzer_on>:

/*Activates the buzzer.*/
 void Buzzer_on(void)
 {
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	 GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	67 e0       	ldi	r22, 0x07	; 7
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
 }
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <Buzzer_off>:
/*Deactivates the buzzer.*/
 void Buzzer_off(void)
 {
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	 GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	67 e0       	ldi	r22, 0x07	; 7
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
 }
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <DcMotor_Init>:
#include "pwm.h"

/*Initializes the DC motor by setting the direction for the motor pins and stopping the
motor at the beginning.*/
void DcMotor_Init(void)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	66 e0       	ldi	r22, 0x06	; 6
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	67 e0       	ldi	r22, 0x07	; 7
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <GPIO_setupPinDirection>

	/* Stop the DC-Motor at the beginning (IN1 = 0, IN2 = 0) */
	GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	66 e0       	ldi	r22, 0x06	; 6
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
	GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	67 e0       	ldi	r22, 0x07	; 7
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <DcMotor_Rotate>:
/*Controls the motor's state (Clockwise/Anti-Clockwise/Stop) and adjusts the speed based
on the input duty cycle.*/
/*Parameters:
▪ state: Enum or uint8 that indicates motor direction (CW, A-CW, Stop).
▪ speed: Motor speed in percentage (0 to 100%).*/
void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <DcMotor_Rotate+0x6>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <DcMotor_Rotate+0x8>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	6a 83       	std	Y+2, r22	; 0x02
	/* Setting the DC Motor rotation direction (CW/ or A-CW or stop) based on the state value. */
	switch(state)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3c 83       	std	Y+4, r19	; 0x04
    13de:	2b 83       	std	Y+3, r18	; 0x03
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	f9 f0       	breq	.+62     	; 0x1428 <DcMotor_Rotate+0x62>
    13ea:	2b 81       	ldd	r18, Y+3	; 0x03
    13ec:	3c 81       	ldd	r19, Y+4	; 0x04
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	79 f0       	breq	.+30     	; 0x1412 <DcMotor_Rotate+0x4c>
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	01 f5       	brne	.+64     	; 0x143c <DcMotor_Rotate+0x76>
	{
		case STOP:
			/* Stop the DC-Motor (IN1 = 0, IN2 = 0) */
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	66 e0       	ldi	r22, 0x06	; 6
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	67 e0       	ldi	r22, 0x07	; 7
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
    1410:	15 c0       	rjmp	.+42     	; 0x143c <DcMotor_Rotate+0x76>
			break;
		case ClockWise:
			/* DC-Motor Mode --> ClockWise Rotation (IN1 = 0, IN2 = 1) */
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	66 e0       	ldi	r22, 0x06	; 6
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	67 e0       	ldi	r22, 0x07	; 7
    1420:	41 e0       	ldi	r20, 0x01	; 1
    1422:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
    1426:	0a c0       	rjmp	.+20     	; 0x143c <DcMotor_Rotate+0x76>
			break;
		case Anti_ClockWise:
			/* DC-Motor Mode --> Anti_ClockWise Rotation (IN1 = 1, IN2 = 0) */
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	66 e0       	ldi	r22, 0x06	; 6
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1432:	83 e0       	ldi	r24, 0x03	; 3
    1434:	67 e0       	ldi	r22, 0x07	; 7
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_writePin>
		}

		/* Setting the Required DC Motor Speed Using PWM Signal at Enable1 */
		if ((speed >= 0) && (speed <= 255))
		{
			PWM_Timer0_Start(speed);
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <PWM_Timer0_Start>
		}
		else
		{
			PWM_Timer0_Start(0);
		}
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <EEPROM_writeByte+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <EEPROM_writeByte+0x8>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1462:	0e 94 0e 13 	call	0x261c	; 0x261c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1466:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    146a:	88 30       	cpi	r24, 0x08	; 8
    146c:	11 f0       	breq	.+4      	; 0x1472 <EEPROM_writeByte+0x22>
        return ERROR;
    146e:	1c 82       	std	Y+4, r1	; 0x04
    1470:	28 c0       	rjmp	.+80     	; 0x14c2 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	80 70       	andi	r24, 0x00	; 0
    1478:	97 70       	andi	r25, 0x07	; 7
    147a:	88 0f       	add	r24, r24
    147c:	89 2f       	mov	r24, r25
    147e:	88 1f       	adc	r24, r24
    1480:	99 0b       	sbc	r25, r25
    1482:	91 95       	neg	r25
    1484:	80 6a       	ori	r24, 0xA0	; 160
    1486:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    148a:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    148e:	88 31       	cpi	r24, 0x18	; 24
    1490:	11 f0       	breq	.+4      	; 0x1496 <EEPROM_writeByte+0x46>
        return ERROR; 
    1492:	1c 82       	std	Y+4, r1	; 0x04
    1494:	16 c0       	rjmp	.+44     	; 0x14c2 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    149c:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    14a0:	88 32       	cpi	r24, 0x28	; 40
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <EEPROM_writeByte+0x58>
        return ERROR;
    14a4:	1c 82       	std	Y+4, r1	; 0x04
    14a6:	0d c0       	rjmp	.+26     	; 0x14c2 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14ae:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    14b2:	88 32       	cpi	r24, 0x28	; 40
    14b4:	11 f0       	breq	.+4      	; 0x14ba <EEPROM_writeByte+0x6a>
        return ERROR;
    14b6:	1c 82       	std	Y+4, r1	; 0x04
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <EEPROM_writeByte+0x72>
    /* Send the Stop Bit */
    TWI_stop();
    14ba:	0e 94 1e 13 	call	0x263c	; 0x263c <TWI_stop>
	
    return SUCCESS;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	8c 83       	std	Y+4, r24	; 0x04
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <EEPROM_readByte+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <EEPROM_readByte+0x8>
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	7c 83       	std	Y+4, r23	; 0x04
    14e6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14e8:	0e 94 0e 13 	call	0x261c	; 0x261c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14ec:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    14f0:	88 30       	cpi	r24, 0x08	; 8
    14f2:	11 f0       	breq	.+4      	; 0x14f8 <EEPROM_readByte+0x26>
        return ERROR;
    14f4:	1d 82       	std	Y+5, r1	; 0x05
    14f6:	44 c0       	rjmp	.+136    	; 0x1580 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	80 70       	andi	r24, 0x00	; 0
    14fe:	97 70       	andi	r25, 0x07	; 7
    1500:	88 0f       	add	r24, r24
    1502:	89 2f       	mov	r24, r25
    1504:	88 1f       	adc	r24, r24
    1506:	99 0b       	sbc	r25, r25
    1508:	91 95       	neg	r25
    150a:	80 6a       	ori	r24, 0xA0	; 160
    150c:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1510:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1514:	88 31       	cpi	r24, 0x18	; 24
    1516:	11 f0       	breq	.+4      	; 0x151c <EEPROM_readByte+0x4a>
        return ERROR;
    1518:	1d 82       	std	Y+5, r1	; 0x05
    151a:	32 c0       	rjmp	.+100    	; 0x1580 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1522:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1526:	88 32       	cpi	r24, 0x28	; 40
    1528:	11 f0       	breq	.+4      	; 0x152e <EEPROM_readByte+0x5c>
        return ERROR;
    152a:	1d 82       	std	Y+5, r1	; 0x05
    152c:	29 c0       	rjmp	.+82     	; 0x1580 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    152e:	0e 94 0e 13 	call	0x261c	; 0x261c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1532:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1536:	80 31       	cpi	r24, 0x10	; 16
    1538:	11 f0       	breq	.+4      	; 0x153e <EEPROM_readByte+0x6c>
        return ERROR;
    153a:	1d 82       	std	Y+5, r1	; 0x05
    153c:	21 c0       	rjmp	.+66     	; 0x1580 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	80 70       	andi	r24, 0x00	; 0
    1544:	97 70       	andi	r25, 0x07	; 7
    1546:	88 0f       	add	r24, r24
    1548:	89 2f       	mov	r24, r25
    154a:	88 1f       	adc	r24, r24
    154c:	99 0b       	sbc	r25, r25
    154e:	91 95       	neg	r25
    1550:	81 6a       	ori	r24, 0xA1	; 161
    1552:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1556:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    155a:	80 34       	cpi	r24, 0x40	; 64
    155c:	11 f0       	breq	.+4      	; 0x1562 <EEPROM_readByte+0x90>
        return ERROR;
    155e:	1d 82       	std	Y+5, r1	; 0x05
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <EEPROM_readByte+0xae>
    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1562:	0e 94 53 13 	call	0x26a6	; 0x26a6 <TWI_readByteWithNACK>
    1566:	eb 81       	ldd	r30, Y+3	; 0x03
    1568:	fc 81       	ldd	r31, Y+4	; 0x04
    156a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    156c:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1570:	88 35       	cpi	r24, 0x58	; 88
    1572:	11 f0       	breq	.+4      	; 0x1578 <EEPROM_readByte+0xa6>
        return ERROR;
    1574:	1d 82       	std	Y+5, r1	; 0x05
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <EEPROM_readByte+0xae>
    /* Send the Stop Bit */
    TWI_stop();
    1578:	0e 94 1e 13 	call	0x263c	; 0x263c <TWI_stop>
    return SUCCESS;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <EEPROM_writeData>:
uint8 EEPROM_writeData(uint16 u16addr,uint8* u8data, uint8 size){
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	27 97       	sbiw	r28, 0x07	; 7
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	9b 83       	std	Y+3, r25	; 0x03
    15a8:	8a 83       	std	Y+2, r24	; 0x02
    15aa:	7d 83       	std	Y+5, r23	; 0x05
    15ac:	6c 83       	std	Y+4, r22	; 0x04
    15ae:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
    TWI_start();
    15b0:	0e 94 0e 13 	call	0x261c	; 0x261c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15b4:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    15b8:	88 30       	cpi	r24, 0x08	; 8
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <EEPROM_writeData+0x2e>
        return ERROR;
    15bc:	1f 82       	std	Y+7, r1	; 0x07
    15be:	39 c0       	rjmp	.+114    	; 0x1632 <EEPROM_writeData+0xa0>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	80 70       	andi	r24, 0x00	; 0
    15c6:	97 70       	andi	r25, 0x07	; 7
    15c8:	88 0f       	add	r24, r24
    15ca:	89 2f       	mov	r24, r25
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 0b       	sbc	r25, r25
    15d0:	91 95       	neg	r25
    15d2:	80 6a       	ori	r24, 0xA0	; 160
    15d4:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15d8:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    15dc:	88 31       	cpi	r24, 0x18	; 24
    15de:	11 f0       	breq	.+4      	; 0x15e4 <EEPROM_writeData+0x52>
        return ERROR;
    15e0:	1f 82       	std	Y+7, r1	; 0x07
    15e2:	27 c0       	rjmp	.+78     	; 0x1632 <EEPROM_writeData+0xa0>
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15ea:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    15ee:	88 32       	cpi	r24, 0x28	; 40
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <EEPROM_writeData+0x64>
        return ERROR;
    15f2:	1f 82       	std	Y+7, r1	; 0x07
    15f4:	1e c0       	rjmp	.+60     	; 0x1632 <EEPROM_writeData+0xa0>
	for (i = 0; i < size; i++) {
    15f6:	19 82       	std	Y+1, r1	; 0x01
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <EEPROM_writeData+0x90>
	    /* write byte to eeprom */
		TWI_writeByte(u8data[i]);
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	fc 01       	movw	r30, r24
    1606:	e2 0f       	add	r30, r18
    1608:	f3 1f       	adc	r31, r19
    160a:	80 81       	ld	r24, Z
    160c:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1610:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1614:	88 32       	cpi	r24, 0x28	; 40
    1616:	11 f0       	breq	.+4      	; 0x161c <EEPROM_writeData+0x8a>
			return ERROR;
    1618:	1f 82       	std	Y+7, r1	; 0x07
    161a:	0b c0       	rjmp	.+22     	; 0x1632 <EEPROM_writeData+0xa0>
        return ERROR;
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
	for (i = 0; i < size; i++) {
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	99 81       	ldd	r25, Y+1	; 0x01
    1624:	8e 81       	ldd	r24, Y+6	; 0x06
    1626:	98 17       	cp	r25, r24
    1628:	40 f3       	brcs	.-48     	; 0x15fa <EEPROM_writeData+0x68>
		TWI_writeByte(u8data[i]);
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
			return ERROR;
	}
    /* Send the Stop Bit */
    TWI_stop();
    162a:	0e 94 1e 13 	call	0x263c	; 0x263c <TWI_stop>
    return SUCCESS;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	8f 83       	std	Y+7, r24	; 0x07
    1632:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1634:	27 96       	adiw	r28, 0x07	; 7
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <EEPROM_readData>:
uint8 EEPROM_readData(uint16 u16addr,uint8 *u8data, uint8 size){
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	27 97       	sbiw	r28, 0x07	; 7
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	9b 83       	std	Y+3, r25	; 0x03
    1660:	8a 83       	std	Y+2, r24	; 0x02
    1662:	7d 83       	std	Y+5, r23	; 0x05
    1664:	6c 83       	std	Y+4, r22	; 0x04
    1666:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	/* Send the Start Bit */
    TWI_start();
    1668:	0e 94 0e 13 	call	0x261c	; 0x261c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    166c:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1670:	88 30       	cpi	r24, 0x08	; 8
    1672:	11 f0       	breq	.+4      	; 0x1678 <EEPROM_readData+0x32>
        return ERROR;
    1674:	1f 82       	std	Y+7, r1	; 0x07
    1676:	6c c0       	rjmp	.+216    	; 0x1750 <EEPROM_readData+0x10a>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	80 70       	andi	r24, 0x00	; 0
    167e:	97 70       	andi	r25, 0x07	; 7
    1680:	88 0f       	add	r24, r24
    1682:	89 2f       	mov	r24, r25
    1684:	88 1f       	adc	r24, r24
    1686:	99 0b       	sbc	r25, r25
    1688:	91 95       	neg	r25
    168a:	80 6a       	ori	r24, 0xA0	; 160
    168c:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1690:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1694:	88 31       	cpi	r24, 0x18	; 24
    1696:	11 f0       	breq	.+4      	; 0x169c <EEPROM_readData+0x56>
        return ERROR;
    1698:	1f 82       	std	Y+7, r1	; 0x07
    169a:	5a c0       	rjmp	.+180    	; 0x1750 <EEPROM_readData+0x10a>
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16a2:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    16a6:	88 32       	cpi	r24, 0x28	; 40
    16a8:	11 f0       	breq	.+4      	; 0x16ae <EEPROM_readData+0x68>
        return ERROR;
    16aa:	1f 82       	std	Y+7, r1	; 0x07
    16ac:	51 c0       	rjmp	.+162    	; 0x1750 <EEPROM_readData+0x10a>
    /* Send the Repeated Start Bit */
    TWI_start();
    16ae:	0e 94 0e 13 	call	0x261c	; 0x261c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    16b2:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    16b6:	80 31       	cpi	r24, 0x10	; 16
    16b8:	11 f0       	breq	.+4      	; 0x16be <EEPROM_readData+0x78>
        return ERROR;
    16ba:	1f 82       	std	Y+7, r1	; 0x07
    16bc:	49 c0       	rjmp	.+146    	; 0x1750 <EEPROM_readData+0x10a>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	9b 81       	ldd	r25, Y+3	; 0x03
    16c2:	80 70       	andi	r24, 0x00	; 0
    16c4:	97 70       	andi	r25, 0x07	; 7
    16c6:	88 0f       	add	r24, r24
    16c8:	89 2f       	mov	r24, r25
    16ca:	88 1f       	adc	r24, r24
    16cc:	99 0b       	sbc	r25, r25
    16ce:	91 95       	neg	r25
    16d0:	81 6a       	ori	r24, 0xA1	; 161
    16d2:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    16d6:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    16da:	80 34       	cpi	r24, 0x40	; 64
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <EEPROM_readData+0x9c>
        return ERROR;
    16de:	1f 82       	std	Y+7, r1	; 0x07
    16e0:	37 c0       	rjmp	.+110    	; 0x1750 <EEPROM_readData+0x10a>
    for(i = 0 ; i<size-1 ; i++){
    16e2:	19 82       	std	Y+1, r1	; 0x01
    16e4:	15 c0       	rjmp	.+42     	; 0x1710 <EEPROM_readData+0xca>
		/* Read Byte from Memory and send ACK */
		u8data[i] = TWI_readByteWithACK();
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	9d 81       	ldd	r25, Y+5	; 0x05
    16f0:	8c 01       	movw	r16, r24
    16f2:	02 0f       	add	r16, r18
    16f4:	13 1f       	adc	r17, r19
    16f6:	0e 94 40 13 	call	0x2680	; 0x2680 <TWI_readByteWithACK>
    16fa:	f8 01       	movw	r30, r16
    16fc:	80 83       	st	Z, r24
		if (TWI_getStatus() != TWI_MR_DATA_ACK)
    16fe:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1702:	80 35       	cpi	r24, 0x50	; 80
    1704:	11 f0       	breq	.+4      	; 0x170a <EEPROM_readData+0xc4>
			return ERROR;
    1706:	1f 82       	std	Y+7, r1	; 0x07
    1708:	23 c0       	rjmp	.+70     	; 0x1750 <EEPROM_readData+0x10a>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;
    for(i = 0 ; i<size-1 ; i++){
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	8e 81       	ldd	r24, Y+6	; 0x06
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	28 17       	cp	r18, r24
    1720:	39 07       	cpc	r19, r25
    1722:	0c f3       	brlt	.-62     	; 0x16e6 <EEPROM_readData+0xa0>
		u8data[i] = TWI_readByteWithACK();
		if (TWI_getStatus() != TWI_MR_DATA_ACK)
			return ERROR;
    }
    /* Read last Byte from Memory without send ACK */
    u8data[i] = TWI_readByteWithNACK();
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	8c 01       	movw	r16, r24
    1730:	02 0f       	add	r16, r18
    1732:	13 1f       	adc	r17, r19
    1734:	0e 94 53 13 	call	0x26a6	; 0x26a6 <TWI_readByteWithNACK>
    1738:	f8 01       	movw	r30, r16
    173a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    173c:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1740:	88 35       	cpi	r24, 0x58	; 88
    1742:	11 f0       	breq	.+4      	; 0x1748 <EEPROM_readData+0x102>
        return ERROR;
    1744:	1f 82       	std	Y+7, r1	; 0x07
    1746:	04 c0       	rjmp	.+8      	; 0x1750 <EEPROM_readData+0x10a>
    /* Send the Stop Bit */
    TWI_stop();
    1748:	0e 94 1e 13 	call	0x263c	; 0x263c <TWI_stop>
    return SUCCESS;
    174c:	f1 e0       	ldi	r31, 0x01	; 1
    174e:	ff 83       	std	Y+7, r31	; 0x07
    1750:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1752:	27 96       	adiw	r28, 0x07	; 7
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	08 95       	ret

00001768 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <GPIO_setupPinDirection+0x6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <GPIO_setupPinDirection+0x8>
    1770:	0f 92       	push	r0
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	6a 83       	std	Y+2, r22	; 0x02
    177a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	88 30       	cpi	r24, 0x08	; 8
    1780:	08 f0       	brcs	.+2      	; 0x1784 <GPIO_setupPinDirection+0x1c>
    1782:	d5 c0       	rjmp	.+426    	; 0x192e <GPIO_setupPinDirection+0x1c6>
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	08 f0       	brcs	.+2      	; 0x178c <GPIO_setupPinDirection+0x24>
    178a:	d1 c0       	rjmp	.+418    	; 0x192e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3d 83       	std	Y+5, r19	; 0x05
    1794:	2c 83       	std	Y+4, r18	; 0x04
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	91 05       	cpc	r25, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <GPIO_setupPinDirection+0x3a>
    17a0:	43 c0       	rjmp	.+134    	; 0x1828 <GPIO_setupPinDirection+0xc0>
    17a2:	2c 81       	ldd	r18, Y+4	; 0x04
    17a4:	3d 81       	ldd	r19, Y+5	; 0x05
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <GPIO_setupPinDirection+0x4e>
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	71 f0       	breq	.+28     	; 0x17d0 <GPIO_setupPinDirection+0x68>
    17b4:	bc c0       	rjmp	.+376    	; 0x192e <GPIO_setupPinDirection+0x1c6>
    17b6:	2c 81       	ldd	r18, Y+4	; 0x04
    17b8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <GPIO_setupPinDirection+0x5a>
    17c0:	5f c0       	rjmp	.+190    	; 0x1880 <GPIO_setupPinDirection+0x118>
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	9d 81       	ldd	r25, Y+5	; 0x05
    17c6:	83 30       	cpi	r24, 0x03	; 3
    17c8:	91 05       	cpc	r25, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <GPIO_setupPinDirection+0x66>
    17cc:	85 c0       	rjmp	.+266    	; 0x18d8 <GPIO_setupPinDirection+0x170>
    17ce:	af c0       	rjmp	.+350    	; 0x192e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	a1 f4       	brne	.+40     	; 0x17fe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17d6:	aa e3       	ldi	r26, 0x3A	; 58
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	ea e3       	ldi	r30, 0x3A	; 58
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <GPIO_setupPinDirection+0x8c>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <GPIO_setupPinDirection+0x88>
    17f8:	84 2b       	or	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	98 c0       	rjmp	.+304    	; 0x192e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17fe:	aa e3       	ldi	r26, 0x3A	; 58
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	ea e3       	ldi	r30, 0x3A	; 58
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <GPIO_setupPinDirection+0xb4>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <GPIO_setupPinDirection+0xb0>
    1820:	80 95       	com	r24
    1822:	84 23       	and	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	83 c0       	rjmp	.+262    	; 0x192e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	a1 f4       	brne	.+40     	; 0x1856 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    182e:	a7 e3       	ldi	r26, 0x37	; 55
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e7 e3       	ldi	r30, 0x37	; 55
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <GPIO_setupPinDirection+0xe4>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <GPIO_setupPinDirection+0xe0>
    1850:	84 2b       	or	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	6c c0       	rjmp	.+216    	; 0x192e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1856:	a7 e3       	ldi	r26, 0x37	; 55
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e7 e3       	ldi	r30, 0x37	; 55
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GPIO_setupPinDirection+0x10c>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <GPIO_setupPinDirection+0x108>
    1878:	80 95       	com	r24
    187a:	84 23       	and	r24, r20
    187c:	8c 93       	st	X, r24
    187e:	57 c0       	rjmp	.+174    	; 0x192e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	a1 f4       	brne	.+40     	; 0x18ae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1886:	a4 e3       	ldi	r26, 0x34	; 52
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e4 e3       	ldi	r30, 0x34	; 52
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <GPIO_setupPinDirection+0x13c>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <GPIO_setupPinDirection+0x138>
    18a8:	84 2b       	or	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	40 c0       	rjmp	.+128    	; 0x192e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18ae:	a4 e3       	ldi	r26, 0x34	; 52
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e4 e3       	ldi	r30, 0x34	; 52
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <GPIO_setupPinDirection+0x164>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <GPIO_setupPinDirection+0x160>
    18d0:	80 95       	com	r24
    18d2:	84 23       	and	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	2b c0       	rjmp	.+86     	; 0x192e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	a1 f4       	brne	.+40     	; 0x1906 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18de:	a1 e3       	ldi	r26, 0x31	; 49
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e1 e3       	ldi	r30, 0x31	; 49
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <GPIO_setupPinDirection+0x194>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <GPIO_setupPinDirection+0x190>
    1900:	84 2b       	or	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	14 c0       	rjmp	.+40     	; 0x192e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1906:	a1 e3       	ldi	r26, 0x31	; 49
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e1 e3       	ldi	r30, 0x31	; 49
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <GPIO_setupPinDirection+0x1bc>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <GPIO_setupPinDirection+0x1b8>
    1928:	80 95       	com	r24
    192a:	84 23       	and	r24, r20
    192c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <GPIO_writePin+0x6>
    1944:	00 d0       	rcall	.+0      	; 0x1946 <GPIO_writePin+0x8>
    1946:	0f 92       	push	r0
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	6a 83       	std	Y+2, r22	; 0x02
    1950:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	88 30       	cpi	r24, 0x08	; 8
    1956:	08 f0       	brcs	.+2      	; 0x195a <GPIO_writePin+0x1c>
    1958:	d5 c0       	rjmp	.+426    	; 0x1b04 <GPIO_writePin+0x1c6>
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	84 30       	cpi	r24, 0x04	; 4
    195e:	08 f0       	brcs	.+2      	; 0x1962 <GPIO_writePin+0x24>
    1960:	d1 c0       	rjmp	.+418    	; 0x1b04 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	3d 83       	std	Y+5, r19	; 0x05
    196a:	2c 83       	std	Y+4, r18	; 0x04
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	91 05       	cpc	r25, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <GPIO_writePin+0x3a>
    1976:	43 c0       	rjmp	.+134    	; 0x19fe <GPIO_writePin+0xc0>
    1978:	2c 81       	ldd	r18, Y+4	; 0x04
    197a:	3d 81       	ldd	r19, Y+5	; 0x05
    197c:	22 30       	cpi	r18, 0x02	; 2
    197e:	31 05       	cpc	r19, r1
    1980:	2c f4       	brge	.+10     	; 0x198c <GPIO_writePin+0x4e>
    1982:	8c 81       	ldd	r24, Y+4	; 0x04
    1984:	9d 81       	ldd	r25, Y+5	; 0x05
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	71 f0       	breq	.+28     	; 0x19a6 <GPIO_writePin+0x68>
    198a:	bc c0       	rjmp	.+376    	; 0x1b04 <GPIO_writePin+0x1c6>
    198c:	2c 81       	ldd	r18, Y+4	; 0x04
    198e:	3d 81       	ldd	r19, Y+5	; 0x05
    1990:	22 30       	cpi	r18, 0x02	; 2
    1992:	31 05       	cpc	r19, r1
    1994:	09 f4       	brne	.+2      	; 0x1998 <GPIO_writePin+0x5a>
    1996:	5f c0       	rjmp	.+190    	; 0x1a56 <GPIO_writePin+0x118>
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	9d 81       	ldd	r25, Y+5	; 0x05
    199c:	83 30       	cpi	r24, 0x03	; 3
    199e:	91 05       	cpc	r25, r1
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <GPIO_writePin+0x66>
    19a2:	85 c0       	rjmp	.+266    	; 0x1aae <GPIO_writePin+0x170>
    19a4:	af c0       	rjmp	.+350    	; 0x1b04 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	a1 f4       	brne	.+40     	; 0x19d4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19ac:	ab e3       	ldi	r26, 0x3B	; 59
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	eb e3       	ldi	r30, 0x3B	; 59
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	48 2f       	mov	r20, r24
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 2e       	mov	r0, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <GPIO_writePin+0x8c>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	0a 94       	dec	r0
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <GPIO_writePin+0x88>
    19ce:	84 2b       	or	r24, r20
    19d0:	8c 93       	st	X, r24
    19d2:	98 c0       	rjmp	.+304    	; 0x1b04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19d4:	ab e3       	ldi	r26, 0x3B	; 59
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e3       	ldi	r30, 0x3B	; 59
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <GPIO_writePin+0xb4>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <GPIO_writePin+0xb0>
    19f6:	80 95       	com	r24
    19f8:	84 23       	and	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	83 c0       	rjmp	.+262    	; 0x1b04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	a1 f4       	brne	.+40     	; 0x1a2c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a04:	a8 e3       	ldi	r26, 0x38	; 56
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e3       	ldi	r30, 0x38	; 56
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <GPIO_writePin+0xe4>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <GPIO_writePin+0xe0>
    1a26:	84 2b       	or	r24, r20
    1a28:	8c 93       	st	X, r24
    1a2a:	6c c0       	rjmp	.+216    	; 0x1b04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a2c:	a8 e3       	ldi	r26, 0x38	; 56
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e8 e3       	ldi	r30, 0x38	; 56
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <GPIO_writePin+0x10c>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <GPIO_writePin+0x108>
    1a4e:	80 95       	com	r24
    1a50:	84 23       	and	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	57 c0       	rjmp	.+174    	; 0x1b04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	a1 f4       	brne	.+40     	; 0x1a84 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a5c:	a5 e3       	ldi	r26, 0x35	; 53
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e5 e3       	ldi	r30, 0x35	; 53
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	48 2f       	mov	r20, r24
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	02 2e       	mov	r0, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <GPIO_writePin+0x13c>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	0a 94       	dec	r0
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <GPIO_writePin+0x138>
    1a7e:	84 2b       	or	r24, r20
    1a80:	8c 93       	st	X, r24
    1a82:	40 c0       	rjmp	.+128    	; 0x1b04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a84:	a5 e3       	ldi	r26, 0x35	; 53
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e5 e3       	ldi	r30, 0x35	; 53
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 2e       	mov	r0, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <GPIO_writePin+0x164>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <GPIO_writePin+0x160>
    1aa6:	80 95       	com	r24
    1aa8:	84 23       	and	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	2b c0       	rjmp	.+86     	; 0x1b04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	a1 f4       	brne	.+40     	; 0x1adc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ab4:	a2 e3       	ldi	r26, 0x32	; 50
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e2 e3       	ldi	r30, 0x32	; 50
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <GPIO_writePin+0x194>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <GPIO_writePin+0x190>
    1ad6:	84 2b       	or	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	14 c0       	rjmp	.+40     	; 0x1b04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1adc:	a2 e3       	ldi	r26, 0x32	; 50
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e2 e3       	ldi	r30, 0x32	; 50
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <GPIO_writePin+0x1bc>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <GPIO_writePin+0x1b8>
    1afe:	80 95       	com	r24
    1b00:	84 23       	and	r24, r20
    1b02:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <GPIO_readPin+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <GPIO_readPin+0x8>
    1b1c:	0f 92       	push	r0
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	8a 83       	std	Y+2, r24	; 0x02
    1b24:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b26:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	88 30       	cpi	r24, 0x08	; 8
    1b2c:	08 f0       	brcs	.+2      	; 0x1b30 <GPIO_readPin+0x1c>
    1b2e:	84 c0       	rjmp	.+264    	; 0x1c38 <GPIO_readPin+0x124>
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <GPIO_readPin+0x24>
    1b36:	80 c0       	rjmp	.+256    	; 0x1c38 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	3d 83       	std	Y+5, r19	; 0x05
    1b40:	2c 83       	std	Y+4, r18	; 0x04
    1b42:	4c 81       	ldd	r20, Y+4	; 0x04
    1b44:	5d 81       	ldd	r21, Y+5	; 0x05
    1b46:	41 30       	cpi	r20, 0x01	; 1
    1b48:	51 05       	cpc	r21, r1
    1b4a:	79 f1       	breq	.+94     	; 0x1baa <GPIO_readPin+0x96>
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	91 05       	cpc	r25, r1
    1b54:	34 f4       	brge	.+12     	; 0x1b62 <GPIO_readPin+0x4e>
    1b56:	2c 81       	ldd	r18, Y+4	; 0x04
    1b58:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5a:	21 15       	cp	r18, r1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	69 f0       	breq	.+26     	; 0x1b7a <GPIO_readPin+0x66>
    1b60:	6b c0       	rjmp	.+214    	; 0x1c38 <GPIO_readPin+0x124>
    1b62:	4c 81       	ldd	r20, Y+4	; 0x04
    1b64:	5d 81       	ldd	r21, Y+5	; 0x05
    1b66:	42 30       	cpi	r20, 0x02	; 2
    1b68:	51 05       	cpc	r21, r1
    1b6a:	b9 f1       	breq	.+110    	; 0x1bda <GPIO_readPin+0xc6>
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	83 30       	cpi	r24, 0x03	; 3
    1b72:	91 05       	cpc	r25, r1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <GPIO_readPin+0x64>
    1b76:	49 c0       	rjmp	.+146    	; 0x1c0a <GPIO_readPin+0xf6>
    1b78:	5f c0       	rjmp	.+190    	; 0x1c38 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b7a:	e9 e3       	ldi	r30, 0x39	; 57
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a9 01       	movw	r20, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <GPIO_readPin+0x7e>
    1b8e:	55 95       	asr	r21
    1b90:	47 95       	ror	r20
    1b92:	8a 95       	dec	r24
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <GPIO_readPin+0x7a>
    1b96:	ca 01       	movw	r24, r20
    1b98:	81 70       	andi	r24, 0x01	; 1
    1b9a:	90 70       	andi	r25, 0x00	; 0
    1b9c:	88 23       	and	r24, r24
    1b9e:	19 f0       	breq	.+6      	; 0x1ba6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	49 c0       	rjmp	.+146    	; 0x1c38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ba6:	19 82       	std	Y+1, r1	; 0x01
    1ba8:	47 c0       	rjmp	.+142    	; 0x1c38 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1baa:	e6 e3       	ldi	r30, 0x36	; 54
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a9 01       	movw	r20, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <GPIO_readPin+0xae>
    1bbe:	55 95       	asr	r21
    1bc0:	47 95       	ror	r20
    1bc2:	8a 95       	dec	r24
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <GPIO_readPin+0xaa>
    1bc6:	ca 01       	movw	r24, r20
    1bc8:	81 70       	andi	r24, 0x01	; 1
    1bca:	90 70       	andi	r25, 0x00	; 0
    1bcc:	88 23       	and	r24, r24
    1bce:	19 f0       	breq	.+6      	; 0x1bd6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	31 c0       	rjmp	.+98     	; 0x1c38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bd6:	19 82       	std	Y+1, r1	; 0x01
    1bd8:	2f c0       	rjmp	.+94     	; 0x1c38 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1bda:	e3 e3       	ldi	r30, 0x33	; 51
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a9 01       	movw	r20, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <GPIO_readPin+0xde>
    1bee:	55 95       	asr	r21
    1bf0:	47 95       	ror	r20
    1bf2:	8a 95       	dec	r24
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <GPIO_readPin+0xda>
    1bf6:	ca 01       	movw	r24, r20
    1bf8:	81 70       	andi	r24, 0x01	; 1
    1bfa:	90 70       	andi	r25, 0x00	; 0
    1bfc:	88 23       	and	r24, r24
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	19 c0       	rjmp	.+50     	; 0x1c38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c06:	19 82       	std	Y+1, r1	; 0x01
    1c08:	17 c0       	rjmp	.+46     	; 0x1c38 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c0a:	e0 e3       	ldi	r30, 0x30	; 48
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <GPIO_readPin+0x10e>
    1c1e:	55 95       	asr	r21
    1c20:	47 95       	ror	r20
    1c22:	8a 95       	dec	r24
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <GPIO_readPin+0x10a>
    1c26:	ca 01       	movw	r24, r20
    1c28:	81 70       	andi	r24, 0x01	; 1
    1c2a:	90 70       	andi	r25, 0x00	; 0
    1c2c:	88 23       	and	r24, r24
    1c2e:	19 f0       	breq	.+6      	; 0x1c36 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c36:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <GPIO_setupPortDirection+0x6>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <GPIO_setupPortDirection+0x8>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	84 30       	cpi	r24, 0x04	; 4
    1c5e:	90 f5       	brcc	.+100    	; 0x1cc4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	3c 83       	std	Y+4, r19	; 0x04
    1c68:	2b 83       	std	Y+3, r18	; 0x03
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	91 05       	cpc	r25, r1
    1c72:	d1 f0       	breq	.+52     	; 0x1ca8 <GPIO_setupPortDirection+0x5e>
    1c74:	2b 81       	ldd	r18, Y+3	; 0x03
    1c76:	3c 81       	ldd	r19, Y+4	; 0x04
    1c78:	22 30       	cpi	r18, 0x02	; 2
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <GPIO_setupPortDirection+0x3e>
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	61 f0       	breq	.+24     	; 0x1c9e <GPIO_setupPortDirection+0x54>
    1c86:	1e c0       	rjmp	.+60     	; 0x1cc4 <GPIO_setupPortDirection+0x7a>
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	22 30       	cpi	r18, 0x02	; 2
    1c8e:	31 05       	cpc	r19, r1
    1c90:	81 f0       	breq	.+32     	; 0x1cb2 <GPIO_setupPortDirection+0x68>
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	83 30       	cpi	r24, 0x03	; 3
    1c98:	91 05       	cpc	r25, r1
    1c9a:	81 f0       	breq	.+32     	; 0x1cbc <GPIO_setupPortDirection+0x72>
    1c9c:	13 c0       	rjmp	.+38     	; 0x1cc4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c9e:	ea e3       	ldi	r30, 0x3A	; 58
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	80 83       	st	Z, r24
    1ca6:	0e c0       	rjmp	.+28     	; 0x1cc4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ca8:	e7 e3       	ldi	r30, 0x37	; 55
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	80 83       	st	Z, r24
    1cb0:	09 c0       	rjmp	.+18     	; 0x1cc4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cb2:	e4 e3       	ldi	r30, 0x34	; 52
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	80 83       	st	Z, r24
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1cbc:	e1 e3       	ldi	r30, 0x31	; 49
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <GPIO_writePort+0x6>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <GPIO_writePort+0x8>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	84 30       	cpi	r24, 0x04	; 4
    1ce6:	90 f5       	brcc	.+100    	; 0x1d4c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	3c 83       	std	Y+4, r19	; 0x04
    1cf0:	2b 83       	std	Y+3, r18	; 0x03
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	d1 f0       	breq	.+52     	; 0x1d30 <GPIO_writePort+0x5e>
    1cfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1d00:	22 30       	cpi	r18, 0x02	; 2
    1d02:	31 05       	cpc	r19, r1
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <GPIO_writePort+0x3e>
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	61 f0       	breq	.+24     	; 0x1d26 <GPIO_writePort+0x54>
    1d0e:	1e c0       	rjmp	.+60     	; 0x1d4c <GPIO_writePort+0x7a>
    1d10:	2b 81       	ldd	r18, Y+3	; 0x03
    1d12:	3c 81       	ldd	r19, Y+4	; 0x04
    1d14:	22 30       	cpi	r18, 0x02	; 2
    1d16:	31 05       	cpc	r19, r1
    1d18:	81 f0       	breq	.+32     	; 0x1d3a <GPIO_writePort+0x68>
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	91 05       	cpc	r25, r1
    1d22:	81 f0       	breq	.+32     	; 0x1d44 <GPIO_writePort+0x72>
    1d24:	13 c0       	rjmp	.+38     	; 0x1d4c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d26:	eb e3       	ldi	r30, 0x3B	; 59
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	80 83       	st	Z, r24
    1d2e:	0e c0       	rjmp	.+28     	; 0x1d4c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d30:	e8 e3       	ldi	r30, 0x38	; 56
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	80 83       	st	Z, r24
    1d38:	09 c0       	rjmp	.+18     	; 0x1d4c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d3a:	e5 e3       	ldi	r30, 0x35	; 53
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	80 83       	st	Z, r24
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d44:	e2 e3       	ldi	r30, 0x32	; 50
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <GPIO_readPort+0x6>
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <GPIO_readPort+0x8>
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d68:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	84 30       	cpi	r24, 0x04	; 4
    1d6e:	90 f5       	brcc	.+100    	; 0x1dd4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	3c 83       	std	Y+4, r19	; 0x04
    1d78:	2b 83       	std	Y+3, r18	; 0x03
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	d1 f0       	breq	.+52     	; 0x1db8 <GPIO_readPort+0x5e>
    1d84:	2b 81       	ldd	r18, Y+3	; 0x03
    1d86:	3c 81       	ldd	r19, Y+4	; 0x04
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <GPIO_readPort+0x3e>
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	61 f0       	breq	.+24     	; 0x1dae <GPIO_readPort+0x54>
    1d96:	1e c0       	rjmp	.+60     	; 0x1dd4 <GPIO_readPort+0x7a>
    1d98:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	81 f0       	breq	.+32     	; 0x1dc2 <GPIO_readPort+0x68>
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	81 f0       	breq	.+32     	; 0x1dcc <GPIO_readPort+0x72>
    1dac:	13 c0       	rjmp	.+38     	; 0x1dd4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1dae:	e9 e3       	ldi	r30, 0x39	; 57
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	0e c0       	rjmp	.+28     	; 0x1dd4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1db8:	e6 e3       	ldi	r30, 0x36	; 54
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	09 c0       	rjmp	.+18     	; 0x1dd4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1dc2:	e3 e3       	ldi	r30, 0x33	; 51
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1dcc:	e0 e3       	ldi	r30, 0x30	; 48
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <PIR_init>:

/*
 * Description :
 * Initializes the PIR sensor by configuring the sensor pin as input.
 */
void PIR_init(void) {
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    /* Set the PIR sensor pin as input */
    GPIO_setupPinDirection(PIR_SENSOR_PORT, PIR_SENSOR_PIN, PIN_INPUT);
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	62 e0       	ldi	r22, 0x02	; 2
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <GPIO_setupPinDirection>
}
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <PIR_getState>:
 * Description :
 * Returns the current state of the PIR sensor.
 * - 1: Motion detected
 * - 0: No motion detected
 */
uint8 PIR_getState(void) {
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    /* Check if the PIR sensor pin is high (motion detected) */
	uint8 motion ;
		motion=GPIO_readPin(PIR_SENSOR_PORT, PIR_SENSOR_PIN);
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	62 e0       	ldi	r22, 0x02	; 2
    1e0a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_readPin>
    1e0e:	89 83       	std	Y+1, r24	; 0x01

		/*if their is a motion we will return MOTION_DETECTED else we will return NO_MOTION_DETECTED */
		return motion;
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <PWM_Timer0_Start>:
Prescaler: F_CPU/64
Non-inverting mode
The function configures OC0 as the output pin.
Parameters:
duty_cycle: Percentage (0 to 100%) representing the PWM duty cycle.*/
void PWM_Timer0_Start(uint8 duty_cycle){
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	0f 92       	push	r0
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
    1e26:	e2 e5       	ldi	r30, 0x52	; 82
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	10 82       	st	Z, r1

	// Set Fast PWM Mode by setting WGM01 and WGM00
	SET_BIT(TCCR0,WGM00);
    1e2c:	a3 e5       	ldi	r26, 0x53	; 83
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e3 e5       	ldi	r30, 0x53	; 83
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	80 64       	ori	r24, 0x40	; 64
    1e38:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    1e3a:	a3 e5       	ldi	r26, 0x53	; 83
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e3 e5       	ldi	r30, 0x53	; 83
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	88 60       	ori	r24, 0x08	; 8
    1e46:	8c 93       	st	X, r24

	// Set Non-Inverting Mode by setting COM01 and clearing COM00
	 SET_BIT(TCCR0,COM01);
    1e48:	a3 e5       	ldi	r26, 0x53	; 83
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e3 e5       	ldi	r30, 0x53	; 83
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 62       	ori	r24, 0x20	; 32
    1e54:	8c 93       	st	X, r24
	 CLEAR_BIT(TCCR0,COM00);
    1e56:	a3 e5       	ldi	r26, 0x53	; 83
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e3 e5       	ldi	r30, 0x53	; 83
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	8f 7e       	andi	r24, 0xEF	; 239
    1e62:	8c 93       	st	X, r24

	/* clock = F_CPU/64 CS00=1 CS01=0 CS02=1*/
	SET_BIT(TCCR0,CS00);
    1e64:	a3 e5       	ldi	r26, 0x53	; 83
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e3 e5       	ldi	r30, 0x53	; 83
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	81 60       	ori	r24, 0x01	; 1
    1e70:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    1e72:	a3 e5       	ldi	r26, 0x53	; 83
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e3 e5       	ldi	r30, 0x53	; 83
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	82 60       	ori	r24, 0x02	; 2
    1e7e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    1e80:	a3 e5       	ldi	r26, 0x53	; 83
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e3 e5       	ldi	r30, 0x53	; 83
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8b 7f       	andi	r24, 0xFB	; 251
    1e8c:	8c 93       	st	X, r24

	/* Set Compare Value (Duty Cycle here is Percentage) */
	OCR0 =duty_cycle;
    1e8e:	ec e5       	ldi	r30, 0x5C	; 92
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	80 83       	st	Z, r24

	/* Set PB3/OC0 as Output pin --> pin where the PWM signal is generated from MC. */
	GPIO_setupPinDirection(OC0_PORT_ID, OC0_PIN_ID, PIN_OUTPUT);
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	63 e0       	ldi	r22, 0x03	; 3
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <GPIO_setupPinDirection>
}
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <__vector_11>:

/***************************** TIMER0 **********************************/

/*interrupt service routine for timer0 OverFlow*/
ISR(TIMER0_OVF_vect)
{
    1ea8:	1f 92       	push	r1
    1eaa:	0f 92       	push	r0
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	0f 92       	push	r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	2f 93       	push	r18
    1eb4:	3f 93       	push	r19
    1eb6:	4f 93       	push	r20
    1eb8:	5f 93       	push	r21
    1eba:	6f 93       	push	r22
    1ebc:	7f 93       	push	r23
    1ebe:	8f 93       	push	r24
    1ec0:	9f 93       	push	r25
    1ec2:	af 93       	push	r26
    1ec4:	bf 93       	push	r27
    1ec6:	ef 93       	push	r30
    1ec8:	ff 93       	push	r31
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[0] != NULL_PTR)
    1ed2:	80 91 7e 00 	lds	r24, 0x007E
    1ed6:	90 91 7f 00 	lds	r25, 0x007F
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	29 f0       	breq	.+10     	; 0x1ee8 <__vector_11+0x40>
	{
		g_Timers_callBackPtr[0]();
    1ede:	e0 91 7e 00 	lds	r30, 0x007E
    1ee2:	f0 91 7f 00 	lds	r31, 0x007F
    1ee6:	09 95       	icall
	}
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	ff 91       	pop	r31
    1eee:	ef 91       	pop	r30
    1ef0:	bf 91       	pop	r27
    1ef2:	af 91       	pop	r26
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	7f 91       	pop	r23
    1efa:	6f 91       	pop	r22
    1efc:	5f 91       	pop	r21
    1efe:	4f 91       	pop	r20
    1f00:	3f 91       	pop	r19
    1f02:	2f 91       	pop	r18
    1f04:	0f 90       	pop	r0
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	0f 90       	pop	r0
    1f0a:	1f 90       	pop	r1
    1f0c:	18 95       	reti

00001f0e <__vector_10>:
/*interrupt service routine for timer0 CTC*/
ISR(TIMER0_COMP_vect)
{
    1f0e:	1f 92       	push	r1
    1f10:	0f 92       	push	r0
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	2f 93       	push	r18
    1f1a:	3f 93       	push	r19
    1f1c:	4f 93       	push	r20
    1f1e:	5f 93       	push	r21
    1f20:	6f 93       	push	r22
    1f22:	7f 93       	push	r23
    1f24:	8f 93       	push	r24
    1f26:	9f 93       	push	r25
    1f28:	af 93       	push	r26
    1f2a:	bf 93       	push	r27
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[0] != NULL_PTR)
    1f38:	80 91 7e 00 	lds	r24, 0x007E
    1f3c:	90 91 7f 00 	lds	r25, 0x007F
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	29 f0       	breq	.+10     	; 0x1f4e <__vector_10+0x40>
	{
		g_Timers_callBackPtr[0]();
    1f44:	e0 91 7e 00 	lds	r30, 0x007E
    1f48:	f0 91 7f 00 	lds	r31, 0x007F
    1f4c:	09 95       	icall
	}
}
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	ff 91       	pop	r31
    1f54:	ef 91       	pop	r30
    1f56:	bf 91       	pop	r27
    1f58:	af 91       	pop	r26
    1f5a:	9f 91       	pop	r25
    1f5c:	8f 91       	pop	r24
    1f5e:	7f 91       	pop	r23
    1f60:	6f 91       	pop	r22
    1f62:	5f 91       	pop	r21
    1f64:	4f 91       	pop	r20
    1f66:	3f 91       	pop	r19
    1f68:	2f 91       	pop	r18
    1f6a:	0f 90       	pop	r0
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	0f 90       	pop	r0
    1f70:	1f 90       	pop	r1
    1f72:	18 95       	reti

00001f74 <__vector_9>:

/*************************** TIMER1 *******************************/

/*interrupt service routine for timer1 Overflow*/
ISR(TIMER1_OVF_vect)
{
    1f74:	1f 92       	push	r1
    1f76:	0f 92       	push	r0
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	0f 92       	push	r0
    1f7c:	11 24       	eor	r1, r1
    1f7e:	2f 93       	push	r18
    1f80:	3f 93       	push	r19
    1f82:	4f 93       	push	r20
    1f84:	5f 93       	push	r21
    1f86:	6f 93       	push	r22
    1f88:	7f 93       	push	r23
    1f8a:	8f 93       	push	r24
    1f8c:	9f 93       	push	r25
    1f8e:	af 93       	push	r26
    1f90:	bf 93       	push	r27
    1f92:	ef 93       	push	r30
    1f94:	ff 93       	push	r31
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[1] != NULL_PTR)
    1f9e:	80 91 80 00 	lds	r24, 0x0080
    1fa2:	90 91 81 00 	lds	r25, 0x0081
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	29 f0       	breq	.+10     	; 0x1fb4 <__vector_9+0x40>
	{
		g_Timers_callBackPtr[1]();
    1faa:	e0 91 80 00 	lds	r30, 0x0080
    1fae:	f0 91 81 00 	lds	r31, 0x0081
    1fb2:	09 95       	icall
	}
}
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	ff 91       	pop	r31
    1fba:	ef 91       	pop	r30
    1fbc:	bf 91       	pop	r27
    1fbe:	af 91       	pop	r26
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	7f 91       	pop	r23
    1fc6:	6f 91       	pop	r22
    1fc8:	5f 91       	pop	r21
    1fca:	4f 91       	pop	r20
    1fcc:	3f 91       	pop	r19
    1fce:	2f 91       	pop	r18
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <__vector_7>:

/*interrupt service routine for timer1 CTC*/
ISR(TIMER1_COMPA_vect)
{
    1fda:	1f 92       	push	r1
    1fdc:	0f 92       	push	r0
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	0f 92       	push	r0
    1fe2:	11 24       	eor	r1, r1
    1fe4:	2f 93       	push	r18
    1fe6:	3f 93       	push	r19
    1fe8:	4f 93       	push	r20
    1fea:	5f 93       	push	r21
    1fec:	6f 93       	push	r22
    1fee:	7f 93       	push	r23
    1ff0:	8f 93       	push	r24
    1ff2:	9f 93       	push	r25
    1ff4:	af 93       	push	r26
    1ff6:	bf 93       	push	r27
    1ff8:	ef 93       	push	r30
    1ffa:	ff 93       	push	r31
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[1] != NULL_PTR)
    2004:	80 91 80 00 	lds	r24, 0x0080
    2008:	90 91 81 00 	lds	r25, 0x0081
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	29 f0       	breq	.+10     	; 0x201a <__vector_7+0x40>
	{
		g_Timers_callBackPtr[1]();
    2010:	e0 91 80 00 	lds	r30, 0x0080
    2014:	f0 91 81 00 	lds	r31, 0x0081
    2018:	09 95       	icall
	}
}
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	ff 91       	pop	r31
    2020:	ef 91       	pop	r30
    2022:	bf 91       	pop	r27
    2024:	af 91       	pop	r26
    2026:	9f 91       	pop	r25
    2028:	8f 91       	pop	r24
    202a:	7f 91       	pop	r23
    202c:	6f 91       	pop	r22
    202e:	5f 91       	pop	r21
    2030:	4f 91       	pop	r20
    2032:	3f 91       	pop	r19
    2034:	2f 91       	pop	r18
    2036:	0f 90       	pop	r0
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	0f 90       	pop	r0
    203c:	1f 90       	pop	r1
    203e:	18 95       	reti

00002040 <__vector_5>:

/************************** TIMER2 **************************/

/*interrupt service routine for timer2 Overflow*/
ISR(TIMER2_OVF_vect)
{
    2040:	1f 92       	push	r1
    2042:	0f 92       	push	r0
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	0f 92       	push	r0
    2048:	11 24       	eor	r1, r1
    204a:	2f 93       	push	r18
    204c:	3f 93       	push	r19
    204e:	4f 93       	push	r20
    2050:	5f 93       	push	r21
    2052:	6f 93       	push	r22
    2054:	7f 93       	push	r23
    2056:	8f 93       	push	r24
    2058:	9f 93       	push	r25
    205a:	af 93       	push	r26
    205c:	bf 93       	push	r27
    205e:	ef 93       	push	r30
    2060:	ff 93       	push	r31
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[2] != NULL_PTR)
    206a:	80 91 82 00 	lds	r24, 0x0082
    206e:	90 91 83 00 	lds	r25, 0x0083
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	29 f0       	breq	.+10     	; 0x2080 <__vector_5+0x40>
	{
		g_Timers_callBackPtr[2]();
    2076:	e0 91 82 00 	lds	r30, 0x0082
    207a:	f0 91 83 00 	lds	r31, 0x0083
    207e:	09 95       	icall
	}
}
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	ff 91       	pop	r31
    2086:	ef 91       	pop	r30
    2088:	bf 91       	pop	r27
    208a:	af 91       	pop	r26
    208c:	9f 91       	pop	r25
    208e:	8f 91       	pop	r24
    2090:	7f 91       	pop	r23
    2092:	6f 91       	pop	r22
    2094:	5f 91       	pop	r21
    2096:	4f 91       	pop	r20
    2098:	3f 91       	pop	r19
    209a:	2f 91       	pop	r18
    209c:	0f 90       	pop	r0
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	0f 90       	pop	r0
    20a2:	1f 90       	pop	r1
    20a4:	18 95       	reti

000020a6 <__vector_4>:

/*interrupt service routine for timer2 CTC*/
ISR(TIMER2_COMP_vect)
{
    20a6:	1f 92       	push	r1
    20a8:	0f 92       	push	r0
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	0f 92       	push	r0
    20ae:	11 24       	eor	r1, r1
    20b0:	2f 93       	push	r18
    20b2:	3f 93       	push	r19
    20b4:	4f 93       	push	r20
    20b6:	5f 93       	push	r21
    20b8:	6f 93       	push	r22
    20ba:	7f 93       	push	r23
    20bc:	8f 93       	push	r24
    20be:	9f 93       	push	r25
    20c0:	af 93       	push	r26
    20c2:	bf 93       	push	r27
    20c4:	ef 93       	push	r30
    20c6:	ff 93       	push	r31
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[2] != NULL_PTR)
    20d0:	80 91 82 00 	lds	r24, 0x0082
    20d4:	90 91 83 00 	lds	r25, 0x0083
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	29 f0       	breq	.+10     	; 0x20e6 <__vector_4+0x40>
	{
		g_Timers_callBackPtr[2]();
    20dc:	e0 91 82 00 	lds	r30, 0x0082
    20e0:	f0 91 83 00 	lds	r31, 0x0083
    20e4:	09 95       	icall
	}
}
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	ff 91       	pop	r31
    20ec:	ef 91       	pop	r30
    20ee:	bf 91       	pop	r27
    20f0:	af 91       	pop	r26
    20f2:	9f 91       	pop	r25
    20f4:	8f 91       	pop	r24
    20f6:	7f 91       	pop	r23
    20f8:	6f 91       	pop	r22
    20fa:	5f 91       	pop	r21
    20fc:	4f 91       	pop	r20
    20fe:	3f 91       	pop	r19
    2100:	2f 91       	pop	r18
    2102:	0f 90       	pop	r0
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	0f 90       	pop	r0
    2108:	1f 90       	pop	r1
    210a:	18 95       	reti

0000210c <Timer_setCallBack>:
/*
 * Description :
 * A function to set Call back for timers
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <Timer_setCallBack+0x6>
    2112:	00 d0       	rcall	.+0      	; 0x2114 <Timer_setCallBack+0x8>
    2114:	0f 92       	push	r0
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	6b 83       	std	Y+3, r22	; 0x03

	switch(a_timer_ID)
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	3d 83       	std	Y+5, r19	; 0x05
    2128:	2c 83       	std	Y+4, r18	; 0x04
    212a:	8c 81       	ldd	r24, Y+4	; 0x04
    212c:	9d 81       	ldd	r25, Y+5	; 0x05
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	91 05       	cpc	r25, r1
    2132:	81 f0       	breq	.+32     	; 0x2154 <Timer_setCallBack+0x48>
    2134:	2c 81       	ldd	r18, Y+4	; 0x04
    2136:	3d 81       	ldd	r19, Y+5	; 0x05
    2138:	22 30       	cpi	r18, 0x02	; 2
    213a:	31 05       	cpc	r19, r1
    213c:	91 f0       	breq	.+36     	; 0x2162 <Timer_setCallBack+0x56>
    213e:	8c 81       	ldd	r24, Y+4	; 0x04
    2140:	9d 81       	ldd	r25, Y+5	; 0x05
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	a1 f4       	brne	.+40     	; 0x216e <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer0 */
		g_Timers_callBackPtr[0]= a_ptr;
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	90 93 7f 00 	sts	0x007F, r25
    214e:	80 93 7e 00 	sts	0x007E, r24
    2152:	0d c0       	rjmp	.+26     	; 0x216e <Timer_setCallBack+0x62>
		break;

	case TIMER1_ID:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer1 */
		g_Timers_callBackPtr[1] = a_ptr;
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	90 93 81 00 	sts	0x0081, r25
    215c:	80 93 80 00 	sts	0x0080, r24
    2160:	06 c0       	rjmp	.+12     	; 0x216e <Timer_setCallBack+0x62>
		break;

	case TIMER2_ID:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer2 */
		g_Timers_callBackPtr[2] = a_ptr;
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	90 93 83 00 	sts	0x0083, r25
    216a:	80 93 82 00 	sts	0x0082, r24
		break;
	}

}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <Timer_init>:
/*
 * Description :
 * A function to initialize the timers
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	2a 97       	sbiw	r28, 0x0a	; 10
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    2196:	e9 81       	ldd	r30, Y+1	; 0x01
    2198:	fa 81       	ldd	r31, Y+2	; 0x02
    219a:	84 81       	ldd	r24, Z+4	; 0x04
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	3a 87       	std	Y+10, r19	; 0x0a
    21a2:	29 87       	std	Y+9, r18	; 0x09
    21a4:	89 85       	ldd	r24, Y+9	; 0x09
    21a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	91 05       	cpc	r25, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <Timer_init+0x32>
    21ae:	7d c0       	rjmp	.+250    	; 0x22aa <Timer_init+0x12c>
    21b0:	29 85       	ldd	r18, Y+9	; 0x09
    21b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <Timer_init+0x3e>
    21ba:	fd c0       	rjmp	.+506    	; 0x23b6 <Timer_init+0x238>
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <Timer_init+0x48>
    21c4:	69 c1       	rjmp	.+722    	; 0x2498 <Timer_init+0x31a>
	{

	case TIMER0_ID:
		/*Clear registers of Timer0 And Interrupts Modules Enable before any access to prevent any mistakes
		 * on changing the mode of same timer as you might forget to use deinit() before init() one more*/
		TIMER0_TCCR0_REG.Byte=0;
    21c6:	e3 e5       	ldi	r30, 0x53	; 83
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	10 82       	st	Z, r1
		TIMER0_TCNT0_REG.Byte=0;
    21cc:	e2 e5       	ldi	r30, 0x52	; 82
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	10 82       	st	Z, r1
		TIMER0_OCR0_REG.Byte=0;
    21d2:	ec e5       	ldi	r30, 0x5C	; 92
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer0 (OCIE0=0,TOIE0=0)*/
		TIMER_TIMSK_REG.Bits.OCIE0_Bit=0;
    21d8:	e9 e5       	ldi	r30, 0x59	; 89
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	8d 7f       	andi	r24, 0xFD	; 253
    21e0:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE0_Bit=0;
    21e2:	e9 e5       	ldi	r30, 0x59	; 89
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	8e 7f       	andi	r24, 0xFE	; 254
    21ea:	80 83       	st	Z, r24


		/*Set Intial Value*/
		TIMER0_TCNT0_REG.Byte=((Config_Ptr->timer_InitialValue))&0x00FF;
    21ec:	a2 e5       	ldi	r26, 0x52	; 82
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e9 81       	ldd	r30, Y+1	; 0x01
    21f2:	fa 81       	ldd	r31, Y+2	; 0x02
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
    21f8:	8c 93       	st	X, r24
		/*
		 * TIMER Prescaler value for Timer0 in TCCR0 Register
		 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
		 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
		 */
		TIMER0_TCCR0_REG.Byte=((TIMER0_TCCR0_REG.Byte&0xF8)|(Config_Ptr->timer_clock));
    21fa:	a3 e5       	ldi	r26, 0x53	; 83
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e3 e5       	ldi	r30, 0x53	; 83
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	98 2f       	mov	r25, r24
    2206:	98 7f       	andi	r25, 0xF8	; 248
    2208:	e9 81       	ldd	r30, Y+1	; 0x01
    220a:	fa 81       	ldd	r31, Y+2	; 0x02
    220c:	85 81       	ldd	r24, Z+5	; 0x05
    220e:	89 2b       	or	r24, r25
    2210:	8c 93       	st	X, r24
		 * Compare output mode:
		 * 		OC0 disconnected
		 *      Clear COM00 bit in TCCR0 register
		 *      Clear COM01 bit in TCCR0 register
		 */
		TIMER0_TCCR0_REG.Bits.COM00_Bit=0;
    2212:	e3 e5       	ldi	r30, 0x53	; 83
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	8f 7e       	andi	r24, 0xEF	; 239
    221a:	80 83       	st	Z, r24
		TIMER0_TCCR0_REG.Bits.COM01_Bit=0;
    221c:	e3 e5       	ldi	r30, 0x53	; 83
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8f 7d       	andi	r24, 0xDF	; 223
    2224:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    2226:	e9 81       	ldd	r30, Y+1	; 0x01
    2228:	fa 81       	ldd	r31, Y+2	; 0x02
    222a:	86 81       	ldd	r24, Z+6	; 0x06
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	38 87       	std	Y+8, r19	; 0x08
    2232:	2f 83       	std	Y+7, r18	; 0x07
    2234:	8f 81       	ldd	r24, Y+7	; 0x07
    2236:	98 85       	ldd	r25, Y+8	; 0x08
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	31 f0       	breq	.+12     	; 0x2248 <Timer_init+0xca>
    223c:	2f 81       	ldd	r18, Y+7	; 0x07
    223e:	38 85       	ldd	r19, Y+8	; 0x08
    2240:	21 30       	cpi	r18, 0x01	; 1
    2242:	31 05       	cpc	r19, r1
    2244:	b1 f0       	breq	.+44     	; 0x2272 <Timer_init+0xf4>
    2246:	28 c1       	rjmp	.+592    	; 0x2498 <Timer_init+0x31a>
			/*
			 * Normal (Overflow) mode:
			 * 		Clear WGM00 bit in TCCR0 register
			 *      Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_TCCR0_REG.Bits.WGM00_Bit=0;
    2248:	e3 e5       	ldi	r30, 0x53	; 83
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	8f 7b       	andi	r24, 0xBF	; 191
    2250:	80 83       	st	Z, r24
			TIMER0_TCCR0_REG.Bits.WGM01_Bit=0;
    2252:	e3 e5       	ldi	r30, 0x53	; 83
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	87 7f       	andi	r24, 0xF7	; 247
    225a:	80 83       	st	Z, r24

			/* SET FOC0 in any mode except PWM mode */
			TIMER0_TCCR0_REG.Bits.FOC0_Bit=1;
    225c:	e3 e5       	ldi	r30, 0x53	; 83
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	80 68       	ori	r24, 0x80	; 128
    2264:	80 83       	st	Z, r24

			/* Enable Timer0 overflow interrupt */
			TIMER_TIMSK_REG.Bits.TOIE0_Bit=1;
    2266:	e9 e5       	ldi	r30, 0x59	; 89
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	81 60       	ori	r24, 0x01	; 1
    226e:	80 83       	st	Z, r24
    2270:	13 c1       	rjmp	.+550    	; 0x2498 <Timer_init+0x31a>
			/*
			 * Compare mode:
			 * 		Clear WGM00 bit in TCCR0 register
			 *      SET WGM01 bit in TCCR0 register
			 */
			TIMER0_TCCR0_REG.Bits.WGM00_Bit=0;
    2272:	e3 e5       	ldi	r30, 0x53	; 83
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8f 7b       	andi	r24, 0xBF	; 191
    227a:	80 83       	st	Z, r24
			TIMER0_TCCR0_REG.Bits.WGM01_Bit=1;
    227c:	e3 e5       	ldi	r30, 0x53	; 83
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	88 60       	ori	r24, 0x08	; 8
    2284:	80 83       	st	Z, r24

			/* SET FOC0 in any mode except PWM mode */
			TIMER0_TCCR0_REG.Bits.FOC0_Bit=1;
    2286:	e3 e5       	ldi	r30, 0x53	; 83
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	80 68       	ori	r24, 0x80	; 128
    228e:	80 83       	st	Z, r24

			/* set the compare value in register OCR0 & with 0xFF to make sure that it doesn't exceed 8 bits */
			TIMER0_OCR0_REG.Byte=((Config_Ptr->timer_compare_MatchValue))&0x00FF;
    2290:	ac e5       	ldi	r26, 0x5C	; 92
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e9 81       	ldd	r30, Y+1	; 0x01
    2296:	fa 81       	ldd	r31, Y+2	; 0x02
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	8c 93       	st	X, r24

			/* Enable Timer0 compare match interrupt*/
			TIMER_TIMSK_REG.Bits.OCIE0_Bit=1;
    229e:	e9 e5       	ldi	r30, 0x59	; 89
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	82 60       	ori	r24, 0x02	; 2
    22a6:	80 83       	st	Z, r24
    22a8:	f7 c0       	rjmp	.+494    	; 0x2498 <Timer_init+0x31a>

		case TIMER1_ID:
			/*Clear registers of Timer1 And Interrupts Modules Enables before any access to prevent any mistakes
			* on changing the mode of same timer as you might forget to use deinit() before init() one more
			* & with 0xC3 to Clear 4 bits of Interrupt modules Enables for timer1 in TIMSK*/
			TIMER1_TCCR1A_REG.Byte=0;
    22aa:	ef e4       	ldi	r30, 0x4F	; 79
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	10 82       	st	Z, r1
			TIMER1_TCCR1B_REG.Byte=0;
    22b0:	ee e4       	ldi	r30, 0x4E	; 78
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	10 82       	st	Z, r1
			TIMER1_TCNT1_REG.TwoBytes=0;
    22b6:	ec e4       	ldi	r30, 0x4C	; 76
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	11 82       	std	Z+1, r1	; 0x01
    22bc:	10 82       	st	Z, r1
			TIMER1_OCR1A_REG.TwoBytes=0;
    22be:	ea e4       	ldi	r30, 0x4A	; 74
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	11 82       	std	Z+1, r1	; 0x01
    22c4:	10 82       	st	Z, r1

			/*Clear all Interrupt modules Enable of Timer1 (TICIE1=0,OCIE1A=0,OCIE1B=0,TOIE1=0)*/
			TIMER_TIMSK_REG.Byte&=0xC3;
    22c6:	a9 e5       	ldi	r26, 0x59	; 89
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e9 e5       	ldi	r30, 0x59	; 89
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	83 7c       	andi	r24, 0xC3	; 195
    22d2:	8c 93       	st	X, r24

			/*Set Intial Value*/
			TIMER1_TCNT1_REG.TwoBytes=(Config_Ptr->timer_InitialValue);
    22d4:	ac e4       	ldi	r26, 0x4C	; 76
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e9 81       	ldd	r30, Y+1	; 0x01
    22da:	fa 81       	ldd	r31, Y+2	; 0x02
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	11 96       	adiw	r26, 0x01	; 1
    22e2:	9c 93       	st	X, r25
    22e4:	8e 93       	st	-X, r24
			/*
			 * TIMER Prescaler value for Timer1 in TCCR1B Register
			 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
			 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
			 */
			TIMER1_TCCR1B_REG.Byte=(TIMER1_TCCR1B_REG.Byte&0xF8)|(Config_Ptr->timer_clock);
    22e6:	ae e4       	ldi	r26, 0x4E	; 78
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	ee e4       	ldi	r30, 0x4E	; 78
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	98 2f       	mov	r25, r24
    22f2:	98 7f       	andi	r25, 0xF8	; 248
    22f4:	e9 81       	ldd	r30, Y+1	; 0x01
    22f6:	fa 81       	ldd	r31, Y+2	; 0x02
    22f8:	85 81       	ldd	r24, Z+5	; 0x05
    22fa:	89 2b       	or	r24, r25
    22fc:	8c 93       	st	X, r24
			 * Compare mode:
			 * 		OC1A/OC1B disconnected
			 *      Clear COM1A0/COM1A1 bits in TCCR1A register
			 *      Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_TCCR1A_REG.Byte&=0x0F;
    22fe:	af e4       	ldi	r26, 0x4F	; 79
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	ef e4       	ldi	r30, 0x4F	; 79
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	8f 70       	andi	r24, 0x0F	; 15
    230a:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode)
    230c:	e9 81       	ldd	r30, Y+1	; 0x01
    230e:	fa 81       	ldd	r31, Y+2	; 0x02
    2310:	86 81       	ldd	r24, Z+6	; 0x06
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	3e 83       	std	Y+6, r19	; 0x06
    2318:	2d 83       	std	Y+5, r18	; 0x05
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	31 f0       	breq	.+12     	; 0x232e <Timer_init+0x1b0>
    2322:	2d 81       	ldd	r18, Y+5	; 0x05
    2324:	3e 81       	ldd	r19, Y+6	; 0x06
    2326:	21 30       	cpi	r18, 0x01	; 1
    2328:	31 05       	cpc	r19, r1
    232a:	d9 f0       	breq	.+54     	; 0x2362 <Timer_init+0x1e4>
    232c:	b5 c0       	rjmp	.+362    	; 0x2498 <Timer_init+0x31a>
				/*
				 * Normal Overflow mode:
				 * 		Clear WGM10/WMG11 bit in TCCR1A register
				 *      Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_TCCR1A_REG.Bits.WGM10_Bit=0;
    232e:	ef e4       	ldi	r30, 0x4F	; 79
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8e 7f       	andi	r24, 0xFE	; 254
    2336:	80 83       	st	Z, r24
				TIMER1_TCCR1A_REG.Bits.WGM11_Bit=0;
    2338:	ef e4       	ldi	r30, 0x4F	; 79
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8d 7f       	andi	r24, 0xFD	; 253
    2340:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM12_Bit=0;
    2342:	ee e4       	ldi	r30, 0x4E	; 78
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	87 7f       	andi	r24, 0xF7	; 247
    234a:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM13_Bit=0;
    234c:	ee e4       	ldi	r30, 0x4E	; 78
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	8f 7e       	andi	r24, 0xEF	; 239
    2354:	80 83       	st	Z, r24

				/* Enable Timer1 overflow interrupt */
				TIMER_TIMSK_REG.Bits.TOIE1_Bit=1;
    2356:	e9 e5       	ldi	r30, 0x59	; 89
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	84 60       	ori	r24, 0x04	; 4
    235e:	80 83       	st	Z, r24
    2360:	9b c0       	rjmp	.+310    	; 0x2498 <Timer_init+0x31a>
				 *  Compare mode:
				 *  	Clear WGM10/WGM11 bits in TCCR1A register
				 *      Set WGM12 bit in TCCR1B register
				 *      Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_TCCR1A_REG.Byte&=0xFC;
    2362:	af e4       	ldi	r26, 0x4F	; 79
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	ef e4       	ldi	r30, 0x4F	; 79
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	8c 7f       	andi	r24, 0xFC	; 252
    236e:	8c 93       	st	X, r24
				TIMER1_TCCR1B_REG.Bits.WGM12_Bit=1;
    2370:	ee e4       	ldi	r30, 0x4E	; 78
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	88 60       	ori	r24, 0x08	; 8
    2378:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM13_Bit=0;
    237a:	ee e4       	ldi	r30, 0x4E	; 78
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	8f 7e       	andi	r24, 0xEF	; 239
    2382:	80 83       	st	Z, r24

				/* SET FOC1A/FOC1B in any mode except PWM mode */
				TIMER1_TCCR1A_REG.Bits.FOC1A_Bit=1;
    2384:	ef e4       	ldi	r30, 0x4F	; 79
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	84 60       	ori	r24, 0x04	; 4
    238c:	80 83       	st	Z, r24
				TIMER1_TCCR1A_REG.Bits.FOC1B_Bit=1;
    238e:	ef e4       	ldi	r30, 0x4F	; 79
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	88 60       	ori	r24, 0x08	; 8
    2396:	80 83       	st	Z, r24

				/* set the compare value in register OCR1A*/
				TIMER1_OCR1A_REG.TwoBytes = (Config_Ptr->timer_compare_MatchValue);
    2398:	aa e4       	ldi	r26, 0x4A	; 74
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e9 81       	ldd	r30, Y+1	; 0x01
    239e:	fa 81       	ldd	r31, Y+2	; 0x02
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	11 96       	adiw	r26, 0x01	; 1
    23a6:	9c 93       	st	X, r25
    23a8:	8e 93       	st	-X, r24

				/* Enable Timer1 compare match module interrupt*/
				TIMER_TIMSK_REG.Bits.OCIE1A_Bit=1;
    23aa:	e9 e5       	ldi	r30, 0x59	; 89
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	80 61       	ori	r24, 0x10	; 16
    23b2:	80 83       	st	Z, r24
    23b4:	71 c0       	rjmp	.+226    	; 0x2498 <Timer_init+0x31a>

			case TIMER2_ID:

				/*Clear registers of Timer2 And Interrupts Modules Enable before any access to prevent any mistakes
				 * on changing the mode of same timer as you might forget to use deinit() before init() one more*/
				TIMER2_TCCR2_REG.Byte=0;
    23b6:	e5 e4       	ldi	r30, 0x45	; 69
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	10 82       	st	Z, r1
				TIMER2_TCNT2_REG.Byte=0;
    23bc:	e4 e4       	ldi	r30, 0x44	; 68
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	10 82       	st	Z, r1
				TIMER2_OCR2_REG.Byte=0;
    23c2:	e3 e4       	ldi	r30, 0x43	; 67
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	10 82       	st	Z, r1

				/*Clear all Interrupt modules Enable of Timer2 (OCIE2=0,TOIE2=0)*/
				TIMER_TIMSK_REG.Bits.OCIE2_Bit=0;
    23c8:	e9 e5       	ldi	r30, 0x59	; 89
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	8f 77       	andi	r24, 0x7F	; 127
    23d0:	80 83       	st	Z, r24
				TIMER_TIMSK_REG.Bits.TOIE2_Bit=0;
    23d2:	e9 e5       	ldi	r30, 0x59	; 89
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8f 7b       	andi	r24, 0xBF	; 191
    23da:	80 83       	st	Z, r24

				/*Set Intial Value & with 0xFF to make sure that it doesn't exceed 8 bits */
				TIMER2_TCNT2_REG.Byte=((Config_Ptr->timer_InitialValue))&0x00FF;
    23dc:	a4 e4       	ldi	r26, 0x44	; 68
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e9 81       	ldd	r30, Y+1	; 0x01
    23e2:	fa 81       	ldd	r31, Y+2	; 0x02
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	8c 93       	st	X, r24
				/*
				 * TIMER2 Prescaler value for Timer0 in TCCR2 Register
				 * insert the required clock value in the first three bits (CS20, CS21 and CS22)
				 * 0XF8 to make sure that the least 3-bits in TCCR2 register=0
				 */
				TIMER2_TCCR2_REG.Byte=((TIMER2_TCCR2_REG.Byte&0xF8)|(Config_Ptr->timer_clock));
    23ea:	a5 e4       	ldi	r26, 0x45	; 69
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e5 e4       	ldi	r30, 0x45	; 69
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	98 2f       	mov	r25, r24
    23f6:	98 7f       	andi	r25, 0xF8	; 248
    23f8:	e9 81       	ldd	r30, Y+1	; 0x01
    23fa:	fa 81       	ldd	r31, Y+2	; 0x02
    23fc:	85 81       	ldd	r24, Z+5	; 0x05
    23fe:	89 2b       	or	r24, r25
    2400:	8c 93       	st	X, r24
				 *  Compare mode:
				 *  	OC2 disconnected
				 *      Clear COM20 bit in TCCR2 register
				 *      Clear COM21 bit in TCCR2 register
				 */
				TIMER2_TCCR2_REG.Bits.COM20_Bit=0;
    2402:	e5 e4       	ldi	r30, 0x45	; 69
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	8f 7e       	andi	r24, 0xEF	; 239
    240a:	80 83       	st	Z, r24
				TIMER2_TCCR2_REG.Bits.COM21_Bit=0;
    240c:	e5 e4       	ldi	r30, 0x45	; 69
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	8f 7d       	andi	r24, 0xDF	; 223
    2414:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    2416:	e9 81       	ldd	r30, Y+1	; 0x01
    2418:	fa 81       	ldd	r31, Y+2	; 0x02
    241a:	86 81       	ldd	r24, Z+6	; 0x06
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	3c 83       	std	Y+4, r19	; 0x04
    2422:	2b 83       	std	Y+3, r18	; 0x03
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	31 f0       	breq	.+12     	; 0x2438 <Timer_init+0x2ba>
    242c:	2b 81       	ldd	r18, Y+3	; 0x03
    242e:	3c 81       	ldd	r19, Y+4	; 0x04
    2430:	21 30       	cpi	r18, 0x01	; 1
    2432:	31 05       	cpc	r19, r1
    2434:	b1 f0       	breq	.+44     	; 0x2462 <Timer_init+0x2e4>
    2436:	30 c0       	rjmp	.+96     	; 0x2498 <Timer_init+0x31a>
					/*
					 * Normal Overflow mode:
					 * 		Clear WGM20 bit in TCCR2 register
					 *      Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_TCCR2_REG.Bits.WGM20_Bit=0;
    2438:	e5 e4       	ldi	r30, 0x45	; 69
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	8f 7b       	andi	r24, 0xBF	; 191
    2440:	80 83       	st	Z, r24
					TIMER2_TCCR2_REG.Bits.WGM21_Bit=0;
    2442:	e5 e4       	ldi	r30, 0x45	; 69
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	87 7f       	andi	r24, 0xF7	; 247
    244a:	80 83       	st	Z, r24

					/* SET FOC2 in any mode except PWM mode */
					TIMER2_TCCR2_REG.Bits.FOC2_Bit=1;
    244c:	e5 e4       	ldi	r30, 0x45	; 69
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 68       	ori	r24, 0x80	; 128
    2454:	80 83       	st	Z, r24

					/* Enable Timer2 overflow interrupt */
					TIMER_TIMSK_REG.Bits.TOIE2_Bit=1;
    2456:	e9 e5       	ldi	r30, 0x59	; 89
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	80 64       	ori	r24, 0x40	; 64
    245e:	80 83       	st	Z, r24
    2460:	1b c0       	rjmp	.+54     	; 0x2498 <Timer_init+0x31a>
					/*
					 *  Compare mode:
					 *  	Clear WGM20 bit in TCCR2 register
					 *      SET WGM21 bit in TCCR2 register
					 */
					TIMER2_TCCR2_REG.Bits.WGM20_Bit=0;
    2462:	e5 e4       	ldi	r30, 0x45	; 69
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	8f 7b       	andi	r24, 0xBF	; 191
    246a:	80 83       	st	Z, r24
					TIMER2_TCCR2_REG.Bits.WGM21_Bit=1;
    246c:	e5 e4       	ldi	r30, 0x45	; 69
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	88 60       	ori	r24, 0x08	; 8
    2474:	80 83       	st	Z, r24

					/* SET FOC2 in any mode except PWM mode */
					TIMER2_TCCR2_REG.Bits.FOC2_Bit=1;
    2476:	e5 e4       	ldi	r30, 0x45	; 69
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	80 68       	ori	r24, 0x80	; 128
    247e:	80 83       	st	Z, r24

					/* set the compare value in register OCR2 & with 0xFF to make sure that it doesn't exceed 8 bits */
					TIMER2_OCR2_REG.Byte=((Config_Ptr->timer_compare_MatchValue))&0x00FF;
    2480:	a3 e4       	ldi	r26, 0x43	; 67
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e9 81       	ldd	r30, Y+1	; 0x01
    2486:	fa 81       	ldd	r31, Y+2	; 0x02
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	8c 93       	st	X, r24

					/* Enable Timer2 compare match interrupt*/
					TIMER_TIMSK_REG.Bits.OCIE2_Bit=1;
    248e:	e9 e5       	ldi	r30, 0x59	; 89
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	80 68       	ori	r24, 0x80	; 128
    2496:	80 83       	st	Z, r24

				break; /*End of Timer2 case*/

	}/*End of the outer Super switch case*/

}/*End of the Timer_init*/
    2498:	2a 96       	adiw	r28, 0x0a	; 10
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <Timer_deInit>:
/*
 * Description :
 * A function to Deinitialize the timers
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <Timer_deInit+0x6>
    24b0:	0f 92       	push	r0
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	3b 83       	std	Y+3, r19	; 0x03
    24c0:	2a 83       	std	Y+2, r18	; 0x02
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	91 05       	cpc	r25, r1
    24ca:	e9 f0       	breq	.+58     	; 0x2506 <Timer_deInit+0x5c>
    24cc:	2a 81       	ldd	r18, Y+2	; 0x02
    24ce:	3b 81       	ldd	r19, Y+3	; 0x03
    24d0:	22 30       	cpi	r18, 0x02	; 2
    24d2:	31 05       	cpc	r19, r1
    24d4:	71 f1       	breq	.+92     	; 0x2532 <Timer_deInit+0x88>
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	9b 81       	ldd	r25, Y+3	; 0x03
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	e9 f5       	brne	.+122    	; 0x2558 <Timer_deInit+0xae>
	{
	case TIMER0_ID:

		/*Clear all register of Timer0*/
		TIMER0_TCCR0_REG.Byte=0;
    24de:	e3 e5       	ldi	r30, 0x53	; 83
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	10 82       	st	Z, r1
		TIMER0_TCNT0_REG.Byte=0;
    24e4:	e2 e5       	ldi	r30, 0x52	; 82
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	10 82       	st	Z, r1
		TIMER0_OCR0_REG.Byte=0;
    24ea:	ec e5       	ldi	r30, 0x5C	; 92
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer0 (OCIE0=0,TOIE0=0)*/
		TIMER_TIMSK_REG.Bits.OCIE0_Bit=0;
    24f0:	e9 e5       	ldi	r30, 0x59	; 89
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	8d 7f       	andi	r24, 0xFD	; 253
    24f8:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE0_Bit=0;
    24fa:	e9 e5       	ldi	r30, 0x59	; 89
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	8e 7f       	andi	r24, 0xFE	; 254
    2502:	80 83       	st	Z, r24
    2504:	29 c0       	rjmp	.+82     	; 0x2558 <Timer_deInit+0xae>
		break;

	case TIMER1_ID:

		/*Clear all register of TIMER1_ID_ID_ID*/
		TIMER1_TCCR1A_REG.Byte=0;
    2506:	ef e4       	ldi	r30, 0x4F	; 79
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	10 82       	st	Z, r1
		TIMER1_TCCR1B_REG.Byte=0;
    250c:	ee e4       	ldi	r30, 0x4E	; 78
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	10 82       	st	Z, r1
		TIMER1_TCNT1_REG.TwoBytes=0;
    2512:	ec e4       	ldi	r30, 0x4C	; 76
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	11 82       	std	Z+1, r1	; 0x01
    2518:	10 82       	st	Z, r1
		TIMER1_OCR1A_REG.TwoBytes=0;
    251a:	ea e4       	ldi	r30, 0x4A	; 74
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	11 82       	std	Z+1, r1	; 0x01
    2520:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer1 (TICIE1=0,OCIE1A=0,OCIE1B=0,TOIE1=0)*/
		TIMER_TIMSK_REG.Byte&=0xC3;
    2522:	a9 e5       	ldi	r26, 0x59	; 89
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e9 e5       	ldi	r30, 0x59	; 89
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	83 7c       	andi	r24, 0xC3	; 195
    252e:	8c 93       	st	X, r24
    2530:	13 c0       	rjmp	.+38     	; 0x2558 <Timer_deInit+0xae>


	case TIMER2_ID:

		/*Clear all register of Timer2*/
		TIMER2_TCCR2_REG.Byte=0;
    2532:	e5 e4       	ldi	r30, 0x45	; 69
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	10 82       	st	Z, r1
		TIMER2_TCNT2_REG.Byte=0;
    2538:	e4 e4       	ldi	r30, 0x44	; 68
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	10 82       	st	Z, r1
		TIMER2_OCR2_REG.Byte=0;
    253e:	e3 e4       	ldi	r30, 0x43	; 67
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer2 (OCIE2=0,TOIE2=0)*/
		TIMER_TIMSK_REG.Bits.OCIE2_Bit=0;
    2544:	e9 e5       	ldi	r30, 0x59	; 89
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8f 77       	andi	r24, 0x7F	; 127
    254c:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE2_Bit=0;
    254e:	e9 e5       	ldi	r30, 0x59	; 89
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8f 7b       	andi	r24, 0xBF	; 191
    2556:	80 83       	st	Z, r24
		break;

	}

}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_configType *config_ptr)
{
    2564:	cf 92       	push	r12
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	00 d0       	rcall	.+0      	; 0x2576 <TWI_init+0x12>
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
	/* calculate value in TWBR*/
	TWSR = (config_ptr->prescaler);
    257e:	a1 e2       	ldi	r26, 0x21	; 33
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e9 81       	ldd	r30, Y+1	; 0x01
    2584:	fa 81       	ldd	r31, Y+2	; 0x02
    2586:	80 81       	ld	r24, Z
    2588:	8c 93       	st	X, r24
	TWBR = (((F_CPU / config_ptr->baud_rate) - 16UL)/(2 * 4^TWSR));
    258a:	cc 24       	eor	r12, r12
    258c:	dd 24       	eor	r13, r13
    258e:	68 94       	set
    2590:	c5 f8       	bld	r12, 5
    2592:	e9 81       	ldd	r30, Y+1	; 0x01
    2594:	fa 81       	ldd	r31, Y+2	; 0x02
    2596:	21 81       	ldd	r18, Z+1	; 0x01
    2598:	32 81       	ldd	r19, Z+2	; 0x02
    259a:	43 81       	ldd	r20, Z+3	; 0x03
    259c:	54 81       	ldd	r21, Z+4	; 0x04
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	92 e1       	ldi	r25, 0x12	; 18
    25a2:	aa e7       	ldi	r26, 0x7A	; 122
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__udivmodsi4>
    25ae:	da 01       	movw	r26, r20
    25b0:	c9 01       	movw	r24, r18
    25b2:	0f 2e       	mov	r0, r31
    25b4:	f0 ef       	ldi	r31, 0xF0	; 240
    25b6:	ef 2e       	mov	r14, r31
    25b8:	ff ef       	ldi	r31, 0xFF	; 255
    25ba:	ff 2e       	mov	r15, r31
    25bc:	ff ef       	ldi	r31, 0xFF	; 255
    25be:	0f 2f       	mov	r16, r31
    25c0:	ff ef       	ldi	r31, 0xFF	; 255
    25c2:	1f 2f       	mov	r17, r31
    25c4:	f0 2d       	mov	r31, r0
    25c6:	e8 0e       	add	r14, r24
    25c8:	f9 1e       	adc	r15, r25
    25ca:	0a 1f       	adc	r16, r26
    25cc:	1b 1f       	adc	r17, r27
    25ce:	e1 e2       	ldi	r30, 0x21	; 33
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	90 81       	ld	r25, Z
    25d4:	88 e0       	ldi	r24, 0x08	; 8
    25d6:	89 27       	eor	r24, r25
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	c8 01       	movw	r24, r16
    25e2:	b7 01       	movw	r22, r14
    25e4:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__udivmodsi4>
    25e8:	da 01       	movw	r26, r20
    25ea:	c9 01       	movw	r24, r18
    25ec:	f6 01       	movw	r30, r12
    25ee:	80 83       	st	Z, r24

    /* Two Wire Bus address my address if any master device want to call me
       General Call Recognition: Off */
    TWAR = (config_ptr->device_address) << 1; // my address = 0x01 :)
    25f0:	a2 e2       	ldi	r26, 0x22	; 34
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e9 81       	ldd	r30, Y+1	; 0x01
    25f6:	fa 81       	ldd	r31, Y+2	; 0x02
    25f8:	85 81       	ldd	r24, Z+5	; 0x05
    25fa:	88 0f       	add	r24, r24
    25fc:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    25fe:	e6 e5       	ldi	r30, 0x56	; 86
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	84 e0       	ldi	r24, 0x04	; 4
    2604:	80 83       	st	Z, r24
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	ff 90       	pop	r15
    2614:	ef 90       	pop	r14
    2616:	df 90       	pop	r13
    2618:	cf 90       	pop	r12
    261a:	08 95       	ret

0000261c <TWI_start>:


void TWI_start(void)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2624:	e6 e5       	ldi	r30, 0x56	; 86
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	84 ea       	ldi	r24, 0xA4	; 164
    262a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    262c:	e6 e5       	ldi	r30, 0x56	; 86
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	88 23       	and	r24, r24
    2634:	dc f7       	brge	.-10     	; 0x262c <TWI_start+0x10>
}
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <TWI_stop>:

void TWI_stop(void)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2644:	e6 e5       	ldi	r30, 0x56	; 86
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	84 e9       	ldi	r24, 0x94	; 148
    264a:	80 83       	st	Z, r24
}
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    265e:	e3 e2       	ldi	r30, 0x23	; 35
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2666:	e6 e5       	ldi	r30, 0x56	; 86
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	84 e8       	ldi	r24, 0x84	; 132
    266c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    266e:	e6 e5       	ldi	r30, 0x56	; 86
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	88 23       	and	r24, r24
    2676:	dc f7       	brge	.-10     	; 0x266e <TWI_writeByte+0x1c>
}
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2688:	e6 e5       	ldi	r30, 0x56	; 86
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	84 ec       	ldi	r24, 0xC4	; 196
    268e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2690:	e6 e5       	ldi	r30, 0x56	; 86
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	88 23       	and	r24, r24
    2698:	dc f7       	brge	.-10     	; 0x2690 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    269a:	e3 e2       	ldi	r30, 0x23	; 35
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
}
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    26ae:	e6 e5       	ldi	r30, 0x56	; 86
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	84 e8       	ldi	r24, 0x84	; 132
    26b4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26b6:	e6 e5       	ldi	r30, 0x56	; 86
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	88 23       	and	r24, r24
    26be:	dc f7       	brge	.-10     	; 0x26b6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    26c0:	e3 e2       	ldi	r30, 0x23	; 35
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
}
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    26d6:	e1 e2       	ldi	r30, 0x21	; 33
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	88 7f       	andi	r24, 0xF8	; 248
    26de:	89 83       	std	Y+1, r24	; 0x01
    return status;
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config_ptr)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <UART_init+0x6>
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <UART_init+0x8>
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    26fa:	1a 82       	std	Y+2, r1	; 0x02
    26fc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    26fe:	eb e2       	ldi	r30, 0x2B	; 43
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * don't use RXB8 and TXB8 because we don't support 9-bit data , so that UCSZ2 = 0
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) ;
    2706:	ea e2       	ldi	r30, 0x2A	; 42
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	88 e1       	ldi	r24, 0x18	; 24
    270c:	80 83       	st	Z, r24
	 * UPM1 and UPM0 select Parity mode
	 * UCSZ1 and UCSZ0 data size
	 * USBS select number of stop bits
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | ((config_ptr->parity)<<UPM0) | ((config_ptr->stop_bit)<<USBS) | ((config_ptr->bit_data)<<UCSZ0);
    270e:	a0 e4       	ldi	r26, 0x40	; 64
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	eb 81       	ldd	r30, Y+3	; 0x03
    2714:	fc 81       	ldd	r31, Y+4	; 0x04
    2716:	81 81       	ldd	r24, Z+1	; 0x01
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	82 95       	swap	r24
    271e:	92 95       	swap	r25
    2720:	90 7f       	andi	r25, 0xF0	; 240
    2722:	98 27       	eor	r25, r24
    2724:	80 7f       	andi	r24, 0xF0	; 240
    2726:	98 27       	eor	r25, r24
    2728:	28 2f       	mov	r18, r24
    272a:	20 68       	ori	r18, 0x80	; 128
    272c:	eb 81       	ldd	r30, Y+3	; 0x03
    272e:	fc 81       	ldd	r31, Y+4	; 0x04
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	28 2b       	or	r18, r24
    2744:	eb 81       	ldd	r30, Y+3	; 0x03
    2746:	fc 81       	ldd	r31, Y+4	; 0x04
    2748:	80 81       	ld	r24, Z
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	82 2b       	or	r24, r18
    2754:	8c 93       	st	X, r24

	/* calculate the UBRR register value*/
	ubrr_value = ((F_CPU / ((config_ptr->baud_rate)* 8UL) ) - 1);
    2756:	eb 81       	ldd	r30, Y+3	; 0x03
    2758:	fc 81       	ldd	r31, Y+4	; 0x04
    275a:	83 81       	ldd	r24, Z+3	; 0x03
    275c:	94 81       	ldd	r25, Z+4	; 0x04
    275e:	a5 81       	ldd	r26, Z+5	; 0x05
    2760:	b6 81       	ldd	r27, Z+6	; 0x06
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	aa 1f       	adc	r26, r26
    2768:	bb 1f       	adc	r27, r27
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	aa 1f       	adc	r26, r26
    2770:	bb 1f       	adc	r27, r27
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	aa 1f       	adc	r26, r26
    2778:	bb 1f       	adc	r27, r27
    277a:	9c 01       	movw	r18, r24
    277c:	ad 01       	movw	r20, r26
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	92 e1       	ldi	r25, 0x12	; 18
    2782:	aa e7       	ldi	r26, 0x7A	; 122
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__udivmodsi4>
    278e:	da 01       	movw	r26, r20
    2790:	c9 01       	movw	r24, r18
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	9a 83       	std	Y+2, r25	; 0x02
    2796:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
	/* URSEL must be zero when writing the UBRRH */
	UBRRL = (uint8) ubrr_value;
    2798:	e9 e2       	ldi	r30, 0x29	; 41
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	80 83       	st	Z, r24
	UBRRH = (ubrr_value>>8);
    27a0:	e0 e4       	ldi	r30, 0x40	; 64
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	89 2f       	mov	r24, r25
    27aa:	99 27       	eor	r25, r25
    27ac:	80 83       	st	Z, r24
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	0f 92       	push	r0
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    27c8:	eb e2       	ldi	r30, 0x2B	; 43
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	80 72       	andi	r24, 0x20	; 32
    27d4:	90 70       	andi	r25, 0x00	; 0
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	b9 f3       	breq	.-18     	; 0x27c8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    27da:	ec e2       	ldi	r30, 0x2C	; 44
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	80 83       	st	Z, r24
}
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	0f 92       	push	r0
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    27f4:	eb e2       	ldi	r30, 0x2B	; 43
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	88 23       	and	r24, r24
    27fc:	dc f7       	brge	.-10     	; 0x27f4 <UART_recieveByte+0xa>
	/*
	 * check on frame error and parity error before read data
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	if(BIT_IS_CLEAR(UCSRA,FE) && BIT_IS_CLEAR(UCSRA,PE))
    27fe:	eb e2       	ldi	r30, 0x2B	; 43
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	80 71       	andi	r24, 0x10	; 16
    280a:	90 70       	andi	r25, 0x00	; 0
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	71 f4       	brne	.+28     	; 0x282c <UART_recieveByte+0x42>
    2810:	eb e2       	ldi	r30, 0x2B	; 43
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	84 70       	andi	r24, 0x04	; 4
    281c:	90 70       	andi	r25, 0x00	; 0
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	29 f4       	brne	.+10     	; 0x282c <UART_recieveByte+0x42>
	{
		return UDR;
    2822:	ec e2       	ldi	r30, 0x2C	; 44
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	01 c0       	rjmp	.+2      	; 0x282e <UART_recieveByte+0x44>
	}
	else
	{
		return 0;
    282c:	19 82       	std	Y+1, r1	; 0x01
    282e:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    2830:	0f 90       	pop	r0
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	00 d0       	rcall	.+0      	; 0x283e <UART_sendString+0x6>
    283e:	0f 92       	push	r0
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	9b 83       	std	Y+3, r25	; 0x03
    2846:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2848:	19 82       	std	Y+1, r1	; 0x01
    284a:	0e c0       	rjmp	.+28     	; 0x2868 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	28 2f       	mov	r18, r24
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	9b 81       	ldd	r25, Y+3	; 0x03
    2856:	fc 01       	movw	r30, r24
    2858:	e2 0f       	add	r30, r18
    285a:	f3 1f       	adc	r31, r19
    285c:	80 81       	ld	r24, Z
    285e:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
		i++;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	8f 5f       	subi	r24, 0xFF	; 255
    2866:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	9b 81       	ldd	r25, Y+3	; 0x03
    2872:	fc 01       	movw	r30, r24
    2874:	e2 0f       	add	r30, r18
    2876:	f3 1f       	adc	r31, r19
    2878:	80 81       	ld	r24, Z
    287a:	88 23       	and	r24, r24
    287c:	39 f7       	brne	.-50     	; 0x284c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    288a:	0f 93       	push	r16
    288c:	1f 93       	push	r17
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	00 d0       	rcall	.+0      	; 0x2894 <UART_receiveString+0xa>
    2894:	0f 92       	push	r0
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	9b 83       	std	Y+3, r25	; 0x03
    289c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    289e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	9b 81       	ldd	r25, Y+3	; 0x03
    28aa:	8c 01       	movw	r16, r24
    28ac:	02 0f       	add	r16, r18
    28ae:	13 1f       	adc	r17, r19
    28b0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <UART_recieveByte>
    28b4:	f8 01       	movw	r30, r16
    28b6:	80 83       	st	Z, r24
    28b8:	0f c0       	rjmp	.+30     	; 0x28d8 <UART_receiveString+0x4e>

	/* set our own Null # */
	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	8f 5f       	subi	r24, 0xFF	; 255
    28be:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	9b 81       	ldd	r25, Y+3	; 0x03
    28ca:	8c 01       	movw	r16, r24
    28cc:	02 0f       	add	r16, r18
    28ce:	13 1f       	adc	r17, r19
    28d0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <UART_recieveByte>
    28d4:	f8 01       	movw	r30, r16
    28d6:	80 83       	st	Z, r24
	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* set our own Null # */
	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	fc 01       	movw	r30, r24
    28e4:	e2 0f       	add	r30, r18
    28e6:	f3 1f       	adc	r31, r19
    28e8:	80 81       	ld	r24, Z
    28ea:	83 32       	cpi	r24, 0x23	; 35
    28ec:	31 f7       	brne	.-52     	; 0x28ba <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	fc 01       	movw	r30, r24
    28fa:	e2 0f       	add	r30, r18
    28fc:	f3 1f       	adc	r31, r19
    28fe:	10 82       	st	Z, r1
}
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	08 95       	ret

00002910 <UART_sendData>:
/*
 * Description :
 * send the required data
 * */
void UART_sendData(uint8 *array,uint8 arrLength)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	00 d0       	rcall	.+0      	; 0x2916 <UART_sendData+0x6>
    2916:	00 d0       	rcall	.+0      	; 0x2918 <UART_sendData+0x8>
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	9b 83       	std	Y+3, r25	; 0x03
    291e:	8a 83       	std	Y+2, r24	; 0x02
    2920:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i =0;i<arrLength;i++)
    2922:	19 82       	std	Y+1, r1	; 0x01
    2924:	0e c0       	rjmp	.+28     	; 0x2942 <UART_sendData+0x32>
	{
		UART_sendByte(array[i]);
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	28 2f       	mov	r18, r24
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	9b 81       	ldd	r25, Y+3	; 0x03
    2930:	fc 01       	movw	r30, r24
    2932:	e2 0f       	add	r30, r18
    2934:	f3 1f       	adc	r31, r19
    2936:	80 81       	ld	r24, Z
    2938:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_sendByte>
 * send the required data
 * */
void UART_sendData(uint8 *array,uint8 arrLength)
{
	uint8 i;
	for(i =0;i<arrLength;i++)
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	8f 5f       	subi	r24, 0xFF	; 255
    2940:	89 83       	std	Y+1, r24	; 0x01
    2942:	99 81       	ldd	r25, Y+1	; 0x01
    2944:	8c 81       	ldd	r24, Y+4	; 0x04
    2946:	98 17       	cp	r25, r24
    2948:	70 f3       	brcs	.-36     	; 0x2926 <UART_sendData+0x16>
	{
		UART_sendByte(array[i]);

	}

}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <UART_receiveData>:
/*
 * Description :
 * receive the required data
 * */
void UART_receiveData(uint8 *data,uint8 length)
{
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	00 d0       	rcall	.+0      	; 0x2962 <UART_receiveData+0xa>
    2962:	00 d0       	rcall	.+0      	; 0x2964 <UART_receiveData+0xc>
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	9b 83       	std	Y+3, r25	; 0x03
    296a:	8a 83       	std	Y+2, r24	; 0x02
    296c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i = 0;i<length;i++)
    296e:	19 82       	std	Y+1, r1	; 0x01
    2970:	0f c0       	rjmp	.+30     	; 0x2990 <UART_receiveData+0x38>
	{
		data[i] = UART_recieveByte();
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9b 81       	ldd	r25, Y+3	; 0x03
    297c:	8c 01       	movw	r16, r24
    297e:	02 0f       	add	r16, r18
    2980:	13 1f       	adc	r17, r19
    2982:	0e 94 f5 13 	call	0x27ea	; 0x27ea <UART_recieveByte>
    2986:	f8 01       	movw	r30, r16
    2988:	80 83       	st	Z, r24
 * receive the required data
 * */
void UART_receiveData(uint8 *data,uint8 length)
{
	uint8 i;
	for(i = 0;i<length;i++)
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	8f 5f       	subi	r24, 0xFF	; 255
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	99 81       	ldd	r25, Y+1	; 0x01
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	98 17       	cp	r25, r24
    2996:	68 f3       	brcs	.-38     	; 0x2972 <UART_receiveData+0x1a>
	{
		data[i] = UART_recieveByte();
	}
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <__udivmodsi4>:
    29aa:	a1 e2       	ldi	r26, 0x21	; 33
    29ac:	1a 2e       	mov	r1, r26
    29ae:	aa 1b       	sub	r26, r26
    29b0:	bb 1b       	sub	r27, r27
    29b2:	fd 01       	movw	r30, r26
    29b4:	0d c0       	rjmp	.+26     	; 0x29d0 <__udivmodsi4_ep>

000029b6 <__udivmodsi4_loop>:
    29b6:	aa 1f       	adc	r26, r26
    29b8:	bb 1f       	adc	r27, r27
    29ba:	ee 1f       	adc	r30, r30
    29bc:	ff 1f       	adc	r31, r31
    29be:	a2 17       	cp	r26, r18
    29c0:	b3 07       	cpc	r27, r19
    29c2:	e4 07       	cpc	r30, r20
    29c4:	f5 07       	cpc	r31, r21
    29c6:	20 f0       	brcs	.+8      	; 0x29d0 <__udivmodsi4_ep>
    29c8:	a2 1b       	sub	r26, r18
    29ca:	b3 0b       	sbc	r27, r19
    29cc:	e4 0b       	sbc	r30, r20
    29ce:	f5 0b       	sbc	r31, r21

000029d0 <__udivmodsi4_ep>:
    29d0:	66 1f       	adc	r22, r22
    29d2:	77 1f       	adc	r23, r23
    29d4:	88 1f       	adc	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	1a 94       	dec	r1
    29da:	69 f7       	brne	.-38     	; 0x29b6 <__udivmodsi4_loop>
    29dc:	60 95       	com	r22
    29de:	70 95       	com	r23
    29e0:	80 95       	com	r24
    29e2:	90 95       	com	r25
    29e4:	9b 01       	movw	r18, r22
    29e6:	ac 01       	movw	r20, r24
    29e8:	bd 01       	movw	r22, r26
    29ea:	cf 01       	movw	r24, r30
    29ec:	08 95       	ret

000029ee <__prologue_saves__>:
    29ee:	2f 92       	push	r2
    29f0:	3f 92       	push	r3
    29f2:	4f 92       	push	r4
    29f4:	5f 92       	push	r5
    29f6:	6f 92       	push	r6
    29f8:	7f 92       	push	r7
    29fa:	8f 92       	push	r8
    29fc:	9f 92       	push	r9
    29fe:	af 92       	push	r10
    2a00:	bf 92       	push	r11
    2a02:	cf 92       	push	r12
    2a04:	df 92       	push	r13
    2a06:	ef 92       	push	r14
    2a08:	ff 92       	push	r15
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	ca 1b       	sub	r28, r26
    2a18:	db 0b       	sbc	r29, r27
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	09 94       	ijmp

00002a26 <__epilogue_restores__>:
    2a26:	2a 88       	ldd	r2, Y+18	; 0x12
    2a28:	39 88       	ldd	r3, Y+17	; 0x11
    2a2a:	48 88       	ldd	r4, Y+16	; 0x10
    2a2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a30:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a32:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a34:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a36:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a38:	b9 84       	ldd	r11, Y+9	; 0x09
    2a3a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a3c:	df 80       	ldd	r13, Y+7	; 0x07
    2a3e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a40:	fd 80       	ldd	r15, Y+5	; 0x05
    2a42:	0c 81       	ldd	r16, Y+4	; 0x04
    2a44:	1b 81       	ldd	r17, Y+3	; 0x03
    2a46:	aa 81       	ldd	r26, Y+2	; 0x02
    2a48:	b9 81       	ldd	r27, Y+1	; 0x01
    2a4a:	ce 0f       	add	r28, r30
    2a4c:	d1 1d       	adc	r29, r1
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	ed 01       	movw	r28, r26
    2a5a:	08 95       	ret

00002a5c <strcmp>:
    2a5c:	fb 01       	movw	r30, r22
    2a5e:	dc 01       	movw	r26, r24
    2a60:	8d 91       	ld	r24, X+
    2a62:	01 90       	ld	r0, Z+
    2a64:	80 19       	sub	r24, r0
    2a66:	01 10       	cpse	r0, r1
    2a68:	d9 f3       	breq	.-10     	; 0x2a60 <strcmp+0x4>
    2a6a:	99 0b       	sbc	r25, r25
    2a6c:	08 95       	ret

00002a6e <_exit>:
    2a6e:	f8 94       	cli

00002a70 <__stop_program>:
    2a70:	ff cf       	rjmp	.-2      	; 0x2a70 <__stop_program>
