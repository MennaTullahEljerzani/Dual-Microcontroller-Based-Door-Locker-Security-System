
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000377c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  0000377c  00003810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800140  00800140  000038f0  2**0
                  ALLOC
  3 .stab         00003594  00000000  00000000  000038f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000232b  00000000  00000000  00006e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000091af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000092ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000945f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bf93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cd40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d12d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d8fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__vector_4>
      14:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__vector_9>
      28:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__vector_10>
      2c:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 34       	cpi	r26, 0x48	; 72
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e2       	ldi	r26, 0x2A	; 42
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e2       	ldi	r24, 0x2A	; 42
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void checkPassword(uint8* isPassTrue);
void alarmMode(void);
/*******************************************************************************
 *                                    Main                                     *
 *******************************************************************************/
int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	aa 97       	sbiw	r28, 0x2a	; 42
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 isPassTrue;
	/* Create configuration structure for UART driver */
	UART_ConfigType uartConfig = {UART_8_BIT, UART_NO_PARITY, UART_ONE_STOP_BIT, 9600};
     b5a:	ce 01       	movw	r24, r28
     b5c:	4f 96       	adiw	r24, 0x1f	; 31
     b5e:	9f a3       	std	Y+39, r25	; 0x27
     b60:	8e a3       	std	Y+38, r24	; 0x26
     b62:	e9 e3       	ldi	r30, 0x39	; 57
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	f9 a7       	std	Y+41, r31	; 0x29
     b68:	e8 a7       	std	Y+40, r30	; 0x28
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	fa a7       	std	Y+42, r31	; 0x2a
     b6e:	e8 a5       	ldd	r30, Y+40	; 0x28
     b70:	f9 a5       	ldd	r31, Y+41	; 0x29
     b72:	00 80       	ld	r0, Z
     b74:	88 a5       	ldd	r24, Y+40	; 0x28
     b76:	99 a5       	ldd	r25, Y+41	; 0x29
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	99 a7       	std	Y+41, r25	; 0x29
     b7c:	88 a7       	std	Y+40, r24	; 0x28
     b7e:	ee a1       	ldd	r30, Y+38	; 0x26
     b80:	ff a1       	ldd	r31, Y+39	; 0x27
     b82:	00 82       	st	Z, r0
     b84:	8e a1       	ldd	r24, Y+38	; 0x26
     b86:	9f a1       	ldd	r25, Y+39	; 0x27
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9f a3       	std	Y+39, r25	; 0x27
     b8c:	8e a3       	std	Y+38, r24	; 0x26
     b8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9a a7       	std	Y+42, r25	; 0x2a
     b94:	ea a5       	ldd	r30, Y+42	; 0x2a
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>
	/* Enable Global Interrupt */
	SREG |= (1<<7);
     b9a:	af e5       	ldi	r26, 0x5F	; 95
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ef e5       	ldi	r30, 0x5F	; 95
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	8c 93       	st	X, r24
	 * Baud-rate = 9600 bits/sec
	 * one stop bit
	 * No parity
	 * 8-bit data
	 */
	UART_init(&uartConfig);
     ba8:	ce 01       	movw	r24, r28
     baa:	4f 96       	adiw	r24, 0x1f	; 31
     bac:	0e 94 be 19 	call	0x337c	; 0x337c <UART_init>
	/* Initialize the LCD */
	LCD_init();
     bb0:	0e 94 13 11 	call	0x2226	; 0x2226 <LCD_init>
	/* At the beginning, display "Door Lock System"  */
	LCD_displayString("Door Lock System");
     bb4:	80 e6       	ldi	r24, 0x60	; 96
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <LCD_displayString>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	aa ef       	ldi	r26, 0xFA	; 250
     bc2:	b3 e4       	ldi	r27, 0x43	; 67
     bc4:	89 8f       	std	Y+25, r24	; 0x19
     bc6:	9a 8f       	std	Y+26, r25	; 0x1a
     bc8:	ab 8f       	std	Y+27, r26	; 0x1b
     bca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bcc:	69 8d       	ldd	r22, Y+25	; 0x19
     bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	4a ef       	ldi	r20, 0xFA	; 250
     bda:	54 e4       	ldi	r21, 0x44	; 68
     bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	8d 8b       	std	Y+21, r24	; 0x15
     be6:	9e 8b       	std	Y+22, r25	; 0x16
     be8:	af 8b       	std	Y+23, r26	; 0x17
     bea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bec:	6d 89       	ldd	r22, Y+21	; 0x15
     bee:	7e 89       	ldd	r23, Y+22	; 0x16
     bf0:	8f 89       	ldd	r24, Y+23	; 0x17
     bf2:	98 8d       	ldd	r25, Y+24	; 0x18
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e8       	ldi	r20, 0x80	; 128
     bfa:	5f e3       	ldi	r21, 0x3F	; 63
     bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c00:	88 23       	and	r24, r24
     c02:	2c f4       	brge	.+10     	; 0xc0e <main+0xc8>
		__ticks = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9c 8b       	std	Y+20, r25	; 0x14
     c0a:	8b 8b       	std	Y+19, r24	; 0x13
     c0c:	3f c0       	rjmp	.+126    	; 0xc8c <main+0x146>
	else if (__tmp > 65535)
     c0e:	6d 89       	ldd	r22, Y+21	; 0x15
     c10:	7e 89       	ldd	r23, Y+22	; 0x16
     c12:	8f 89       	ldd	r24, Y+23	; 0x17
     c14:	98 8d       	ldd	r25, Y+24	; 0x18
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	3f ef       	ldi	r19, 0xFF	; 255
     c1a:	4f e7       	ldi	r20, 0x7F	; 127
     c1c:	57 e4       	ldi	r21, 0x47	; 71
     c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c22:	18 16       	cp	r1, r24
     c24:	4c f5       	brge	.+82     	; 0xc78 <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c26:	69 8d       	ldd	r22, Y+25	; 0x19
     c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e2       	ldi	r20, 0x20	; 32
     c34:	51 e4       	ldi	r21, 0x41	; 65
     c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	9c 8b       	std	Y+20, r25	; 0x14
     c4c:	8b 8b       	std	Y+19, r24	; 0x13
     c4e:	0f c0       	rjmp	.+30     	; 0xc6e <main+0x128>
     c50:	88 ec       	ldi	r24, 0xC8	; 200
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	9a 8b       	std	Y+18, r25	; 0x12
     c56:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c58:	89 89       	ldd	r24, Y+17	; 0x11
     c5a:	9a 89       	ldd	r25, Y+18	; 0x12
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <main+0x116>
     c60:	9a 8b       	std	Y+18, r25	; 0x12
     c62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c64:	8b 89       	ldd	r24, Y+19	; 0x13
     c66:	9c 89       	ldd	r25, Y+20	; 0x14
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	9c 8b       	std	Y+20, r25	; 0x14
     c6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6e:	8b 89       	ldd	r24, Y+19	; 0x13
     c70:	9c 89       	ldd	r25, Y+20	; 0x14
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	69 f7       	brne	.-38     	; 0xc50 <main+0x10a>
     c76:	14 c0       	rjmp	.+40     	; 0xca0 <main+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c78:	6d 89       	ldd	r22, Y+21	; 0x15
     c7a:	7e 89       	ldd	r23, Y+22	; 0x16
     c7c:	8f 89       	ldd	r24, Y+23	; 0x17
     c7e:	98 8d       	ldd	r25, Y+24	; 0x18
     c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	9c 8b       	std	Y+20, r25	; 0x14
     c8a:	8b 8b       	std	Y+19, r24	; 0x13
     c8c:	8b 89       	ldd	r24, Y+19	; 0x13
     c8e:	9c 89       	ldd	r25, Y+20	; 0x14
     c90:	98 8b       	std	Y+16, r25	; 0x10
     c92:	8f 87       	std	Y+15, r24	; 0x0f
     c94:	8f 85       	ldd	r24, Y+15	; 0x0f
     c96:	98 89       	ldd	r25, Y+16	; 0x10
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <main+0x152>
     c9c:	98 8b       	std	Y+16, r25	; 0x10
     c9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	/* when the system start for the first time, create New Password */
	Timer_setCallBack(timer1_SetRequiredCallBackFunction, TIMER1_ID);
     ca0:	8e e3       	ldi	r24, 0x3E	; 62
     ca2:	9c e0       	ldi	r25, 0x0C	; 12
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	0e 94 92 17 	call	0x2f24	; 0x2f24 <Timer_setCallBack>
	createPassword();
     caa:	0e 94 f7 09 	call	0x13ee	; 0x13ee <createPassword>
	LCD_clearScreen();
     cae:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
	for(;;){
		/* Display always the main system options */
		LCD_displayString("+ : Open Door");
     cb2:	81 e7       	ldi	r24, 0x71	; 113
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"- : Change Pass");
     cba:	2f e7       	ldi	r18, 0x7F	; 127
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	a9 01       	movw	r20, r18
     cc4:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
		/* Get the key pressed by user */
		key = KEYPAD_getPressedKey();
     cc8:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <KEYPAD_getPressedKey>
     ccc:	8d 8f       	std	Y+29, r24	; 0x1d
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	aa e7       	ldi	r26, 0x7A	; 122
     cd4:	b3 e4       	ldi	r27, 0x43	; 67
     cd6:	8b 87       	std	Y+11, r24	; 0x0b
     cd8:	9c 87       	std	Y+12, r25	; 0x0c
     cda:	ad 87       	std	Y+13, r26	; 0x0d
     cdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cde:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4a ef       	ldi	r20, 0xFA	; 250
     cec:	54 e4       	ldi	r21, 0x44	; 68
     cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	8f 83       	std	Y+7, r24	; 0x07
     cf8:	98 87       	std	Y+8, r25	; 0x08
     cfa:	a9 87       	std	Y+9, r26	; 0x09
     cfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cfe:	6f 81       	ldd	r22, Y+7	; 0x07
     d00:	78 85       	ldd	r23, Y+8	; 0x08
     d02:	89 85       	ldd	r24, Y+9	; 0x09
     d04:	9a 85       	ldd	r25, Y+10	; 0x0a
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e8       	ldi	r20, 0x80	; 128
     d0c:	5f e3       	ldi	r21, 0x3F	; 63
     d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d12:	88 23       	and	r24, r24
     d14:	2c f4       	brge	.+10     	; 0xd20 <main+0x1da>
		__ticks = 1;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	3f c0       	rjmp	.+126    	; 0xd9e <main+0x258>
	else if (__tmp > 65535)
     d20:	6f 81       	ldd	r22, Y+7	; 0x07
     d22:	78 85       	ldd	r23, Y+8	; 0x08
     d24:	89 85       	ldd	r24, Y+9	; 0x09
     d26:	9a 85       	ldd	r25, Y+10	; 0x0a
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	3f ef       	ldi	r19, 0xFF	; 255
     d2c:	4f e7       	ldi	r20, 0x7F	; 127
     d2e:	57 e4       	ldi	r21, 0x47	; 71
     d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d34:	18 16       	cp	r1, r24
     d36:	4c f5       	brge	.+82     	; 0xd8a <main+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d38:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e2       	ldi	r20, 0x20	; 32
     d46:	51 e4       	ldi	r21, 0x41	; 65
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	0f c0       	rjmp	.+30     	; 0xd80 <main+0x23a>
     d62:	88 ec       	ldi	r24, 0xC8	; 200
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <main+0x228>
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	69 f7       	brne	.-38     	; 0xd62 <main+0x21c>
     d88:	14 c0       	rjmp	.+40     	; 0xdb2 <main+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8a:	6f 81       	ldd	r22, Y+7	; 0x07
     d8c:	78 85       	ldd	r23, Y+8	; 0x08
     d8e:	89 85       	ldd	r24, Y+9	; 0x09
     d90:	9a 85       	ldd	r25, Y+10	; 0x0a
     d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <main+0x264>
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		/* if user chooses (+) Open Door */
		if(key == '+'){
     db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db4:	8b 32       	cpi	r24, 0x2B	; 43
     db6:	09 f0       	breq	.+2      	; 0xdba <main+0x274>
     db8:	64 c0       	rjmp	.+200    	; 0xe82 <main+0x33c>
			/* The user should enter the password saved in EEPROM */
			checkPassword(&isPassTrue);
     dba:	ce 01       	movw	r24, r28
     dbc:	4e 96       	adiw	r24, 0x1e	; 30
     dbe:	0e 94 10 09 	call	0x1220	; 0x1220 <checkPassword>
			/* if the user entered the true password */
			if (isPassTrue == TRUE_PASSWORD) {
     dc2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dc4:	83 33       	cpi	r24, 0x33	; 51
     dc6:	09 f0       	breq	.+2      	; 0xdca <main+0x284>
     dc8:	55 c0       	rjmp	.+170    	; 0xe74 <main+0x32e>
				/* Send UNLOCK_DOOR to the Control ECU to open the Door (rotate motor) */
				UART_sendByte(UNLOCK_DOOR);
     dca:	85 e5       	ldi	r24, 0x55	; 85
     dcc:	0e 94 27 1a 	call	0x344e	; 0x344e <UART_sendByte>
				 * prescaler 1024
				 * compare mode
				 * initial value = 0
				 * compare value = 7812, so the interrupt occurs every 1 seconds
				 */
				Timer_init(&timerConfig);
     dd0:	82 e3       	ldi	r24, 0x32	; 50
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <Timer_init>
				/* Display Door Unlocking please wait on LCD for 15 seconds */
				LCD_clearScreen();
     dd8:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
				LCD_displayString("Door Unlocking");
     ddc:	8f e8       	ldi	r24, 0x8F	; 143
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <LCD_displayString>
				LCD_displayStringRowColumn(1, 0, "please wait");
     de4:	2e e9       	ldi	r18, 0x9E	; 158
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	a9 01       	movw	r20, r18
     dee:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
				 /* wait until t_15s_flag become true, this will happen after 15 seconds */
				g_seconds_counter = 0;
     df2:	10 92 40 01 	sts	0x0140, r1
   			    while (g_seconds_counter <= 15){
     df6:	80 91 40 01 	lds	r24, 0x0140
     dfa:	80 31       	cpi	r24, 0x10	; 16
     dfc:	e0 f3       	brcs	.-8      	; 0xdf6 <main+0x2b0>

				}
   			    Timer_deInit(TIMER1_ID);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer_deInit>
   			    g_seconds_counter = 0;
     e04:	10 92 40 01 	sts	0x0140, r1


				/* Display wait for people to enter */
   		    	Timer_init(&timerConfig);
     e08:	82 e3       	ldi	r24, 0x32	; 50
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <Timer_init>
				LCD_clearScreen();
     e10:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
				LCD_displayString("wait for people");
     e14:	8a ea       	ldi	r24, 0xAA	; 170
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <LCD_displayString>
				LCD_displayStringRowColumn(1, 0,"to enter");
     e1c:	2a eb       	ldi	r18, 0xBA	; 186
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	a9 01       	movw	r20, r18
     e26:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
				while(g_seconds_counter<3){};
     e2a:	80 91 40 01 	lds	r24, 0x0140
     e2e:	83 30       	cpi	r24, 0x03	; 3
     e30:	e0 f3       	brcs	.-8      	; 0xe2a <main+0x2e4>
				/* wait until Control ECU sends LOCKING_DOOR */
				while (UART_recieveByte() != LOCKING_DOOR);
     e32:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
     e36:	84 34       	cpi	r24, 0x44	; 68
     e38:	e1 f7       	brne	.-8      	; 0xe32 <main+0x2ec>

				Timer_deInit(TIMER1_ID);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer_deInit>
				  g_seconds_counter = 0;
     e40:	10 92 40 01 	sts	0x0140, r1
				/* Set the call back function and initialize timer driver again  */

				Timer_init(&timerConfig);
     e44:	82 e3       	ldi	r24, 0x32	; 50
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <Timer_init>
				/* Display Door Locking on LCD for 15 seconds */
				LCD_clearScreen();
     e4c:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
				LCD_displayString("Door Locking");
     e50:	83 ec       	ldi	r24, 0xC3	; 195
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <LCD_displayString>
				/* wait until t_15s_flag become true, this will happen after 15 seconds */
				/*while (t_15s_flag != TRUE);*//*to stop the system one minute*/
				g_seconds_counter = 0;
     e58:	10 92 40 01 	sts	0x0140, r1
				while (g_seconds_counter <= 15){
     e5c:	80 91 40 01 	lds	r24, 0x0140
     e60:	80 31       	cpi	r24, 0x10	; 16
     e62:	e0 f3       	brcs	.-8      	; 0xe5c <main+0x316>

				}
				Timer_deInit(TIMER1_ID);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer_deInit>
				 g_seconds_counter = 0;
     e6a:	10 92 40 01 	sts	0x0140, r1
				LCD_clearScreen();
     e6e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
     e72:	1f cf       	rjmp	.-450    	; 0xcb2 <main+0x16c>
			}
			/* if the user entered wrong password 3 times */
			else if(isPassTrue == WRONG_PASSWORD){
     e74:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e76:	82 33       	cpi	r24, 0x32	; 50
     e78:	09 f0       	breq	.+2      	; 0xe7c <main+0x336>
     e7a:	1b cf       	rjmp	.-458    	; 0xcb2 <main+0x16c>
				/* enter alarm mode for 1 minute */
				alarmMode();
     e7c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <alarmMode>
     e80:	18 cf       	rjmp	.-464    	; 0xcb2 <main+0x16c>
			}
		}
		/* if user chooses (-) Change Password */
		else if(key == '-'){
     e82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e84:	8d 32       	cpi	r24, 0x2D	; 45
     e86:	09 f0       	breq	.+2      	; 0xe8a <main+0x344>
     e88:	14 cf       	rjmp	.-472    	; 0xcb2 <main+0x16c>
			/* The user should enter the password saved in EEPROM */
			checkPassword(&isPassTrue);
     e8a:	ce 01       	movw	r24, r28
     e8c:	4e 96       	adiw	r24, 0x1e	; 30
     e8e:	0e 94 10 09 	call	0x1220	; 0x1220 <checkPassword>
			/* if the user entered the true password */
			if(isPassTrue == TRUE_PASSWORD){
     e92:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e94:	83 33       	cpi	r24, 0x33	; 51
     e96:	59 f4       	brne	.+22     	; 0xeae <main+0x368>
				/* Send CHANGE_PASSWORD to the Control ECU to get ready to save new password */
				if (g_change_flag==0){
     e98:	80 91 41 01 	lds	r24, 0x0141
     e9c:	88 23       	and	r24, r24
     e9e:	09 f0       	breq	.+2      	; 0xea2 <main+0x35c>
     ea0:	08 cf       	rjmp	.-496    	; 0xcb2 <main+0x16c>
					g_change_flag =1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	80 93 41 01 	sts	0x0141, r24
					changePassword();
     ea8:	0e 94 5e 07 	call	0xebc	; 0xebc <changePassword>
     eac:	02 cf       	rjmp	.-508    	; 0xcb2 <main+0x16c>
				}
			}
			/* if the user entered wrong password 3 times */
			else if(isPassTrue == WRONG_PASSWORD){
     eae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eb0:	82 33       	cpi	r24, 0x32	; 50
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <main+0x370>
     eb4:	fe ce       	rjmp	.-516    	; 0xcb2 <main+0x16c>
				/* enter alarm mode for 1 minute */
				alarmMode();
     eb6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <alarmMode>
     eba:	fb ce       	rjmp	.-522    	; 0xcb2 <main+0x16c>

00000ebc <changePassword>:
			}
		}
	}
}
void changePassword(void){
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	aa 97       	sbiw	r28, 0x2a	; 42
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
		}
	}
	LCD_clearScreen();
	g_change_flag = 0;
	}
}
     ed0:	2d b7       	in	r18, 0x3d	; 61
     ed2:	3e b7       	in	r19, 0x3e	; 62
     ed4:	3a a7       	std	Y+42, r19	; 0x2a
     ed6:	29 a7       	std	Y+41, r18	; 0x29
			}
		}
	}
}
void changePassword(void){
	if (g_change_flag==1){
     ed8:	80 91 41 01 	lds	r24, 0x0141
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	09 f0       	breq	.+2      	; 0xee2 <changePassword+0x26>
     ee0:	6a c1       	rjmp	.+724    	; 0x11b6 <changePassword+0x2fa>
     ee2:	8d b7       	in	r24, 0x3d	; 61
     ee4:	9e b7       	in	r25, 0x3e	; 62
     ee6:	9c a3       	std	Y+36, r25	; 0x24
     ee8:	8b a3       	std	Y+35, r24	; 0x23
	/* Send CHANGE_PASSWORD to the Control ECU to get ready to save new password */
	UART_sendByte(CHANGE_PASSWORD);
     eea:	83 ee       	ldi	r24, 0xE3	; 227
     eec:	0e 94 27 1a 	call	0x344e	; 0x344e <UART_sendByte>
	/* Create new password */
	uint8 size = PASSWORD_SIZE+2;
     ef0:	87 e0       	ldi	r24, 0x07	; 7
     ef2:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 pass1[size], pass2[size];
     ef4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	2d b7       	in	r18, 0x3d	; 61
     efc:	3e b7       	in	r19, 0x3e	; 62
     efe:	28 1b       	sub	r18, r24
     f00:	39 0b       	sbc	r19, r25
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	3e bf       	out	0x3e, r19	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	2d bf       	out	0x3d, r18	; 61
     f0c:	8d b7       	in	r24, 0x3d	; 61
     f0e:	9e b7       	in	r25, 0x3e	; 62
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	98 a7       	std	Y+40, r25	; 0x28
     f14:	8f a3       	std	Y+39, r24	; 0x27
     f16:	8f a1       	ldd	r24, Y+39	; 0x27
     f18:	98 a5       	ldd	r25, Y+40	; 0x28
     f1a:	00 96       	adiw	r24, 0x00	; 0
     f1c:	98 a7       	std	Y+40, r25	; 0x28
     f1e:	8f a3       	std	Y+39, r24	; 0x27
     f20:	2f a1       	ldd	r18, Y+39	; 0x27
     f22:	38 a5       	ldd	r19, Y+40	; 0x28
     f24:	3a a3       	std	Y+34, r19	; 0x22
     f26:	29 a3       	std	Y+33, r18	; 0x21
     f28:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	2d b7       	in	r18, 0x3d	; 61
     f30:	3e b7       	in	r19, 0x3e	; 62
     f32:	28 1b       	sub	r18, r24
     f34:	39 0b       	sbc	r19, r25
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	3e bf       	out	0x3e, r19	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	2d bf       	out	0x3d, r18	; 61
     f40:	8d b7       	in	r24, 0x3d	; 61
     f42:	9e b7       	in	r25, 0x3e	; 62
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	9e a3       	std	Y+38, r25	; 0x26
     f48:	8d a3       	std	Y+37, r24	; 0x25
     f4a:	8d a1       	ldd	r24, Y+37	; 0x25
     f4c:	9e a1       	ldd	r25, Y+38	; 0x26
     f4e:	00 96       	adiw	r24, 0x00	; 0
     f50:	9e a3       	std	Y+38, r25	; 0x26
     f52:	8d a3       	std	Y+37, r24	; 0x25
     f54:	2d a1       	ldd	r18, Y+37	; 0x25
     f56:	3e a1       	ldd	r19, Y+38	; 0x26
     f58:	38 a3       	std	Y+32, r19	; 0x20
     f5a:	2f 8f       	std	Y+31, r18	; 0x1f
	uint8 isSaved;
	/* loop until the user enters same password twice for confirmation */
	for(;;){
		LCD_clearScreen();
     f5c:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"plz enter pass: ");
     f60:	20 ed       	ldi	r18, 0xD0	; 208
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_moveCursor>
		/* Get the password from the user */
		getPassword(pass1,size);
     f76:	89 a1       	ldd	r24, Y+33	; 0x21
     f78:	9a a1       	ldd	r25, Y+34	; 0x22
     f7a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f7c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <getPassword>
		/* wait until the user press enter button */
		while(KEYPAD_getPressedKey() != '=');
     f80:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <KEYPAD_getPressedKey>
     f84:	8d 33       	cpi	r24, 0x3D	; 61
     f86:	e1 f7       	brne	.-8      	; 0xf80 <changePassword+0xc4>
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	aa e7       	ldi	r26, 0x7A	; 122
     f8e:	b3 e4       	ldi	r27, 0x43	; 67
     f90:	89 8f       	std	Y+25, r24	; 0x19
     f92:	9a 8f       	std	Y+26, r25	; 0x1a
     f94:	ab 8f       	std	Y+27, r26	; 0x1b
     f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f98:	69 8d       	ldd	r22, Y+25	; 0x19
     f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a ef       	ldi	r20, 0xFA	; 250
     fa6:	54 e4       	ldi	r21, 0x44	; 68
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8d 8b       	std	Y+21, r24	; 0x15
     fb2:	9e 8b       	std	Y+22, r25	; 0x16
     fb4:	af 8b       	std	Y+23, r26	; 0x17
     fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb8:	6d 89       	ldd	r22, Y+21	; 0x15
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	2c f4       	brge	.+10     	; 0xfda <changePassword+0x11e>
		__ticks = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 8b       	std	Y+20, r25	; 0x14
     fd6:	8b 8b       	std	Y+19, r24	; 0x13
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <changePassword+0x19c>
	else if (__tmp > 65535)
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	4c f5       	brge	.+82     	; 0x1044 <changePassword+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	69 8d       	ldd	r22, Y+25	; 0x19
     ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
    101a:	0f c0       	rjmp	.+30     	; 0x103a <changePassword+0x17e>
    101c:	88 ec       	ldi	r24, 0xC8	; 200
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9a 8b       	std	Y+18, r25	; 0x12
    1022:	89 8b       	std	Y+17, r24	; 0x11
    1024:	89 89       	ldd	r24, Y+17	; 0x11
    1026:	9a 89       	ldd	r25, Y+18	; 0x12
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <changePassword+0x16c>
    102c:	9a 8b       	std	Y+18, r25	; 0x12
    102e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	8b 89       	ldd	r24, Y+19	; 0x13
    103c:	9c 89       	ldd	r25, Y+20	; 0x14
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f7       	brne	.-38     	; 0x101c <changePassword+0x160>
    1042:	14 c0       	rjmp	.+40     	; 0x106c <changePassword+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1044:	6d 89       	ldd	r22, Y+21	; 0x15
    1046:	7e 89       	ldd	r23, Y+22	; 0x16
    1048:	8f 89       	ldd	r24, Y+23	; 0x17
    104a:	98 8d       	ldd	r25, Y+24	; 0x18
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	98 8b       	std	Y+16, r25	; 0x10
    105e:	8f 87       	std	Y+15, r24	; 0x0f
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	98 89       	ldd	r25, Y+16	; 0x10
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <changePassword+0x1a8>
    1068:	98 8b       	std	Y+16, r25	; 0x10
    106a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LCD_clearScreen();
    106c:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"plz re-enter the");
    1070:	21 ee       	ldi	r18, 0xE1	; 225
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	a9 01       	movw	r20, r18
    107a:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"same pass:");
    107e:	22 ef       	ldi	r18, 0xF2	; 242
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
		/* Get the password again from the user for confirmation */
		getPassword(pass2,size);
    108c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    108e:	98 a1       	ldd	r25, Y+32	; 0x20
    1090:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1092:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <getPassword>
		/* wait until the user press enter button */
		while(KEYPAD_getPressedKey() != '=');
    1096:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <KEYPAD_getPressedKey>
    109a:	8d 33       	cpi	r24, 0x3D	; 61
    109c:	e1 f7       	brne	.-8      	; 0x1096 <changePassword+0x1da>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	aa e7       	ldi	r26, 0x7A	; 122
    10a4:	b3 e4       	ldi	r27, 0x43	; 67
    10a6:	8b 87       	std	Y+11, r24	; 0x0b
    10a8:	9c 87       	std	Y+12, r25	; 0x0c
    10aa:	ad 87       	std	Y+13, r26	; 0x0d
    10ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	4a ef       	ldi	r20, 0xFA	; 250
    10bc:	54 e4       	ldi	r21, 0x44	; 68
    10be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	8f 83       	std	Y+7, r24	; 0x07
    10c8:	98 87       	std	Y+8, r25	; 0x08
    10ca:	a9 87       	std	Y+9, r26	; 0x09
    10cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ce:	6f 81       	ldd	r22, Y+7	; 0x07
    10d0:	78 85       	ldd	r23, Y+8	; 0x08
    10d2:	89 85       	ldd	r24, Y+9	; 0x09
    10d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <changePassword+0x234>
		__ticks = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	3f c0       	rjmp	.+126    	; 0x116e <changePassword+0x2b2>
	else if (__tmp > 65535)
    10f0:	6f 81       	ldd	r22, Y+7	; 0x07
    10f2:	78 85       	ldd	r23, Y+8	; 0x08
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	4f e7       	ldi	r20, 0x7F	; 127
    10fe:	57 e4       	ldi	r21, 0x47	; 71
    1100:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1104:	18 16       	cp	r1, r24
    1106:	4c f5       	brge	.+82     	; 0x115a <changePassword+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1108:	6b 85       	ldd	r22, Y+11	; 0x0b
    110a:	7c 85       	ldd	r23, Y+12	; 0x0c
    110c:	8d 85       	ldd	r24, Y+13	; 0x0d
    110e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	51 e4       	ldi	r21, 0x41	; 65
    1118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <changePassword+0x294>
    1132:	88 ec       	ldi	r24, 0xC8	; 200
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9c 83       	std	Y+4, r25	; 0x04
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <changePassword+0x282>
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	69 f7       	brne	.-38     	; 0x1132 <changePassword+0x276>
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <changePassword+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <changePassword+0x2be>
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		/* Wait until Control_ECU is ready to receive the password */
		while(UART_recieveByte() != CONTROL_ECU_READY);
    1182:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
    1186:	8f 3f       	cpi	r24, 0xFF	; 255
    1188:	e1 f7       	brne	.-8      	; 0x1182 <changePassword+0x2c6>
		/* send the to passwords to Control_ECU */
		UART_sendString(pass1);
    118a:	89 a1       	ldd	r24, Y+33	; 0x21
    118c:	9a a1       	ldd	r25, Y+34	; 0x22
    118e:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendString>
		UART_sendString(pass2);
    1192:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1194:	98 a1       	ldd	r25, Y+32	; 0x20
    1196:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendString>
		/* if the two passwords are the same Control_ECU will save the password in the EEPROM and send PASSWORD_SAVED */
		isSaved = UART_recieveByte();
    119a:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
    119e:	8d 8f       	std	Y+29, r24	; 0x1d
		/* if Control_ECU saves the password return */
		if(isSaved == PASSWORD_SAVED){
    11a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a2:	81 31       	cpi	r24, 0x11	; 17
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <changePassword+0x2ec>
    11a6:	da ce       	rjmp	.-588    	; 0xf5c <changePassword+0xa0>
    11a8:	8b a1       	ldd	r24, Y+35	; 0x23
    11aa:	9c a1       	ldd	r25, Y+36	; 0x24
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	9e bf       	out	0x3e, r25	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	8d bf       	out	0x3d, r24	; 61
		}
	}
	LCD_clearScreen();
	g_change_flag = 0;
	}
}
    11b6:	29 a5       	ldd	r18, Y+41	; 0x29
    11b8:	3a a5       	ldd	r19, Y+42	; 0x2a
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	3e bf       	out	0x3e, r19	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	2d bf       	out	0x3d, r18	; 61
    11c4:	aa 96       	adiw	r28, 0x2a	; 42
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <alarmMode>:
 * Description :
 * Function responsible for :
 * 1. Display error message on LCD for 1 minute
 * 2. Wait for 1 minute and no inputs from the keypad will be accepted during this time period.
 */
void alarmMode(void){
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	/* Set the call back function and initialize timer driver again  */

	Timer_init(&timerConfig);
    11de:	82 e3       	ldi	r24, 0x32	; 50
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <Timer_init>
	/* Display error message on LCD */
	LCD_clearScreen();
    11e6:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
	LCD_displayString("System LOCKED");
    11ea:	8d ef       	ldi	r24, 0xFD	; 253
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"Wait for 1 min");
    11f2:	2b e0       	ldi	r18, 0x0B	; 11
    11f4:	31 e0       	ldi	r19, 0x01	; 1
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	a9 01       	movw	r20, r18
    11fc:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
	/* wait until 1 minute */
	g_seconds_counter = 0;
    1200:	10 92 40 01 	sts	0x0140, r1
	while (g_seconds_counter <= 60){
    1204:	80 91 40 01 	lds	r24, 0x0140
    1208:	8d 33       	cpi	r24, 0x3D	; 61
    120a:	e0 f3       	brcs	.-8      	; 0x1204 <alarmMode+0x2e>

	}
	/*Timer_deInit(TIMER1_ID);*/
	Timer_deInit(TIMER1_ID);
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer_deInit>

	g_seconds_counter=0;
    1212:	10 92 40 01 	sts	0x0140, r1
	LCD_clearScreen();
    1216:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
}
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <checkPassword>:
 * 1. get the password from the user.
 * 2. send it to Control ECU.
 * 3. set a flag to  TRUE_PASSWORD if the user enters the true password
 *    or to WRONG_PASSWORD if the user enters a wrong password.
 */
void checkPassword(uint8* flag_ptr){
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	6a 97       	sbiw	r28, 0x1a	; 26
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	9c 8b       	std	Y+20, r25	; 0x14
    1236:	8b 8b       	std	Y+19, r24	; 0x13
		*flag_ptr = UART_recieveByte();
		if(*flag_ptr == TRUE_PASSWORD){
			return;
		}
	} /* it will reach here if the user enters wrong password 3 times and then (*flag_ptr=WRONG_PASSWORD)  */
}
    1238:	2d b7       	in	r18, 0x3d	; 61
    123a:	3e b7       	in	r19, 0x3e	; 62
    123c:	3a 8f       	std	Y+26, r19	; 0x1a
    123e:	29 8f       	std	Y+25, r18	; 0x19
 * 1. get the password from the user.
 * 2. send it to Control ECU.
 * 3. set a flag to  TRUE_PASSWORD if the user enters the true password
 *    or to WRONG_PASSWORD if the user enters a wrong password.
 */
void checkPassword(uint8* flag_ptr){
    1240:	8d b7       	in	r24, 0x3d	; 61
    1242:	9e b7       	in	r25, 0x3e	; 62
    1244:	9e 8b       	std	Y+22, r25	; 0x16
    1246:	8d 8b       	std	Y+21, r24	; 0x15
	uint8 size = PASSWORD_SIZE+2;
    1248:	87 e0       	ldi	r24, 0x07	; 7
    124a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 pass[size] , loop_counter;
    124c:	88 89       	ldd	r24, Y+16	; 0x10
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	2d b7       	in	r18, 0x3d	; 61
    1254:	3e b7       	in	r19, 0x3e	; 62
    1256:	28 1b       	sub	r18, r24
    1258:	39 0b       	sbc	r19, r25
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	3e bf       	out	0x3e, r19	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	2d bf       	out	0x3d, r18	; 61
    1264:	8d b7       	in	r24, 0x3d	; 61
    1266:	9e b7       	in	r25, 0x3e	; 62
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	98 8f       	std	Y+24, r25	; 0x18
    126c:	8f 8b       	std	Y+23, r24	; 0x17
    126e:	8f 89       	ldd	r24, Y+23	; 0x17
    1270:	98 8d       	ldd	r25, Y+24	; 0x18
    1272:	00 96       	adiw	r24, 0x00	; 0
    1274:	98 8f       	std	Y+24, r25	; 0x18
    1276:	8f 8b       	std	Y+23, r24	; 0x17
    1278:	2f 89       	ldd	r18, Y+23	; 0x17
    127a:	38 8d       	ldd	r19, Y+24	; 0x18
    127c:	3a 8b       	std	Y+18, r19	; 0x12
    127e:	29 8b       	std	Y+17, r18	; 0x11
	/* loop 3 times each time get password from the user it true return */
	for(loop_counter = 0 ; loop_counter<3 ; loop_counter++){
    1280:	1f 86       	std	Y+15, r1	; 0x0f
    1282:	9a c0       	rjmp	.+308    	; 0x13b8 <checkPassword+0x198>
		LCD_clearScreen();
    1284:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
		LCD_displayString("enter old pass:");
    1288:	8a e1       	ldi	r24, 0x1A	; 26
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <LCD_displayString>
		LCD_moveCursor(1,0);
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_moveCursor>
		/* Get the password from the user */
		getPassword(pass,size);
    1298:	89 89       	ldd	r24, Y+17	; 0x11
    129a:	9a 89       	ldd	r25, Y+18	; 0x12
    129c:	68 89       	ldd	r22, Y+16	; 0x10
    129e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <getPassword>
		/* wait until the user press enter button */
		while(KEYPAD_getPressedKey() != '=');
    12a2:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <KEYPAD_getPressedKey>
    12a6:	8d 33       	cpi	r24, 0x3D	; 61
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <checkPassword+0x82>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	aa e7       	ldi	r26, 0x7A	; 122
    12b0:	b3 e4       	ldi	r27, 0x43	; 67
    12b2:	8b 87       	std	Y+11, r24	; 0x0b
    12b4:	9c 87       	std	Y+12, r25	; 0x0c
    12b6:	ad 87       	std	Y+13, r26	; 0x0d
    12b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    12bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12be:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	4a ef       	ldi	r20, 0xFA	; 250
    12c8:	54 e4       	ldi	r21, 0x44	; 68
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	8f 83       	std	Y+7, r24	; 0x07
    12d4:	98 87       	std	Y+8, r25	; 0x08
    12d6:	a9 87       	std	Y+9, r26	; 0x09
    12d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	2c f4       	brge	.+10     	; 0x12fc <checkPassword+0xdc>
		__ticks = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <checkPassword+0x15a>
	else if (__tmp > 65535)
    12fc:	6f 81       	ldd	r22, Y+7	; 0x07
    12fe:	78 85       	ldd	r23, Y+8	; 0x08
    1300:	89 85       	ldd	r24, Y+9	; 0x09
    1302:	9a 85       	ldd	r25, Y+10	; 0x0a
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1310:	18 16       	cp	r1, r24
    1312:	4c f5       	brge	.+82     	; 0x1366 <checkPassword+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1314:	6b 85       	ldd	r22, Y+11	; 0x0b
    1316:	7c 85       	ldd	r23, Y+12	; 0x0c
    1318:	8d 85       	ldd	r24, Y+13	; 0x0d
    131a:	9e 85       	ldd	r25, Y+14	; 0x0e
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	51 e4       	ldi	r21, 0x41	; 65
    1324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	0f c0       	rjmp	.+30     	; 0x135c <checkPassword+0x13c>
    133e:	88 ec       	ldi	r24, 0xC8	; 200
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9c 83       	std	Y+4, r25	; 0x04
    1344:	8b 83       	std	Y+3, r24	; 0x03
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <checkPassword+0x12a>
    134e:	9c 83       	std	Y+4, r25	; 0x04
    1350:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f7       	brne	.-38     	; 0x133e <checkPassword+0x11e>
    1364:	14 c0       	rjmp	.+40     	; 0x138e <checkPassword+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1366:	6f 81       	ldd	r22, Y+7	; 0x07
    1368:	78 85       	ldd	r23, Y+8	; 0x08
    136a:	89 85       	ldd	r24, Y+9	; 0x09
    136c:	9a 85       	ldd	r25, Y+10	; 0x0a
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <checkPassword+0x166>
    138a:	9a 83       	std	Y+2, r25	; 0x02
    138c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		/* Wait until Control_ECU is ready to receive the password */
		while(UART_recieveByte() != CONTROL_ECU_READY);
    138e:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
    1392:	8f 3f       	cpi	r24, 0xFF	; 255
    1394:	e1 f7       	brne	.-8      	; 0x138e <checkPassword+0x16e>
		/* send the password */
		UART_sendString(pass);
    1396:	89 89       	ldd	r24, Y+17	; 0x11
    1398:	9a 89       	ldd	r25, Y+18	; 0x12
    139a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendString>
		/* if the password is true Control_ECU will send TRUE_PASSWORD , if not it will sends WRONG_PASSWORD */
		*flag_ptr = UART_recieveByte();
    139e:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
    13a2:	eb 89       	ldd	r30, Y+19	; 0x13
    13a4:	fc 89       	ldd	r31, Y+20	; 0x14
    13a6:	80 83       	st	Z, r24
		if(*flag_ptr == TRUE_PASSWORD){
    13a8:	eb 89       	ldd	r30, Y+19	; 0x13
    13aa:	fc 89       	ldd	r31, Y+20	; 0x14
    13ac:	80 81       	ld	r24, Z
    13ae:	83 33       	cpi	r24, 0x33	; 51
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <checkPassword+0x1a0>
 */
void checkPassword(uint8* flag_ptr){
	uint8 size = PASSWORD_SIZE+2;
	uint8 pass[size] , loop_counter;
	/* loop 3 times each time get password from the user it true return */
	for(loop_counter = 0 ; loop_counter<3 ; loop_counter++){
    13b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	8f 87       	std	Y+15, r24	; 0x0f
    13b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	08 f4       	brcc	.+2      	; 0x13c0 <checkPassword+0x1a0>
    13be:	62 cf       	rjmp	.-316    	; 0x1284 <checkPassword+0x64>
    13c0:	8d 89       	ldd	r24, Y+21	; 0x15
    13c2:	9e 89       	ldd	r25, Y+22	; 0x16
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	9e bf       	out	0x3e, r25	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	8d bf       	out	0x3d, r24	; 61
		*flag_ptr = UART_recieveByte();
		if(*flag_ptr == TRUE_PASSWORD){
			return;
		}
	} /* it will reach here if the user enters wrong password 3 times and then (*flag_ptr=WRONG_PASSWORD)  */
}
    13ce:	29 8d       	ldd	r18, Y+25	; 0x19
    13d0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	3e bf       	out	0x3e, r19	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	2d bf       	out	0x3d, r18	; 61
    13dc:	6a 96       	adiw	r28, 0x1a	; 26
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <createPassword>:
 * Function responsible for create new password by:
 * 1. take the password from the user and take the password again for confirmation.
 * 2. send the two passwords to Control_ECU.
 * 3. it will repeat until the user enters the same password twice
 */
void createPassword(void){
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	aa 97       	sbiw	r28, 0x2a	; 42
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
		/* if Control_ECU saves the password return */
		if(isSaved == PASSWORD_SAVED){
			return;
		}
	}
}
    1402:	2d b7       	in	r18, 0x3d	; 61
    1404:	3e b7       	in	r19, 0x3e	; 62
    1406:	3a a7       	std	Y+42, r19	; 0x2a
    1408:	29 a7       	std	Y+41, r18	; 0x29
 * Function responsible for create new password by:
 * 1. take the password from the user and take the password again for confirmation.
 * 2. send the two passwords to Control_ECU.
 * 3. it will repeat until the user enters the same password twice
 */
void createPassword(void){
    140a:	8d b7       	in	r24, 0x3d	; 61
    140c:	9e b7       	in	r25, 0x3e	; 62
    140e:	9c a3       	std	Y+36, r25	; 0x24
    1410:	8b a3       	std	Y+35, r24	; 0x23
	uint8 size = PASSWORD_SIZE+2;
    1412:	87 e0       	ldi	r24, 0x07	; 7
    1414:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 pass1[size], pass2[size];
    1416:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	2d b7       	in	r18, 0x3d	; 61
    141e:	3e b7       	in	r19, 0x3e	; 62
    1420:	28 1b       	sub	r18, r24
    1422:	39 0b       	sbc	r19, r25
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	3e bf       	out	0x3e, r19	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	2d bf       	out	0x3d, r18	; 61
    142e:	8d b7       	in	r24, 0x3d	; 61
    1430:	9e b7       	in	r25, 0x3e	; 62
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	98 a7       	std	Y+40, r25	; 0x28
    1436:	8f a3       	std	Y+39, r24	; 0x27
    1438:	8f a1       	ldd	r24, Y+39	; 0x27
    143a:	98 a5       	ldd	r25, Y+40	; 0x28
    143c:	00 96       	adiw	r24, 0x00	; 0
    143e:	98 a7       	std	Y+40, r25	; 0x28
    1440:	8f a3       	std	Y+39, r24	; 0x27
    1442:	2f a1       	ldd	r18, Y+39	; 0x27
    1444:	38 a5       	ldd	r19, Y+40	; 0x28
    1446:	3a a3       	std	Y+34, r19	; 0x22
    1448:	29 a3       	std	Y+33, r18	; 0x21
    144a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	2d b7       	in	r18, 0x3d	; 61
    1452:	3e b7       	in	r19, 0x3e	; 62
    1454:	28 1b       	sub	r18, r24
    1456:	39 0b       	sbc	r19, r25
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	3e bf       	out	0x3e, r19	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	2d bf       	out	0x3d, r18	; 61
    1462:	8d b7       	in	r24, 0x3d	; 61
    1464:	9e b7       	in	r25, 0x3e	; 62
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	9e a3       	std	Y+38, r25	; 0x26
    146a:	8d a3       	std	Y+37, r24	; 0x25
    146c:	8d a1       	ldd	r24, Y+37	; 0x25
    146e:	9e a1       	ldd	r25, Y+38	; 0x26
    1470:	00 96       	adiw	r24, 0x00	; 0
    1472:	9e a3       	std	Y+38, r25	; 0x26
    1474:	8d a3       	std	Y+37, r24	; 0x25
    1476:	2d a1       	ldd	r18, Y+37	; 0x25
    1478:	3e a1       	ldd	r19, Y+38	; 0x26
    147a:	38 a3       	std	Y+32, r19	; 0x20
    147c:	2f 8f       	std	Y+31, r18	; 0x1f
	uint8 isSaved;
	/* loop until the user enters same password twice for confirmation */
	for(;;){
		LCD_clearScreen();
    147e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"plz enter pass: ");
    1482:	20 ed       	ldi	r18, 0xD0	; 208
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_moveCursor>
		/* Get the password from the user */
		getPassword(pass1,size);
    1498:	89 a1       	ldd	r24, Y+33	; 0x21
    149a:	9a a1       	ldd	r25, Y+34	; 0x22
    149c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    149e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <getPassword>
		/* wait until the user press enter button */
		while(KEYPAD_getPressedKey() != '=');
    14a2:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <KEYPAD_getPressedKey>
    14a6:	8d 33       	cpi	r24, 0x3D	; 61
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <createPassword+0xb4>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	aa e7       	ldi	r26, 0x7A	; 122
    14b0:	b3 e4       	ldi	r27, 0x43	; 67
    14b2:	89 8f       	std	Y+25, r24	; 0x19
    14b4:	9a 8f       	std	Y+26, r25	; 0x1a
    14b6:	ab 8f       	std	Y+27, r26	; 0x1b
    14b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	69 8d       	ldd	r22, Y+25	; 0x19
    14bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	4a ef       	ldi	r20, 0xFA	; 250
    14c8:	54 e4       	ldi	r21, 0x44	; 68
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	8d 8b       	std	Y+21, r24	; 0x15
    14d4:	9e 8b       	std	Y+22, r25	; 0x16
    14d6:	af 8b       	std	Y+23, r26	; 0x17
    14d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14da:	6d 89       	ldd	r22, Y+21	; 0x15
    14dc:	7e 89       	ldd	r23, Y+22	; 0x16
    14de:	8f 89       	ldd	r24, Y+23	; 0x17
    14e0:	98 8d       	ldd	r25, Y+24	; 0x18
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	2c f4       	brge	.+10     	; 0x14fc <createPassword+0x10e>
		__ticks = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9c 8b       	std	Y+20, r25	; 0x14
    14f8:	8b 8b       	std	Y+19, r24	; 0x13
    14fa:	3f c0       	rjmp	.+126    	; 0x157a <createPassword+0x18c>
	else if (__tmp > 65535)
    14fc:	6d 89       	ldd	r22, Y+21	; 0x15
    14fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1500:	8f 89       	ldd	r24, Y+23	; 0x17
    1502:	98 8d       	ldd	r25, Y+24	; 0x18
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1510:	18 16       	cp	r1, r24
    1512:	4c f5       	brge	.+82     	; 0x1566 <createPassword+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	69 8d       	ldd	r22, Y+25	; 0x19
    1516:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9c 8b       	std	Y+20, r25	; 0x14
    153a:	8b 8b       	std	Y+19, r24	; 0x13
    153c:	0f c0       	rjmp	.+30     	; 0x155c <createPassword+0x16e>
    153e:	88 ec       	ldi	r24, 0xC8	; 200
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9a 8b       	std	Y+18, r25	; 0x12
    1544:	89 8b       	std	Y+17, r24	; 0x11
    1546:	89 89       	ldd	r24, Y+17	; 0x11
    1548:	9a 89       	ldd	r25, Y+18	; 0x12
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <createPassword+0x15c>
    154e:	9a 8b       	std	Y+18, r25	; 0x12
    1550:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	8b 89       	ldd	r24, Y+19	; 0x13
    1554:	9c 89       	ldd	r25, Y+20	; 0x14
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9c 8b       	std	Y+20, r25	; 0x14
    155a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	8b 89       	ldd	r24, Y+19	; 0x13
    155e:	9c 89       	ldd	r25, Y+20	; 0x14
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <createPassword+0x150>
    1564:	14 c0       	rjmp	.+40     	; 0x158e <createPassword+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	6d 89       	ldd	r22, Y+21	; 0x15
    1568:	7e 89       	ldd	r23, Y+22	; 0x16
    156a:	8f 89       	ldd	r24, Y+23	; 0x17
    156c:	98 8d       	ldd	r25, Y+24	; 0x18
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9c 8b       	std	Y+20, r25	; 0x14
    1578:	8b 8b       	std	Y+19, r24	; 0x13
    157a:	8b 89       	ldd	r24, Y+19	; 0x13
    157c:	9c 89       	ldd	r25, Y+20	; 0x14
    157e:	98 8b       	std	Y+16, r25	; 0x10
    1580:	8f 87       	std	Y+15, r24	; 0x0f
    1582:	8f 85       	ldd	r24, Y+15	; 0x0f
    1584:	98 89       	ldd	r25, Y+16	; 0x10
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <createPassword+0x198>
    158a:	98 8b       	std	Y+16, r25	; 0x10
    158c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LCD_clearScreen();
    158e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"plz re-enter the");
    1592:	21 ee       	ldi	r18, 0xE1	; 225
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	a9 01       	movw	r20, r18
    159c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"same pass:");
    15a0:	22 ef       	ldi	r18, 0xF2	; 242
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_displayStringRowColumn>
		/* Get the password again from the user for confirmation */
		getPassword(pass2,size);
    15ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15b0:	98 a1       	ldd	r25, Y+32	; 0x20
    15b2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    15b4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <getPassword>
		/* wait until the user press enter button */
		while(KEYPAD_getPressedKey() != '=');
    15b8:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <KEYPAD_getPressedKey>
    15bc:	8d 33       	cpi	r24, 0x3D	; 61
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <createPassword+0x1ca>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	aa e7       	ldi	r26, 0x7A	; 122
    15c6:	b3 e4       	ldi	r27, 0x43	; 67
    15c8:	8b 87       	std	Y+11, r24	; 0x0b
    15ca:	9c 87       	std	Y+12, r25	; 0x0c
    15cc:	ad 87       	std	Y+13, r26	; 0x0d
    15ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4a ef       	ldi	r20, 0xFA	; 250
    15de:	54 e4       	ldi	r21, 0x44	; 68
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	8f 83       	std	Y+7, r24	; 0x07
    15ea:	98 87       	std	Y+8, r25	; 0x08
    15ec:	a9 87       	std	Y+9, r26	; 0x09
    15ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f0:	6f 81       	ldd	r22, Y+7	; 0x07
    15f2:	78 85       	ldd	r23, Y+8	; 0x08
    15f4:	89 85       	ldd	r24, Y+9	; 0x09
    15f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e8       	ldi	r20, 0x80	; 128
    15fe:	5f e3       	ldi	r21, 0x3F	; 63
    1600:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1604:	88 23       	and	r24, r24
    1606:	2c f4       	brge	.+10     	; 0x1612 <createPassword+0x224>
		__ticks = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <createPassword+0x2a2>
	else if (__tmp > 65535)
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	4c f5       	brge	.+82     	; 0x167c <createPassword+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	6b 85       	ldd	r22, Y+11	; 0x0b
    162c:	7c 85       	ldd	r23, Y+12	; 0x0c
    162e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1630:	9e 85       	ldd	r25, Y+14	; 0x0e
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	8d 83       	std	Y+5, r24	; 0x05
    1652:	0f c0       	rjmp	.+30     	; 0x1672 <createPassword+0x284>
    1654:	88 ec       	ldi	r24, 0xC8	; 200
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	8b 83       	std	Y+3, r24	; 0x03
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <createPassword+0x272>
    1664:	9c 83       	std	Y+4, r25	; 0x04
    1666:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	9e 81       	ldd	r25, Y+6	; 0x06
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	69 f7       	brne	.-38     	; 0x1654 <createPassword+0x266>
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <createPassword+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	6f 81       	ldd	r22, Y+7	; 0x07
    167e:	78 85       	ldd	r23, Y+8	; 0x08
    1680:	89 85       	ldd	r24, Y+9	; 0x09
    1682:	9a 85       	ldd	r25, Y+10	; 0x0a
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <createPassword+0x2ae>
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		/* Wait until Control_ECU is ready to receive the password */
		while(UART_recieveByte() != CONTROL_ECU_READY);
    16a4:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
    16a8:	8f 3f       	cpi	r24, 0xFF	; 255
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <createPassword+0x2b6>
		/* send the to passwords to Control_ECU */
		UART_sendString(pass1);
    16ac:	89 a1       	ldd	r24, Y+33	; 0x21
    16ae:	9a a1       	ldd	r25, Y+34	; 0x22
    16b0:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendString>
		UART_sendString(pass2);
    16b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16b6:	98 a1       	ldd	r25, Y+32	; 0x20
    16b8:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendString>
		/* if the two passwords are the same Control_ECU will save the password in the EEPROM and send PASSWORD_SAVED */
		isSaved = UART_recieveByte();
    16bc:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
    16c0:	8d 8f       	std	Y+29, r24	; 0x1d
		/* if Control_ECU saves the password return */
		if(isSaved == PASSWORD_SAVED){
    16c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c4:	81 31       	cpi	r24, 0x11	; 17
    16c6:	09 f0       	breq	.+2      	; 0x16ca <createPassword+0x2dc>
    16c8:	da ce       	rjmp	.-588    	; 0x147e <createPassword+0x90>
			return;
		}
	}
    16ca:	8b a1       	ldd	r24, Y+35	; 0x23
    16cc:	9c a1       	ldd	r25, Y+36	; 0x24
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	9e bf       	out	0x3e, r25	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	8d bf       	out	0x3d, r24	; 61
}
    16d8:	29 a5       	ldd	r18, Y+41	; 0x29
    16da:	3a a5       	ldd	r19, Y+42	; 0x2a
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	3e bf       	out	0x3e, r19	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	2d bf       	out	0x3d, r18	; 61
    16e6:	aa 96       	adiw	r28, 0x2a	; 42
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <getPassword>:
/*
 * Description :
 * Function responsible for take password from user.
 */
void getPassword(uint8 * pass, uint8 size){
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	62 97       	sbiw	r28, 0x12	; 18
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	99 8b       	std	Y+17, r25	; 0x11
    1712:	88 8b       	std	Y+16, r24	; 0x10
    1714:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 loop_counter;
	for (loop_counter = 0; loop_counter < size-2; loop_counter++) {
    1716:	1f 86       	std	Y+15, r1	; 0x0f
    1718:	85 c0       	rjmp	.+266    	; 0x1824 <getPassword+0x12c>
		pass[loop_counter] = KEYPAD_getPressedKey() + 48;
    171a:	8f 85       	ldd	r24, Y+15	; 0x0f
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	88 89       	ldd	r24, Y+16	; 0x10
    1722:	99 89       	ldd	r25, Y+17	; 0x11
    1724:	8c 01       	movw	r16, r24
    1726:	02 0f       	add	r16, r18
    1728:	13 1f       	adc	r17, r19
    172a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <KEYPAD_getPressedKey>
    172e:	80 5d       	subi	r24, 0xD0	; 208
    1730:	f8 01       	movw	r30, r16
    1732:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1734:	8a e2       	ldi	r24, 0x2A	; 42
    1736:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayCharacter>
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	aa e7       	ldi	r26, 0x7A	; 122
    1740:	b3 e4       	ldi	r27, 0x43	; 67
    1742:	8b 87       	std	Y+11, r24	; 0x0b
    1744:	9c 87       	std	Y+12, r25	; 0x0c
    1746:	ad 87       	std	Y+13, r26	; 0x0d
    1748:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174a:	6b 85       	ldd	r22, Y+11	; 0x0b
    174c:	7c 85       	ldd	r23, Y+12	; 0x0c
    174e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1750:	9e 85       	ldd	r25, Y+14	; 0x0e
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4a ef       	ldi	r20, 0xFA	; 250
    1758:	54 e4       	ldi	r21, 0x44	; 68
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	8f 83       	std	Y+7, r24	; 0x07
    1764:	98 87       	std	Y+8, r25	; 0x08
    1766:	a9 87       	std	Y+9, r26	; 0x09
    1768:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e8       	ldi	r20, 0x80	; 128
    1778:	5f e3       	ldi	r21, 0x3F	; 63
    177a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    177e:	88 23       	and	r24, r24
    1780:	2c f4       	brge	.+10     	; 0x178c <getPassword+0x94>
		__ticks = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	3f c0       	rjmp	.+126    	; 0x180a <getPassword+0x112>
	else if (__tmp > 65535)
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	3f ef       	ldi	r19, 0xFF	; 255
    1798:	4f e7       	ldi	r20, 0x7F	; 127
    179a:	57 e4       	ldi	r21, 0x47	; 71
    179c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a0:	18 16       	cp	r1, r24
    17a2:	4c f5       	brge	.+82     	; 0x17f6 <getPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e2       	ldi	r20, 0x20	; 32
    17b2:	51 e4       	ldi	r21, 0x41	; 65
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <getPassword+0xf4>
    17ce:	88 ec       	ldi	r24, 0xC8	; 200
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <getPassword+0xe2>
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	9e 83       	std	Y+6, r25	; 0x06
    17ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	69 f7       	brne	.-38     	; 0x17ce <getPassword+0xd6>
    17f4:	14 c0       	rjmp	.+40     	; 0x181e <getPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <getPassword+0x11e>
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Function responsible for take password from user.
 */
void getPassword(uint8 * pass, uint8 size){
	uint8 loop_counter;
	for (loop_counter = 0; loop_counter < size-2; loop_counter++) {
    181e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1820:	8f 5f       	subi	r24, 0xFF	; 255
    1822:	8f 87       	std	Y+15, r24	; 0x0f
    1824:	8f 85       	ldd	r24, Y+15	; 0x0f
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	8a 89       	ldd	r24, Y+18	; 0x12
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 97       	sbiw	r24, 0x02	; 2
    1832:	28 17       	cp	r18, r24
    1834:	39 07       	cpc	r19, r25
    1836:	0c f4       	brge	.+2      	; 0x183a <getPassword+0x142>
    1838:	70 cf       	rjmp	.-288    	; 0x171a <getPassword+0x22>
		pass[loop_counter] = KEYPAD_getPressedKey() + 48;
		LCD_displayCharacter('*');
		_delay_ms(250);
	}
	/* end the password with # and null */
	pass[loop_counter++] = '#';
    183a:	8f 85       	ldd	r24, Y+15	; 0x0f
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	88 89       	ldd	r24, Y+16	; 0x10
    1842:	99 89       	ldd	r25, Y+17	; 0x11
    1844:	fc 01       	movw	r30, r24
    1846:	e2 0f       	add	r30, r18
    1848:	f3 1f       	adc	r31, r19
    184a:	83 e2       	ldi	r24, 0x23	; 35
    184c:	80 83       	st	Z, r24
    184e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1850:	8f 5f       	subi	r24, 0xFF	; 255
    1852:	8f 87       	std	Y+15, r24	; 0x0f
	pass[loop_counter] = '\0';
    1854:	8f 85       	ldd	r24, Y+15	; 0x0f
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	88 89       	ldd	r24, Y+16	; 0x10
    185c:	99 89       	ldd	r25, Y+17	; 0x11
    185e:	fc 01       	movw	r30, r24
    1860:	e2 0f       	add	r30, r18
    1862:	f3 1f       	adc	r31, r19
    1864:	10 82       	st	Z, r1
}
    1866:	62 96       	adiw	r28, 0x12	; 18
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <timer1_SetRequiredCallBackFunction>:
/*
 * Description :
 * call-back function.
 */
void timer1_SetRequiredCallBackFunction(void){
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	 g_seconds_counter++;
    1884:	80 91 40 01 	lds	r24, 0x0140
    1888:	8f 5f       	subi	r24, 0xFF	; 255
    188a:	80 93 40 01 	sts	0x0140, r24
}
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <GPIO_setupPinDirection+0x6>
    189a:	00 d0       	rcall	.+0      	; 0x189c <GPIO_setupPinDirection+0x8>
    189c:	0f 92       	push	r0
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	6a 83       	std	Y+2, r22	; 0x02
    18a6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	88 30       	cpi	r24, 0x08	; 8
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <GPIO_setupPinDirection+0x1c>
    18ae:	d5 c0       	rjmp	.+426    	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <GPIO_setupPinDirection+0x24>
    18b6:	d1 c0       	rjmp	.+418    	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3d 83       	std	Y+5, r19	; 0x05
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <GPIO_setupPinDirection+0x3a>
    18cc:	43 c0       	rjmp	.+134    	; 0x1954 <GPIO_setupPinDirection+0xc0>
    18ce:	2c 81       	ldd	r18, Y+4	; 0x04
    18d0:	3d 81       	ldd	r19, Y+5	; 0x05
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <GPIO_setupPinDirection+0x4e>
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	71 f0       	breq	.+28     	; 0x18fc <GPIO_setupPinDirection+0x68>
    18e0:	bc c0       	rjmp	.+376    	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <GPIO_setupPinDirection+0x5a>
    18ec:	5f c0       	rjmp	.+190    	; 0x19ac <GPIO_setupPinDirection+0x118>
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	91 05       	cpc	r25, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <GPIO_setupPinDirection+0x66>
    18f8:	85 c0       	rjmp	.+266    	; 0x1a04 <GPIO_setupPinDirection+0x170>
    18fa:	af c0       	rjmp	.+350    	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	a1 f4       	brne	.+40     	; 0x192a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1902:	aa e3       	ldi	r26, 0x3A	; 58
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ea e3       	ldi	r30, 0x3A	; 58
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_setupPinDirection+0x8c>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_setupPinDirection+0x88>
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	98 c0       	rjmp	.+304    	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    192a:	aa e3       	ldi	r26, 0x3A	; 58
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ea e3       	ldi	r30, 0x3A	; 58
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <GPIO_setupPinDirection+0xb4>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <GPIO_setupPinDirection+0xb0>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	83 c0       	rjmp	.+262    	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	a1 f4       	brne	.+40     	; 0x1982 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    195a:	a7 e3       	ldi	r26, 0x37	; 55
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e7 e3       	ldi	r30, 0x37	; 55
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <GPIO_setupPinDirection+0xe4>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <GPIO_setupPinDirection+0xe0>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	6c c0       	rjmp	.+216    	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1982:	a7 e3       	ldi	r26, 0x37	; 55
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e7 e3       	ldi	r30, 0x37	; 55
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <GPIO_setupPinDirection+0x10c>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <GPIO_setupPinDirection+0x108>
    19a4:	80 95       	com	r24
    19a6:	84 23       	and	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	57 c0       	rjmp	.+174    	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	a1 f4       	brne	.+40     	; 0x19da <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19b2:	a4 e3       	ldi	r26, 0x34	; 52
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e4 e3       	ldi	r30, 0x34	; 52
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <GPIO_setupPinDirection+0x13c>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <GPIO_setupPinDirection+0x138>
    19d4:	84 2b       	or	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	40 c0       	rjmp	.+128    	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19da:	a4 e3       	ldi	r26, 0x34	; 52
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e4 e3       	ldi	r30, 0x34	; 52
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <GPIO_setupPinDirection+0x164>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <GPIO_setupPinDirection+0x160>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	2b c0       	rjmp	.+86     	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	a1 f4       	brne	.+40     	; 0x1a32 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a0a:	a1 e3       	ldi	r26, 0x31	; 49
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e1 e3       	ldi	r30, 0x31	; 49
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <GPIO_setupPinDirection+0x194>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <GPIO_setupPinDirection+0x190>
    1a2c:	84 2b       	or	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a32:	a1 e3       	ldi	r26, 0x31	; 49
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e1 e3       	ldi	r30, 0x31	; 49
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <GPIO_setupPinDirection+0x1bc>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <GPIO_setupPinDirection+0x1b8>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GPIO_writePin+0x6>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <GPIO_writePin+0x8>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	6a 83       	std	Y+2, r22	; 0x02
    1a7c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	88 30       	cpi	r24, 0x08	; 8
    1a82:	08 f0       	brcs	.+2      	; 0x1a86 <GPIO_writePin+0x1c>
    1a84:	d5 c0       	rjmp	.+426    	; 0x1c30 <GPIO_writePin+0x1c6>
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	84 30       	cpi	r24, 0x04	; 4
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <GPIO_writePin+0x24>
    1a8c:	d1 c0       	rjmp	.+418    	; 0x1c30 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	3d 83       	std	Y+5, r19	; 0x05
    1a96:	2c 83       	std	Y+4, r18	; 0x04
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <GPIO_writePin+0x3a>
    1aa2:	43 c0       	rjmp	.+134    	; 0x1b2a <GPIO_writePin+0xc0>
    1aa4:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa6:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	31 05       	cpc	r19, r1
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <GPIO_writePin+0x4e>
    1aae:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	71 f0       	breq	.+28     	; 0x1ad2 <GPIO_writePin+0x68>
    1ab6:	bc c0       	rjmp	.+376    	; 0x1c30 <GPIO_writePin+0x1c6>
    1ab8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aba:	3d 81       	ldd	r19, Y+5	; 0x05
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <GPIO_writePin+0x5a>
    1ac2:	5f c0       	rjmp	.+190    	; 0x1b82 <GPIO_writePin+0x118>
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	91 05       	cpc	r25, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <GPIO_writePin+0x66>
    1ace:	85 c0       	rjmp	.+266    	; 0x1bda <GPIO_writePin+0x170>
    1ad0:	af c0       	rjmp	.+350    	; 0x1c30 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	a1 f4       	brne	.+40     	; 0x1b00 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ad8:	ab e3       	ldi	r26, 0x3B	; 59
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	eb e3       	ldi	r30, 0x3B	; 59
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <GPIO_writePin+0x8c>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <GPIO_writePin+0x88>
    1afa:	84 2b       	or	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	98 c0       	rjmp	.+304    	; 0x1c30 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b00:	ab e3       	ldi	r26, 0x3B	; 59
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	eb e3       	ldi	r30, 0x3B	; 59
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <GPIO_writePin+0xb4>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <GPIO_writePin+0xb0>
    1b22:	80 95       	com	r24
    1b24:	84 23       	and	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	83 c0       	rjmp	.+262    	; 0x1c30 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	a1 f4       	brne	.+40     	; 0x1b58 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b30:	a8 e3       	ldi	r26, 0x38	; 56
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e8 e3       	ldi	r30, 0x38	; 56
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <GPIO_writePin+0xe4>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <GPIO_writePin+0xe0>
    1b52:	84 2b       	or	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	6c c0       	rjmp	.+216    	; 0x1c30 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b58:	a8 e3       	ldi	r26, 0x38	; 56
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e8 e3       	ldi	r30, 0x38	; 56
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	48 2f       	mov	r20, r24
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 2e       	mov	r0, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <GPIO_writePin+0x10c>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	0a 94       	dec	r0
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <GPIO_writePin+0x108>
    1b7a:	80 95       	com	r24
    1b7c:	84 23       	and	r24, r20
    1b7e:	8c 93       	st	X, r24
    1b80:	57 c0       	rjmp	.+174    	; 0x1c30 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	a1 f4       	brne	.+40     	; 0x1bb0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b88:	a5 e3       	ldi	r26, 0x35	; 53
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e5 e3       	ldi	r30, 0x35	; 53
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <GPIO_writePin+0x13c>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <GPIO_writePin+0x138>
    1baa:	84 2b       	or	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	40 c0       	rjmp	.+128    	; 0x1c30 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1bb0:	a5 e3       	ldi	r26, 0x35	; 53
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e5 e3       	ldi	r30, 0x35	; 53
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <GPIO_writePin+0x164>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <GPIO_writePin+0x160>
    1bd2:	80 95       	com	r24
    1bd4:	84 23       	and	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	2b c0       	rjmp	.+86     	; 0x1c30 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	a1 f4       	brne	.+40     	; 0x1c08 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1be0:	a2 e3       	ldi	r26, 0x32	; 50
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e2 e3       	ldi	r30, 0x32	; 50
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <GPIO_writePin+0x194>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <GPIO_writePin+0x190>
    1c02:	84 2b       	or	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c08:	a2 e3       	ldi	r26, 0x32	; 50
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e2 e3       	ldi	r30, 0x32	; 50
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <GPIO_writePin+0x1bc>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <GPIO_writePin+0x1b8>
    1c2a:	80 95       	com	r24
    1c2c:	84 23       	and	r24, r20
    1c2e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <GPIO_readPin+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <GPIO_readPin+0x8>
    1c48:	0f 92       	push	r0
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c52:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	88 30       	cpi	r24, 0x08	; 8
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <GPIO_readPin+0x1c>
    1c5a:	84 c0       	rjmp	.+264    	; 0x1d64 <GPIO_readPin+0x124>
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	84 30       	cpi	r24, 0x04	; 4
    1c60:	08 f0       	brcs	.+2      	; 0x1c64 <GPIO_readPin+0x24>
    1c62:	80 c0       	rjmp	.+256    	; 0x1d64 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3d 83       	std	Y+5, r19	; 0x05
    1c6c:	2c 83       	std	Y+4, r18	; 0x04
    1c6e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c70:	5d 81       	ldd	r21, Y+5	; 0x05
    1c72:	41 30       	cpi	r20, 0x01	; 1
    1c74:	51 05       	cpc	r21, r1
    1c76:	79 f1       	breq	.+94     	; 0x1cd6 <GPIO_readPin+0x96>
    1c78:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7c:	82 30       	cpi	r24, 0x02	; 2
    1c7e:	91 05       	cpc	r25, r1
    1c80:	34 f4       	brge	.+12     	; 0x1c8e <GPIO_readPin+0x4e>
    1c82:	2c 81       	ldd	r18, Y+4	; 0x04
    1c84:	3d 81       	ldd	r19, Y+5	; 0x05
    1c86:	21 15       	cp	r18, r1
    1c88:	31 05       	cpc	r19, r1
    1c8a:	69 f0       	breq	.+26     	; 0x1ca6 <GPIO_readPin+0x66>
    1c8c:	6b c0       	rjmp	.+214    	; 0x1d64 <GPIO_readPin+0x124>
    1c8e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c90:	5d 81       	ldd	r21, Y+5	; 0x05
    1c92:	42 30       	cpi	r20, 0x02	; 2
    1c94:	51 05       	cpc	r21, r1
    1c96:	b9 f1       	breq	.+110    	; 0x1d06 <GPIO_readPin+0xc6>
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <GPIO_readPin+0x64>
    1ca2:	49 c0       	rjmp	.+146    	; 0x1d36 <GPIO_readPin+0xf6>
    1ca4:	5f c0       	rjmp	.+190    	; 0x1d64 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ca6:	e9 e3       	ldi	r30, 0x39	; 57
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a9 01       	movw	r20, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <GPIO_readPin+0x7e>
    1cba:	55 95       	asr	r21
    1cbc:	47 95       	ror	r20
    1cbe:	8a 95       	dec	r24
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <GPIO_readPin+0x7a>
    1cc2:	ca 01       	movw	r24, r20
    1cc4:	81 70       	andi	r24, 0x01	; 1
    1cc6:	90 70       	andi	r25, 0x00	; 0
    1cc8:	88 23       	and	r24, r24
    1cca:	19 f0       	breq	.+6      	; 0x1cd2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	49 c0       	rjmp	.+146    	; 0x1d64 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cd2:	19 82       	std	Y+1, r1	; 0x01
    1cd4:	47 c0       	rjmp	.+142    	; 0x1d64 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1cd6:	e6 e3       	ldi	r30, 0x36	; 54
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a9 01       	movw	r20, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <GPIO_readPin+0xae>
    1cea:	55 95       	asr	r21
    1cec:	47 95       	ror	r20
    1cee:	8a 95       	dec	r24
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <GPIO_readPin+0xaa>
    1cf2:	ca 01       	movw	r24, r20
    1cf4:	81 70       	andi	r24, 0x01	; 1
    1cf6:	90 70       	andi	r25, 0x00	; 0
    1cf8:	88 23       	and	r24, r24
    1cfa:	19 f0       	breq	.+6      	; 0x1d02 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	31 c0       	rjmp	.+98     	; 0x1d64 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d02:	19 82       	std	Y+1, r1	; 0x01
    1d04:	2f c0       	rjmp	.+94     	; 0x1d64 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d06:	e3 e3       	ldi	r30, 0x33	; 51
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a9 01       	movw	r20, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <GPIO_readPin+0xde>
    1d1a:	55 95       	asr	r21
    1d1c:	47 95       	ror	r20
    1d1e:	8a 95       	dec	r24
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <GPIO_readPin+0xda>
    1d22:	ca 01       	movw	r24, r20
    1d24:	81 70       	andi	r24, 0x01	; 1
    1d26:	90 70       	andi	r25, 0x00	; 0
    1d28:	88 23       	and	r24, r24
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	19 c0       	rjmp	.+50     	; 0x1d64 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d32:	19 82       	std	Y+1, r1	; 0x01
    1d34:	17 c0       	rjmp	.+46     	; 0x1d64 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d36:	e0 e3       	ldi	r30, 0x30	; 48
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a9 01       	movw	r20, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_readPin+0x10e>
    1d4a:	55 95       	asr	r21
    1d4c:	47 95       	ror	r20
    1d4e:	8a 95       	dec	r24
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <GPIO_readPin+0x10a>
    1d52:	ca 01       	movw	r24, r20
    1d54:	81 70       	andi	r24, 0x01	; 1
    1d56:	90 70       	andi	r25, 0x00	; 0
    1d58:	88 23       	and	r24, r24
    1d5a:	19 f0       	breq	.+6      	; 0x1d62 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d62:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <GPIO_setupPortDirection+0x6>
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <GPIO_setupPortDirection+0x8>
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	84 30       	cpi	r24, 0x04	; 4
    1d8a:	90 f5       	brcc	.+100    	; 0x1df0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	3c 83       	std	Y+4, r19	; 0x04
    1d94:	2b 83       	std	Y+3, r18	; 0x03
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	d1 f0       	breq	.+52     	; 0x1dd4 <GPIO_setupPortDirection+0x5e>
    1da0:	2b 81       	ldd	r18, Y+3	; 0x03
    1da2:	3c 81       	ldd	r19, Y+4	; 0x04
    1da4:	22 30       	cpi	r18, 0x02	; 2
    1da6:	31 05       	cpc	r19, r1
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <GPIO_setupPortDirection+0x3e>
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	61 f0       	breq	.+24     	; 0x1dca <GPIO_setupPortDirection+0x54>
    1db2:	1e c0       	rjmp	.+60     	; 0x1df0 <GPIO_setupPortDirection+0x7a>
    1db4:	2b 81       	ldd	r18, Y+3	; 0x03
    1db6:	3c 81       	ldd	r19, Y+4	; 0x04
    1db8:	22 30       	cpi	r18, 0x02	; 2
    1dba:	31 05       	cpc	r19, r1
    1dbc:	81 f0       	breq	.+32     	; 0x1dde <GPIO_setupPortDirection+0x68>
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	83 30       	cpi	r24, 0x03	; 3
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	81 f0       	breq	.+32     	; 0x1de8 <GPIO_setupPortDirection+0x72>
    1dc8:	13 c0       	rjmp	.+38     	; 0x1df0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1dca:	ea e3       	ldi	r30, 0x3A	; 58
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	80 83       	st	Z, r24
    1dd2:	0e c0       	rjmp	.+28     	; 0x1df0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1dd4:	e7 e3       	ldi	r30, 0x37	; 55
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	80 83       	st	Z, r24
    1ddc:	09 c0       	rjmp	.+18     	; 0x1df0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1dde:	e4 e3       	ldi	r30, 0x34	; 52
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	80 83       	st	Z, r24
    1de6:	04 c0       	rjmp	.+8      	; 0x1df0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1de8:	e1 e3       	ldi	r30, 0x31	; 49
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	80 83       	st	Z, r24
			break;
		}
	}
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <GPIO_writePort+0x6>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <GPIO_writePort+0x8>
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	84 30       	cpi	r24, 0x04	; 4
    1e12:	90 f5       	brcc	.+100    	; 0x1e78 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	3c 83       	std	Y+4, r19	; 0x04
    1e1c:	2b 83       	std	Y+3, r18	; 0x03
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	91 05       	cpc	r25, r1
    1e26:	d1 f0       	breq	.+52     	; 0x1e5c <GPIO_writePort+0x5e>
    1e28:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2c:	22 30       	cpi	r18, 0x02	; 2
    1e2e:	31 05       	cpc	r19, r1
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <GPIO_writePort+0x3e>
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	61 f0       	breq	.+24     	; 0x1e52 <GPIO_writePort+0x54>
    1e3a:	1e c0       	rjmp	.+60     	; 0x1e78 <GPIO_writePort+0x7a>
    1e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e40:	22 30       	cpi	r18, 0x02	; 2
    1e42:	31 05       	cpc	r19, r1
    1e44:	81 f0       	breq	.+32     	; 0x1e66 <GPIO_writePort+0x68>
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	83 30       	cpi	r24, 0x03	; 3
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	81 f0       	breq	.+32     	; 0x1e70 <GPIO_writePort+0x72>
    1e50:	13 c0       	rjmp	.+38     	; 0x1e78 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e52:	eb e3       	ldi	r30, 0x3B	; 59
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	80 83       	st	Z, r24
    1e5a:	0e c0       	rjmp	.+28     	; 0x1e78 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e5c:	e8 e3       	ldi	r30, 0x38	; 56
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	80 83       	st	Z, r24
    1e64:	09 c0       	rjmp	.+18     	; 0x1e78 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e66:	e5 e3       	ldi	r30, 0x35	; 53
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	80 83       	st	Z, r24
    1e6e:	04 c0       	rjmp	.+8      	; 0x1e78 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e70:	e2 e3       	ldi	r30, 0x32	; 50
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <GPIO_readPort+0x6>
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <GPIO_readPort+0x8>
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e94:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	84 30       	cpi	r24, 0x04	; 4
    1e9a:	90 f5       	brcc	.+100    	; 0x1f00 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	3c 83       	std	Y+4, r19	; 0x04
    1ea4:	2b 83       	std	Y+3, r18	; 0x03
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	91 05       	cpc	r25, r1
    1eae:	d1 f0       	breq	.+52     	; 0x1ee4 <GPIO_readPort+0x5e>
    1eb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb4:	22 30       	cpi	r18, 0x02	; 2
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <GPIO_readPort+0x3e>
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	61 f0       	breq	.+24     	; 0x1eda <GPIO_readPort+0x54>
    1ec2:	1e c0       	rjmp	.+60     	; 0x1f00 <GPIO_readPort+0x7a>
    1ec4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec8:	22 30       	cpi	r18, 0x02	; 2
    1eca:	31 05       	cpc	r19, r1
    1ecc:	81 f0       	breq	.+32     	; 0x1eee <GPIO_readPort+0x68>
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	83 30       	cpi	r24, 0x03	; 3
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	81 f0       	breq	.+32     	; 0x1ef8 <GPIO_readPort+0x72>
    1ed8:	13 c0       	rjmp	.+38     	; 0x1f00 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1eda:	e9 e3       	ldi	r30, 0x39	; 57
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	0e c0       	rjmp	.+28     	; 0x1f00 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ee4:	e6 e3       	ldi	r30, 0x36	; 54
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	09 c0       	rjmp	.+18     	; 0x1f00 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1eee:	e3 e3       	ldi	r30, 0x33	; 51
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	04 c0       	rjmp	.+8      	; 0x1f00 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ef8:	e0 e3       	ldi	r30, 0x30	; 48
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	60 97       	sbiw	r28, 0x10	; 16
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	40 e0       	ldi	r20, 0x00	; 0
    1f34:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	62 e0       	ldi	r22, 0x02	; 2
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	63 e0       	ldi	r22, 0x03	; 3
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	64 e0       	ldi	r22, 0x04	; 4
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	65 e0       	ldi	r22, 0x05	; 5
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	66 e0       	ldi	r22, 0x06	; 6
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	67 e0       	ldi	r22, 0x07	; 7
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f74:	1f 86       	std	Y+15, r1	; 0x0f
    1f76:	ab c0       	rjmp	.+342    	; 0x20ce <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1f8c:	18 8a       	std	Y+16, r1	; 0x10
    1f8e:	22 c0       	rjmp	.+68     	; 0x1fd4 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1f90:	88 89       	ldd	r24, Y+16	; 0x10
    1f92:	98 2f       	mov	r25, r24
    1f94:	9c 5f       	subi	r25, 0xFC	; 252
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	69 2f       	mov	r22, r25
    1f9a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <GPIO_readPin>
    1f9e:	88 23       	and	r24, r24
    1fa0:	b1 f4       	brne	.+44     	; 0x1fce <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	88 89       	ldd	r24, Y+16	; 0x10
    1fb4:	89 0f       	add	r24, r25
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1fbc:	60 96       	adiw	r28, 0x10	; 16
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1fce:	88 89       	ldd	r24, Y+16	; 0x10
    1fd0:	8f 5f       	subi	r24, 0xFF	; 255
    1fd2:	88 8b       	std	Y+16, r24	; 0x10
    1fd4:	88 89       	ldd	r24, Y+16	; 0x10
    1fd6:	84 30       	cpi	r24, 0x04	; 4
    1fd8:	d8 f2       	brcs	.-74     	; 0x1f90 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 e2       	ldi	r26, 0x20	; 32
    1fea:	b1 e4       	ldi	r27, 0x41	; 65
    1fec:	8b 87       	std	Y+11, r24	; 0x0b
    1fee:	9c 87       	std	Y+12, r25	; 0x0c
    1ff0:	ad 87       	std	Y+13, r26	; 0x0d
    1ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a ef       	ldi	r20, 0xFA	; 250
    2002:	54 e4       	ldi	r21, 0x44	; 68
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8f 83       	std	Y+7, r24	; 0x07
    200e:	98 87       	std	Y+8, r25	; 0x08
    2010:	a9 87       	std	Y+9, r26	; 0x09
    2012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2036:	6f 81       	ldd	r22, Y+7	; 0x07
    2038:	78 85       	ldd	r23, Y+8	; 0x08
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2050:	7c 85       	ldd	r23, Y+12	; 0x0c
    2052:	8d 85       	ldd	r24, Y+13	; 0x0d
    2054:	9e 85       	ldd	r25, Y+14	; 0x0e
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <KEYPAD_getPressedKey+0x186>
    2078:	88 ec       	ldi	r24, 0xC8	; 200
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <KEYPAD_getPressedKey+0x174>
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <KEYPAD_getPressedKey+0x168>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <KEYPAD_getPressedKey+0x1b0>
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    20c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	8f 87       	std	Y+15, r24	; 0x0f
    20ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	08 f4       	brcc	.+2      	; 0x20d6 <KEYPAD_getPressedKey+0x1c6>
    20d4:	51 cf       	rjmp	.-350    	; 0x1f78 <KEYPAD_getPressedKey+0x68>
    20d6:	4e cf       	rjmp	.-356    	; 0x1f74 <KEYPAD_getPressedKey+0x64>

000020d8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <KEYPAD_4x4_adjustKeyNumber+0x6>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    20e6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	3c 83       	std	Y+4, r19	; 0x04
    20f0:	2b 83       	std	Y+3, r18	; 0x03
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	88 30       	cpi	r24, 0x08	; 8
    20f8:	91 05       	cpc	r25, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <KEYPAD_4x4_adjustKeyNumber+0x26>
    20fc:	70 c0       	rjmp	.+224    	; 0x21de <KEYPAD_4x4_adjustKeyNumber+0x106>
    20fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2100:	3c 81       	ldd	r19, Y+4	; 0x04
    2102:	29 30       	cpi	r18, 0x09	; 9
    2104:	31 05       	cpc	r19, r1
    2106:	5c f5       	brge	.+86     	; 0x215e <KEYPAD_4x4_adjustKeyNumber+0x86>
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	84 30       	cpi	r24, 0x04	; 4
    210e:	91 05       	cpc	r25, r1
    2110:	09 f4       	brne	.+2      	; 0x2114 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2112:	59 c0       	rjmp	.+178    	; 0x21c6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2114:	2b 81       	ldd	r18, Y+3	; 0x03
    2116:	3c 81       	ldd	r19, Y+4	; 0x04
    2118:	25 30       	cpi	r18, 0x05	; 5
    211a:	31 05       	cpc	r19, r1
    211c:	9c f4       	brge	.+38     	; 0x2144 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	82 30       	cpi	r24, 0x02	; 2
    2124:	91 05       	cpc	r25, r1
    2126:	09 f4       	brne	.+2      	; 0x212a <KEYPAD_4x4_adjustKeyNumber+0x52>
    2128:	48 c0       	rjmp	.+144    	; 0x21ba <KEYPAD_4x4_adjustKeyNumber+0xe2>
    212a:	2b 81       	ldd	r18, Y+3	; 0x03
    212c:	3c 81       	ldd	r19, Y+4	; 0x04
    212e:	23 30       	cpi	r18, 0x03	; 3
    2130:	31 05       	cpc	r19, r1
    2132:	0c f0       	brlt	.+2      	; 0x2136 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2134:	45 c0       	rjmp	.+138    	; 0x21c0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	91 05       	cpc	r25, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2140:	39 c0       	rjmp	.+114    	; 0x21b4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2142:	67 c0       	rjmp	.+206    	; 0x2212 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2144:	2b 81       	ldd	r18, Y+3	; 0x03
    2146:	3c 81       	ldd	r19, Y+4	; 0x04
    2148:	26 30       	cpi	r18, 0x06	; 6
    214a:	31 05       	cpc	r19, r1
    214c:	09 f4       	brne	.+2      	; 0x2150 <KEYPAD_4x4_adjustKeyNumber+0x78>
    214e:	41 c0       	rjmp	.+130    	; 0x21d2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	87 30       	cpi	r24, 0x07	; 7
    2156:	91 05       	cpc	r25, r1
    2158:	0c f0       	brlt	.+2      	; 0x215c <KEYPAD_4x4_adjustKeyNumber+0x84>
    215a:	3e c0       	rjmp	.+124    	; 0x21d8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    215c:	37 c0       	rjmp	.+110    	; 0x21cc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    215e:	2b 81       	ldd	r18, Y+3	; 0x03
    2160:	3c 81       	ldd	r19, Y+4	; 0x04
    2162:	2c 30       	cpi	r18, 0x0C	; 12
    2164:	31 05       	cpc	r19, r1
    2166:	09 f4       	brne	.+2      	; 0x216a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2168:	46 c0       	rjmp	.+140    	; 0x21f6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	8d 30       	cpi	r24, 0x0D	; 13
    2170:	91 05       	cpc	r25, r1
    2172:	5c f4       	brge	.+22     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	3c 81       	ldd	r19, Y+4	; 0x04
    2178:	2a 30       	cpi	r18, 0x0A	; 10
    217a:	31 05       	cpc	r19, r1
    217c:	b1 f1       	breq	.+108    	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x112>
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	8b 30       	cpi	r24, 0x0B	; 11
    2184:	91 05       	cpc	r25, r1
    2186:	a4 f5       	brge	.+104    	; 0x21f0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2188:	2d c0       	rjmp	.+90     	; 0x21e4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    218a:	2b 81       	ldd	r18, Y+3	; 0x03
    218c:	3c 81       	ldd	r19, Y+4	; 0x04
    218e:	2e 30       	cpi	r18, 0x0E	; 14
    2190:	31 05       	cpc	r19, r1
    2192:	b9 f1       	breq	.+110    	; 0x2202 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	8e 30       	cpi	r24, 0x0E	; 14
    219a:	91 05       	cpc	r25, r1
    219c:	7c f1       	brlt	.+94     	; 0x21fc <KEYPAD_4x4_adjustKeyNumber+0x124>
    219e:	2b 81       	ldd	r18, Y+3	; 0x03
    21a0:	3c 81       	ldd	r19, Y+4	; 0x04
    21a2:	2f 30       	cpi	r18, 0x0F	; 15
    21a4:	31 05       	cpc	r19, r1
    21a6:	79 f1       	breq	.+94     	; 0x2206 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	80 31       	cpi	r24, 0x10	; 16
    21ae:	91 05       	cpc	r25, r1
    21b0:	69 f1       	breq	.+90     	; 0x220c <KEYPAD_4x4_adjustKeyNumber+0x134>
    21b2:	2f c0       	rjmp	.+94     	; 0x2212 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    21b4:	87 e0       	ldi	r24, 0x07	; 7
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	2e c0       	rjmp	.+92     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    21ba:	88 e0       	ldi	r24, 0x08	; 8
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	2b c0       	rjmp	.+86     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    21c0:	89 e0       	ldi	r24, 0x09	; 9
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	28 c0       	rjmp	.+80     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    21c6:	85 e2       	ldi	r24, 0x25	; 37
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	25 c0       	rjmp	.+74     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    21cc:	84 e0       	ldi	r24, 0x04	; 4
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	22 c0       	rjmp	.+68     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    21d2:	85 e0       	ldi	r24, 0x05	; 5
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	1f c0       	rjmp	.+62     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    21d8:	86 e0       	ldi	r24, 0x06	; 6
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	1c c0       	rjmp	.+56     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    21de:	8a e2       	ldi	r24, 0x2A	; 42
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	19 c0       	rjmp	.+50     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	16 c0       	rjmp	.+44     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	13 c0       	rjmp	.+38     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	10 c0       	rjmp	.+32     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    21f6:	8d e2       	ldi	r24, 0x2D	; 45
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	0d c0       	rjmp	.+26     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    21fc:	8d e0       	ldi	r24, 0x0D	; 13
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2202:	19 82       	std	Y+1, r1	; 0x01
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2206:	8d e3       	ldi	r24, 0x3D	; 61
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    220c:	8b e2       	ldi	r24, 0x2B	; 43
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	2e 97       	sbiw	r28, 0x0e	; 14
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	41 e0       	ldi	r20, 0x01	; 1
    2240:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2244:	82 e0       	ldi	r24, 0x02	; 2
    2246:	61 e0       	ldi	r22, 0x01	; 1
    2248:	41 e0       	ldi	r20, 0x01	; 1
    224a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 ea       	ldi	r26, 0xA0	; 160
    2254:	b1 e4       	ldi	r27, 0x41	; 65
    2256:	8b 87       	std	Y+11, r24	; 0x0b
    2258:	9c 87       	std	Y+12, r25	; 0x0c
    225a:	ad 87       	std	Y+13, r26	; 0x0d
    225c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2260:	7c 85       	ldd	r23, Y+12	; 0x0c
    2262:	8d 85       	ldd	r24, Y+13	; 0x0d
    2264:	9e 85       	ldd	r25, Y+14	; 0x0e
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4a ef       	ldi	r20, 0xFA	; 250
    226c:	54 e4       	ldi	r21, 0x44	; 68
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8f 83       	std	Y+7, r24	; 0x07
    2278:	98 87       	std	Y+8, r25	; 0x08
    227a:	a9 87       	std	Y+9, r26	; 0x09
    227c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e8       	ldi	r20, 0x80	; 128
    228c:	5f e3       	ldi	r21, 0x3F	; 63
    228e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2292:	88 23       	and	r24, r24
    2294:	2c f4       	brge	.+10     	; 0x22a0 <LCD_init+0x7a>
		__ticks = 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	3f c0       	rjmp	.+126    	; 0x231e <LCD_init+0xf8>
	else if (__tmp > 65535)
    22a0:	6f 81       	ldd	r22, Y+7	; 0x07
    22a2:	78 85       	ldd	r23, Y+8	; 0x08
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	3f ef       	ldi	r19, 0xFF	; 255
    22ac:	4f e7       	ldi	r20, 0x7F	; 127
    22ae:	57 e4       	ldi	r21, 0x47	; 71
    22b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b4:	18 16       	cp	r1, r24
    22b6:	4c f5       	brge	.+82     	; 0x230a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    22bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22be:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e2       	ldi	r20, 0x20	; 32
    22c6:	51 e4       	ldi	r21, 0x41	; 65
    22c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	0f c0       	rjmp	.+30     	; 0x2300 <LCD_init+0xda>
    22e2:	88 ec       	ldi	r24, 0xC8	; 200
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_init+0xc8>
    22f2:	9c 83       	std	Y+4, r25	; 0x04
    22f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	9e 81       	ldd	r25, Y+6	; 0x06
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	69 f7       	brne	.-38     	; 0x22e2 <LCD_init+0xbc>
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230a:	6f 81       	ldd	r22, Y+7	; 0x07
    230c:	78 85       	ldd	r23, Y+8	; 0x08
    230e:	89 85       	ldd	r24, Y+9	; 0x09
    2310:	9a 85       	ldd	r25, Y+10	; 0x0a
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <LCD_init+0x104>
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	6f ef       	ldi	r22, 0xFF	; 255
    2336:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    233a:	88 e3       	ldi	r24, 0x38	; 56
    233c:	0e 94 af 11 	call	0x235e	; 0x235e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2340:	8c e0       	ldi	r24, 0x0C	; 12
    2342:	0e 94 af 11 	call	0x235e	; 0x235e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	0e 94 af 11 	call	0x235e	; 0x235e <LCD_sendCommand>
}
    234c:	2e 96       	adiw	r28, 0x0e	; 14
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	e9 97       	sbiw	r28, 0x39	; 57
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 e8       	ldi	r26, 0x80	; 128
    2384:	bf e3       	ldi	r27, 0x3F	; 63
    2386:	8d ab       	std	Y+53, r24	; 0x35
    2388:	9e ab       	std	Y+54, r25	; 0x36
    238a:	af ab       	std	Y+55, r26	; 0x37
    238c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	6d a9       	ldd	r22, Y+53	; 0x35
    2390:	7e a9       	ldd	r23, Y+54	; 0x36
    2392:	8f a9       	ldd	r24, Y+55	; 0x37
    2394:	98 ad       	ldd	r25, Y+56	; 0x38
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a ef       	ldi	r20, 0xFA	; 250
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	89 ab       	std	Y+49, r24	; 0x31
    23a8:	9a ab       	std	Y+50, r25	; 0x32
    23aa:	ab ab       	std	Y+51, r26	; 0x33
    23ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23ae:	69 a9       	ldd	r22, Y+49	; 0x31
    23b0:	7a a9       	ldd	r23, Y+50	; 0x32
    23b2:	8b a9       	ldd	r24, Y+51	; 0x33
    23b4:	9c a9       	ldd	r25, Y+52	; 0x34
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <LCD_sendCommand+0x72>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	98 ab       	std	Y+48, r25	; 0x30
    23cc:	8f a7       	std	Y+47, r24	; 0x2f
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    23d0:	69 a9       	ldd	r22, Y+49	; 0x31
    23d2:	7a a9       	ldd	r23, Y+50	; 0x32
    23d4:	8b a9       	ldd	r24, Y+51	; 0x33
    23d6:	9c a9       	ldd	r25, Y+52	; 0x34
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ea:	7e a9       	ldd	r23, Y+54	; 0x36
    23ec:	8f a9       	ldd	r24, Y+55	; 0x37
    23ee:	98 ad       	ldd	r25, Y+56	; 0x38
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	98 ab       	std	Y+48, r25	; 0x30
    240e:	8f a7       	std	Y+47, r24	; 0x2f
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <LCD_sendCommand+0xd2>
    2412:	88 ec       	ldi	r24, 0xC8	; 200
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e a7       	std	Y+46, r25	; 0x2e
    2418:	8d a7       	std	Y+45, r24	; 0x2d
    241a:	8d a5       	ldd	r24, Y+45	; 0x2d
    241c:	9e a5       	ldd	r25, Y+46	; 0x2e
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_sendCommand+0xc0>
    2422:	9e a7       	std	Y+46, r25	; 0x2e
    2424:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2426:	8f a5       	ldd	r24, Y+47	; 0x2f
    2428:	98 a9       	ldd	r25, Y+48	; 0x30
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	98 ab       	std	Y+48, r25	; 0x30
    242e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2430:	8f a5       	ldd	r24, Y+47	; 0x2f
    2432:	98 a9       	ldd	r25, Y+48	; 0x30
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <LCD_sendCommand+0xb4>
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	69 a9       	ldd	r22, Y+49	; 0x31
    243c:	7a a9       	ldd	r23, Y+50	; 0x32
    243e:	8b a9       	ldd	r24, Y+51	; 0x33
    2440:	9c a9       	ldd	r25, Y+52	; 0x34
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	98 ab       	std	Y+48, r25	; 0x30
    244c:	8f a7       	std	Y+47, r24	; 0x2f
    244e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2450:	98 a9       	ldd	r25, Y+48	; 0x30
    2452:	9c a7       	std	Y+44, r25	; 0x2c
    2454:	8b a7       	std	Y+43, r24	; 0x2b
    2456:	8b a5       	ldd	r24, Y+43	; 0x2b
    2458:	9c a5       	ldd	r25, Y+44	; 0x2c
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_sendCommand+0xfc>
    245e:	9c a7       	std	Y+44, r25	; 0x2c
    2460:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	61 e0       	ldi	r22, 0x01	; 1
    2466:	41 e0       	ldi	r20, 0x01	; 1
    2468:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a0 e8       	ldi	r26, 0x80	; 128
    2472:	bf e3       	ldi	r27, 0x3F	; 63
    2474:	8f a3       	std	Y+39, r24	; 0x27
    2476:	98 a7       	std	Y+40, r25	; 0x28
    2478:	a9 a7       	std	Y+41, r26	; 0x29
    247a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	6f a1       	ldd	r22, Y+39	; 0x27
    247e:	78 a5       	ldd	r23, Y+40	; 0x28
    2480:	89 a5       	ldd	r24, Y+41	; 0x29
    2482:	9a a5       	ldd	r25, Y+42	; 0x2a
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a ef       	ldi	r20, 0xFA	; 250
    248a:	54 e4       	ldi	r21, 0x44	; 68
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8b a3       	std	Y+35, r24	; 0x23
    2496:	9c a3       	std	Y+36, r25	; 0x24
    2498:	ad a3       	std	Y+37, r26	; 0x25
    249a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    249c:	6b a1       	ldd	r22, Y+35	; 0x23
    249e:	7c a1       	ldd	r23, Y+36	; 0x24
    24a0:	8d a1       	ldd	r24, Y+37	; 0x25
    24a2:	9e a1       	ldd	r25, Y+38	; 0x26
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	2c f4       	brge	.+10     	; 0x24be <LCD_sendCommand+0x160>
		__ticks = 1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9a a3       	std	Y+34, r25	; 0x22
    24ba:	89 a3       	std	Y+33, r24	; 0x21
    24bc:	3f c0       	rjmp	.+126    	; 0x253c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    24be:	6b a1       	ldd	r22, Y+35	; 0x23
    24c0:	7c a1       	ldd	r23, Y+36	; 0x24
    24c2:	8d a1       	ldd	r24, Y+37	; 0x25
    24c4:	9e a1       	ldd	r25, Y+38	; 0x26
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	4f e7       	ldi	r20, 0x7F	; 127
    24cc:	57 e4       	ldi	r21, 0x47	; 71
    24ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	4c f5       	brge	.+82     	; 0x2528 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d6:	6f a1       	ldd	r22, Y+39	; 0x27
    24d8:	78 a5       	ldd	r23, Y+40	; 0x28
    24da:	89 a5       	ldd	r24, Y+41	; 0x29
    24dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9a a3       	std	Y+34, r25	; 0x22
    24fc:	89 a3       	std	Y+33, r24	; 0x21
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <LCD_sendCommand+0x1c0>
    2500:	88 ec       	ldi	r24, 0xC8	; 200
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	98 a3       	std	Y+32, r25	; 0x20
    2506:	8f 8f       	std	Y+31, r24	; 0x1f
    2508:	8f 8d       	ldd	r24, Y+31	; 0x1f
    250a:	98 a1       	ldd	r25, Y+32	; 0x20
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_sendCommand+0x1ae>
    2510:	98 a3       	std	Y+32, r25	; 0x20
    2512:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	89 a1       	ldd	r24, Y+33	; 0x21
    2516:	9a a1       	ldd	r25, Y+34	; 0x22
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9a a3       	std	Y+34, r25	; 0x22
    251c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	89 a1       	ldd	r24, Y+33	; 0x21
    2520:	9a a1       	ldd	r25, Y+34	; 0x22
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <LCD_sendCommand+0x1a2>
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	6b a1       	ldd	r22, Y+35	; 0x23
    252a:	7c a1       	ldd	r23, Y+36	; 0x24
    252c:	8d a1       	ldd	r24, Y+37	; 0x25
    252e:	9e a1       	ldd	r25, Y+38	; 0x26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9a a3       	std	Y+34, r25	; 0x22
    253a:	89 a3       	std	Y+33, r24	; 0x21
    253c:	89 a1       	ldd	r24, Y+33	; 0x21
    253e:	9a a1       	ldd	r25, Y+34	; 0x22
    2540:	9e 8f       	std	Y+30, r25	; 0x1e
    2542:	8d 8f       	std	Y+29, r24	; 0x1d
    2544:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2546:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_sendCommand+0x1ea>
    254c:	9e 8f       	std	Y+30, r25	; 0x1e
    254e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	69 ad       	ldd	r22, Y+57	; 0x39
    2554:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePort>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a0 e8       	ldi	r26, 0x80	; 128
    255e:	bf e3       	ldi	r27, 0x3F	; 63
    2560:	89 8f       	std	Y+25, r24	; 0x19
    2562:	9a 8f       	std	Y+26, r25	; 0x1a
    2564:	ab 8f       	std	Y+27, r26	; 0x1b
    2566:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	69 8d       	ldd	r22, Y+25	; 0x19
    256a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a ef       	ldi	r20, 0xFA	; 250
    2576:	54 e4       	ldi	r21, 0x44	; 68
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8d 8b       	std	Y+21, r24	; 0x15
    2582:	9e 8b       	std	Y+22, r25	; 0x16
    2584:	af 8b       	std	Y+23, r26	; 0x17
    2586:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2588:	6d 89       	ldd	r22, Y+21	; 0x15
    258a:	7e 89       	ldd	r23, Y+22	; 0x16
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259c:	88 23       	and	r24, r24
    259e:	2c f4       	brge	.+10     	; 0x25aa <LCD_sendCommand+0x24c>
		__ticks = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    25aa:	6d 89       	ldd	r22, Y+21	; 0x15
    25ac:	7e 89       	ldd	r23, Y+22	; 0x16
    25ae:	8f 89       	ldd	r24, Y+23	; 0x17
    25b0:	98 8d       	ldd	r25, Y+24	; 0x18
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	4c f5       	brge	.+82     	; 0x2614 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	69 8d       	ldd	r22, Y+25	; 0x19
    25c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9c 8b       	std	Y+20, r25	; 0x14
    25e8:	8b 8b       	std	Y+19, r24	; 0x13
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <LCD_sendCommand+0x2ac>
    25ec:	88 ec       	ldi	r24, 0xC8	; 200
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9a 8b       	std	Y+18, r25	; 0x12
    25f2:	89 8b       	std	Y+17, r24	; 0x11
    25f4:	89 89       	ldd	r24, Y+17	; 0x11
    25f6:	9a 89       	ldd	r25, Y+18	; 0x12
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_sendCommand+0x29a>
    25fc:	9a 8b       	std	Y+18, r25	; 0x12
    25fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	8b 89       	ldd	r24, Y+19	; 0x13
    2602:	9c 89       	ldd	r25, Y+20	; 0x14
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	8b 89       	ldd	r24, Y+19	; 0x13
    260c:	9c 89       	ldd	r25, Y+20	; 0x14
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	69 f7       	brne	.-38     	; 0x25ec <LCD_sendCommand+0x28e>
    2612:	14 c0       	rjmp	.+40     	; 0x263c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	6d 89       	ldd	r22, Y+21	; 0x15
    2616:	7e 89       	ldd	r23, Y+22	; 0x16
    2618:	8f 89       	ldd	r24, Y+23	; 0x17
    261a:	98 8d       	ldd	r25, Y+24	; 0x18
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9c 8b       	std	Y+20, r25	; 0x14
    2626:	8b 8b       	std	Y+19, r24	; 0x13
    2628:	8b 89       	ldd	r24, Y+19	; 0x13
    262a:	9c 89       	ldd	r25, Y+20	; 0x14
    262c:	98 8b       	std	Y+16, r25	; 0x10
    262e:	8f 87       	std	Y+15, r24	; 0x0f
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 89       	ldd	r25, Y+16	; 0x10
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <LCD_sendCommand+0x2d6>
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    263c:	82 e0       	ldi	r24, 0x02	; 2
    263e:	61 e0       	ldi	r22, 0x01	; 1
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e8       	ldi	r26, 0x80	; 128
    264c:	bf e3       	ldi	r27, 0x3F	; 63
    264e:	8b 87       	std	Y+11, r24	; 0x0b
    2650:	9c 87       	std	Y+12, r25	; 0x0c
    2652:	ad 87       	std	Y+13, r26	; 0x0d
    2654:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2656:	6b 85       	ldd	r22, Y+11	; 0x0b
    2658:	7c 85       	ldd	r23, Y+12	; 0x0c
    265a:	8d 85       	ldd	r24, Y+13	; 0x0d
    265c:	9e 85       	ldd	r25, Y+14	; 0x0e
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a ef       	ldi	r20, 0xFA	; 250
    2664:	54 e4       	ldi	r21, 0x44	; 68
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8f 83       	std	Y+7, r24	; 0x07
    2670:	98 87       	std	Y+8, r25	; 0x08
    2672:	a9 87       	std	Y+9, r26	; 0x09
    2674:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e8       	ldi	r20, 0x80	; 128
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268a:	88 23       	and	r24, r24
    268c:	2c f4       	brge	.+10     	; 0x2698 <LCD_sendCommand+0x33a>
		__ticks = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	3f c0       	rjmp	.+126    	; 0x2716 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	4c f5       	brge	.+82     	; 0x2702 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	0f c0       	rjmp	.+30     	; 0x26f8 <LCD_sendCommand+0x39a>
    26da:	88 ec       	ldi	r24, 0xC8	; 200
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_sendCommand+0x388>
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	69 f7       	brne	.-38     	; 0x26da <LCD_sendCommand+0x37c>
    2700:	14 c0       	rjmp	.+40     	; 0x272a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_sendCommand+0x3c4>
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    272a:	e9 96       	adiw	r28, 0x39	; 57
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	e9 97       	sbiw	r28, 0x39	; 57
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	41 e0       	ldi	r20, 0x01	; 1
    2758:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a0 e8       	ldi	r26, 0x80	; 128
    2762:	bf e3       	ldi	r27, 0x3F	; 63
    2764:	8d ab       	std	Y+53, r24	; 0x35
    2766:	9e ab       	std	Y+54, r25	; 0x36
    2768:	af ab       	std	Y+55, r26	; 0x37
    276a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	6d a9       	ldd	r22, Y+53	; 0x35
    276e:	7e a9       	ldd	r23, Y+54	; 0x36
    2770:	8f a9       	ldd	r24, Y+55	; 0x37
    2772:	98 ad       	ldd	r25, Y+56	; 0x38
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a ef       	ldi	r20, 0xFA	; 250
    277a:	54 e4       	ldi	r21, 0x44	; 68
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	89 ab       	std	Y+49, r24	; 0x31
    2786:	9a ab       	std	Y+50, r25	; 0x32
    2788:	ab ab       	std	Y+51, r26	; 0x33
    278a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    278c:	69 a9       	ldd	r22, Y+49	; 0x31
    278e:	7a a9       	ldd	r23, Y+50	; 0x32
    2790:	8b a9       	ldd	r24, Y+51	; 0x33
    2792:	9c a9       	ldd	r25, Y+52	; 0x34
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e8       	ldi	r20, 0x80	; 128
    279a:	5f e3       	ldi	r21, 0x3F	; 63
    279c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_displayCharacter+0x72>
		__ticks = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	98 ab       	std	Y+48, r25	; 0x30
    27aa:	8f a7       	std	Y+47, r24	; 0x2f
    27ac:	3f c0       	rjmp	.+126    	; 0x282c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    27ae:	69 a9       	ldd	r22, Y+49	; 0x31
    27b0:	7a a9       	ldd	r23, Y+50	; 0x32
    27b2:	8b a9       	ldd	r24, Y+51	; 0x33
    27b4:	9c a9       	ldd	r25, Y+52	; 0x34
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	57 e4       	ldi	r21, 0x47	; 71
    27be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	4c f5       	brge	.+82     	; 0x2818 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c6:	6d a9       	ldd	r22, Y+53	; 0x35
    27c8:	7e a9       	ldd	r23, Y+54	; 0x36
    27ca:	8f a9       	ldd	r24, Y+55	; 0x37
    27cc:	98 ad       	ldd	r25, Y+56	; 0x38
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	98 ab       	std	Y+48, r25	; 0x30
    27ec:	8f a7       	std	Y+47, r24	; 0x2f
    27ee:	0f c0       	rjmp	.+30     	; 0x280e <LCD_displayCharacter+0xd2>
    27f0:	88 ec       	ldi	r24, 0xC8	; 200
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9e a7       	std	Y+46, r25	; 0x2e
    27f6:	8d a7       	std	Y+45, r24	; 0x2d
    27f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    27fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_displayCharacter+0xc0>
    2800:	9e a7       	std	Y+46, r25	; 0x2e
    2802:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	8f a5       	ldd	r24, Y+47	; 0x2f
    2806:	98 a9       	ldd	r25, Y+48	; 0x30
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	98 ab       	std	Y+48, r25	; 0x30
    280c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2810:	98 a9       	ldd	r25, Y+48	; 0x30
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	69 f7       	brne	.-38     	; 0x27f0 <LCD_displayCharacter+0xb4>
    2816:	14 c0       	rjmp	.+40     	; 0x2840 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2818:	69 a9       	ldd	r22, Y+49	; 0x31
    281a:	7a a9       	ldd	r23, Y+50	; 0x32
    281c:	8b a9       	ldd	r24, Y+51	; 0x33
    281e:	9c a9       	ldd	r25, Y+52	; 0x34
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	98 ab       	std	Y+48, r25	; 0x30
    282a:	8f a7       	std	Y+47, r24	; 0x2f
    282c:	8f a5       	ldd	r24, Y+47	; 0x2f
    282e:	98 a9       	ldd	r25, Y+48	; 0x30
    2830:	9c a7       	std	Y+44, r25	; 0x2c
    2832:	8b a7       	std	Y+43, r24	; 0x2b
    2834:	8b a5       	ldd	r24, Y+43	; 0x2b
    2836:	9c a5       	ldd	r25, Y+44	; 0x2c
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_displayCharacter+0xfc>
    283c:	9c a7       	std	Y+44, r25	; 0x2c
    283e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2840:	82 e0       	ldi	r24, 0x02	; 2
    2842:	61 e0       	ldi	r22, 0x01	; 1
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	a0 e8       	ldi	r26, 0x80	; 128
    2850:	bf e3       	ldi	r27, 0x3F	; 63
    2852:	8f a3       	std	Y+39, r24	; 0x27
    2854:	98 a7       	std	Y+40, r25	; 0x28
    2856:	a9 a7       	std	Y+41, r26	; 0x29
    2858:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285a:	6f a1       	ldd	r22, Y+39	; 0x27
    285c:	78 a5       	ldd	r23, Y+40	; 0x28
    285e:	89 a5       	ldd	r24, Y+41	; 0x29
    2860:	9a a5       	ldd	r25, Y+42	; 0x2a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8b a3       	std	Y+35, r24	; 0x23
    2874:	9c a3       	std	Y+36, r25	; 0x24
    2876:	ad a3       	std	Y+37, r26	; 0x25
    2878:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    287a:	6b a1       	ldd	r22, Y+35	; 0x23
    287c:	7c a1       	ldd	r23, Y+36	; 0x24
    287e:	8d a1       	ldd	r24, Y+37	; 0x25
    2880:	9e a1       	ldd	r25, Y+38	; 0x26
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	2c f4       	brge	.+10     	; 0x289c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9a a3       	std	Y+34, r25	; 0x22
    2898:	89 a3       	std	Y+33, r24	; 0x21
    289a:	3f c0       	rjmp	.+126    	; 0x291a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    289c:	6b a1       	ldd	r22, Y+35	; 0x23
    289e:	7c a1       	ldd	r23, Y+36	; 0x24
    28a0:	8d a1       	ldd	r24, Y+37	; 0x25
    28a2:	9e a1       	ldd	r25, Y+38	; 0x26
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	3f ef       	ldi	r19, 0xFF	; 255
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	57 e4       	ldi	r21, 0x47	; 71
    28ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	4c f5       	brge	.+82     	; 0x2906 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b4:	6f a1       	ldd	r22, Y+39	; 0x27
    28b6:	78 a5       	ldd	r23, Y+40	; 0x28
    28b8:	89 a5       	ldd	r24, Y+41	; 0x29
    28ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e2       	ldi	r20, 0x20	; 32
    28c2:	51 e4       	ldi	r21, 0x41	; 65
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9a a3       	std	Y+34, r25	; 0x22
    28da:	89 a3       	std	Y+33, r24	; 0x21
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <LCD_displayCharacter+0x1c0>
    28de:	88 ec       	ldi	r24, 0xC8	; 200
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	98 a3       	std	Y+32, r25	; 0x20
    28e4:	8f 8f       	std	Y+31, r24	; 0x1f
    28e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28e8:	98 a1       	ldd	r25, Y+32	; 0x20
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_displayCharacter+0x1ae>
    28ee:	98 a3       	std	Y+32, r25	; 0x20
    28f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f2:	89 a1       	ldd	r24, Y+33	; 0x21
    28f4:	9a a1       	ldd	r25, Y+34	; 0x22
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	9a a3       	std	Y+34, r25	; 0x22
    28fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fc:	89 a1       	ldd	r24, Y+33	; 0x21
    28fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f7       	brne	.-38     	; 0x28de <LCD_displayCharacter+0x1a2>
    2904:	14 c0       	rjmp	.+40     	; 0x292e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2906:	6b a1       	ldd	r22, Y+35	; 0x23
    2908:	7c a1       	ldd	r23, Y+36	; 0x24
    290a:	8d a1       	ldd	r24, Y+37	; 0x25
    290c:	9e a1       	ldd	r25, Y+38	; 0x26
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9a a3       	std	Y+34, r25	; 0x22
    2918:	89 a3       	std	Y+33, r24	; 0x21
    291a:	89 a1       	ldd	r24, Y+33	; 0x21
    291c:	9a a1       	ldd	r25, Y+34	; 0x22
    291e:	9e 8f       	std	Y+30, r25	; 0x1e
    2920:	8d 8f       	std	Y+29, r24	; 0x1d
    2922:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2924:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_displayCharacter+0x1ea>
    292a:	9e 8f       	std	Y+30, r25	; 0x1e
    292c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	69 ad       	ldd	r22, Y+57	; 0x39
    2932:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePort>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 e8       	ldi	r26, 0x80	; 128
    293c:	bf e3       	ldi	r27, 0x3F	; 63
    293e:	89 8f       	std	Y+25, r24	; 0x19
    2940:	9a 8f       	std	Y+26, r25	; 0x1a
    2942:	ab 8f       	std	Y+27, r26	; 0x1b
    2944:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2946:	69 8d       	ldd	r22, Y+25	; 0x19
    2948:	7a 8d       	ldd	r23, Y+26	; 0x1a
    294a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    294c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4a ef       	ldi	r20, 0xFA	; 250
    2954:	54 e4       	ldi	r21, 0x44	; 68
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8d 8b       	std	Y+21, r24	; 0x15
    2960:	9e 8b       	std	Y+22, r25	; 0x16
    2962:	af 8b       	std	Y+23, r26	; 0x17
    2964:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2966:	6d 89       	ldd	r22, Y+21	; 0x15
    2968:	7e 89       	ldd	r23, Y+22	; 0x16
    296a:	8f 89       	ldd	r24, Y+23	; 0x17
    296c:	98 8d       	ldd	r25, Y+24	; 0x18
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    297a:	88 23       	and	r24, r24
    297c:	2c f4       	brge	.+10     	; 0x2988 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9c 8b       	std	Y+20, r25	; 0x14
    2984:	8b 8b       	std	Y+19, r24	; 0x13
    2986:	3f c0       	rjmp	.+126    	; 0x2a06 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2988:	6d 89       	ldd	r22, Y+21	; 0x15
    298a:	7e 89       	ldd	r23, Y+22	; 0x16
    298c:	8f 89       	ldd	r24, Y+23	; 0x17
    298e:	98 8d       	ldd	r25, Y+24	; 0x18
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	3f ef       	ldi	r19, 0xFF	; 255
    2994:	4f e7       	ldi	r20, 0x7F	; 127
    2996:	57 e4       	ldi	r21, 0x47	; 71
    2998:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299c:	18 16       	cp	r1, r24
    299e:	4c f5       	brge	.+82     	; 0x29f2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a0:	69 8d       	ldd	r22, Y+25	; 0x19
    29a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e2       	ldi	r20, 0x20	; 32
    29ae:	51 e4       	ldi	r21, 0x41	; 65
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9c 8b       	std	Y+20, r25	; 0x14
    29c6:	8b 8b       	std	Y+19, r24	; 0x13
    29c8:	0f c0       	rjmp	.+30     	; 0x29e8 <LCD_displayCharacter+0x2ac>
    29ca:	88 ec       	ldi	r24, 0xC8	; 200
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	9a 8b       	std	Y+18, r25	; 0x12
    29d0:	89 8b       	std	Y+17, r24	; 0x11
    29d2:	89 89       	ldd	r24, Y+17	; 0x11
    29d4:	9a 89       	ldd	r25, Y+18	; 0x12
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <LCD_displayCharacter+0x29a>
    29da:	9a 8b       	std	Y+18, r25	; 0x12
    29dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29de:	8b 89       	ldd	r24, Y+19	; 0x13
    29e0:	9c 89       	ldd	r25, Y+20	; 0x14
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	9c 8b       	std	Y+20, r25	; 0x14
    29e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ea:	9c 89       	ldd	r25, Y+20	; 0x14
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	69 f7       	brne	.-38     	; 0x29ca <LCD_displayCharacter+0x28e>
    29f0:	14 c0       	rjmp	.+40     	; 0x2a1a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f2:	6d 89       	ldd	r22, Y+21	; 0x15
    29f4:	7e 89       	ldd	r23, Y+22	; 0x16
    29f6:	8f 89       	ldd	r24, Y+23	; 0x17
    29f8:	98 8d       	ldd	r25, Y+24	; 0x18
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9c 8b       	std	Y+20, r25	; 0x14
    2a04:	8b 8b       	std	Y+19, r24	; 0x13
    2a06:	8b 89       	ldd	r24, Y+19	; 0x13
    2a08:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0a:	98 8b       	std	Y+16, r25	; 0x10
    2a0c:	8f 87       	std	Y+15, r24	; 0x0f
    2a0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a10:	98 89       	ldd	r25, Y+16	; 0x10
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_displayCharacter+0x2d6>
    2a16:	98 8b       	std	Y+16, r25	; 0x10
    2a18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	61 e0       	ldi	r22, 0x01	; 1
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a0 e8       	ldi	r26, 0x80	; 128
    2a2a:	bf e3       	ldi	r27, 0x3F	; 63
    2a2c:	8b 87       	std	Y+11, r24	; 0x0b
    2a2e:	9c 87       	std	Y+12, r25	; 0x0c
    2a30:	ad 87       	std	Y+13, r26	; 0x0d
    2a32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4a ef       	ldi	r20, 0xFA	; 250
    2a42:	54 e4       	ldi	r21, 0x44	; 68
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	8f 83       	std	Y+7, r24	; 0x07
    2a4e:	98 87       	std	Y+8, r25	; 0x08
    2a50:	a9 87       	std	Y+9, r26	; 0x09
    2a52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a54:	6f 81       	ldd	r22, Y+7	; 0x07
    2a56:	78 85       	ldd	r23, Y+8	; 0x08
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	2c f4       	brge	.+10     	; 0x2a76 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
    2a74:	3f c0       	rjmp	.+126    	; 0x2af4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2a76:	6f 81       	ldd	r22, Y+7	; 0x07
    2a78:	78 85       	ldd	r23, Y+8	; 0x08
    2a7a:	89 85       	ldd	r24, Y+9	; 0x09
    2a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	4c f5       	brge	.+82     	; 0x2ae0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e2       	ldi	r20, 0x20	; 32
    2a9c:	51 e4       	ldi	r21, 0x41	; 65
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9e 83       	std	Y+6, r25	; 0x06
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
    2ab6:	0f c0       	rjmp	.+30     	; 0x2ad6 <LCD_displayCharacter+0x39a>
    2ab8:	88 ec       	ldi	r24, 0xC8	; 200
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9c 83       	std	Y+4, r25	; 0x04
    2abe:	8b 83       	std	Y+3, r24	; 0x03
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <LCD_displayCharacter+0x388>
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ace:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <LCD_displayCharacter+0x37c>
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae2:	78 85       	ldd	r23, Y+8	; 0x08
    2ae4:	89 85       	ldd	r24, Y+9	; 0x09
    2ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <LCD_displayCharacter+0x3c4>
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b08:	e9 96       	adiw	r28, 0x39	; 57
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <LCD_displayString+0x6>
    2b20:	0f 92       	push	r0
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	9b 83       	std	Y+3, r25	; 0x03
    2b28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b2a:	19 82       	std	Y+1, r1	; 0x01
    2b2c:	0e c0       	rjmp	.+28     	; 0x2b4a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	28 2f       	mov	r18, r24
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	9b 81       	ldd	r25, Y+3	; 0x03
    2b38:	fc 01       	movw	r30, r24
    2b3a:	e2 0f       	add	r30, r18
    2b3c:	f3 1f       	adc	r31, r19
    2b3e:	80 81       	ld	r24, Z
    2b40:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayCharacter>
		i++;
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	9b 81       	ldd	r25, Y+3	; 0x03
    2b54:	fc 01       	movw	r30, r24
    2b56:	e2 0f       	add	r30, r18
    2b58:	f3 1f       	adc	r31, r19
    2b5a:	80 81       	ld	r24, Z
    2b5c:	88 23       	and	r24, r24
    2b5e:	39 f7       	brne	.-50     	; 0x2b2e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <LCD_moveCursor+0x6>
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <LCD_moveCursor+0x8>
    2b74:	0f 92       	push	r0
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	8a 83       	std	Y+2, r24	; 0x02
    2b7c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	28 2f       	mov	r18, r24
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	3d 83       	std	Y+5, r19	; 0x05
    2b86:	2c 83       	std	Y+4, r18	; 0x04
    2b88:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b8c:	81 30       	cpi	r24, 0x01	; 1
    2b8e:	91 05       	cpc	r25, r1
    2b90:	c1 f0       	breq	.+48     	; 0x2bc2 <LCD_moveCursor+0x56>
    2b92:	2c 81       	ldd	r18, Y+4	; 0x04
    2b94:	3d 81       	ldd	r19, Y+5	; 0x05
    2b96:	22 30       	cpi	r18, 0x02	; 2
    2b98:	31 05       	cpc	r19, r1
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <LCD_moveCursor+0x3a>
    2b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	61 f0       	breq	.+24     	; 0x2bbc <LCD_moveCursor+0x50>
    2ba4:	19 c0       	rjmp	.+50     	; 0x2bd8 <LCD_moveCursor+0x6c>
    2ba6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba8:	3d 81       	ldd	r19, Y+5	; 0x05
    2baa:	22 30       	cpi	r18, 0x02	; 2
    2bac:	31 05       	cpc	r19, r1
    2bae:	69 f0       	breq	.+26     	; 0x2bca <LCD_moveCursor+0x5e>
    2bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb4:	83 30       	cpi	r24, 0x03	; 3
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	61 f0       	breq	.+24     	; 0x2bd2 <LCD_moveCursor+0x66>
    2bba:	0e c0       	rjmp	.+28     	; 0x2bd8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	0b c0       	rjmp	.+22     	; 0x2bd8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	80 5c       	subi	r24, 0xC0	; 192
    2bc6:	89 83       	std	Y+1, r24	; 0x01
    2bc8:	07 c0       	rjmp	.+14     	; 0x2bd8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	80 5f       	subi	r24, 0xF0	; 240
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	03 c0       	rjmp	.+6      	; 0x2bd8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	80 5b       	subi	r24, 0xB0	; 176
    2bd6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	80 68       	ori	r24, 0x80	; 128
    2bdc:	0e 94 af 11 	call	0x235e	; 0x235e <LCD_sendCommand>
}
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <LCD_displayStringRowColumn+0x6>
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <LCD_displayStringRowColumn+0x8>
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	89 83       	std	Y+1, r24	; 0x01
    2bfe:	6a 83       	std	Y+2, r22	; 0x02
    2c00:	5c 83       	std	Y+4, r21	; 0x04
    2c02:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	6a 81       	ldd	r22, Y+2	; 0x02
    2c08:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c10:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <LCD_displayString>
}
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	62 97       	sbiw	r28, 0x12	; 18
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	9a 8b       	std	Y+18, r25	; 0x12
    2c38:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c3a:	89 89       	ldd	r24, Y+17	; 0x11
    2c3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c3e:	9e 01       	movw	r18, r28
    2c40:	2f 5f       	subi	r18, 0xFF	; 255
    2c42:	3f 4f       	sbci	r19, 0xFF	; 255
    2c44:	b9 01       	movw	r22, r18
    2c46:	4a e0       	ldi	r20, 0x0A	; 10
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <itoa>
   LCD_displayString(buff); /* Display the string */
    2c4e:	ce 01       	movw	r24, r28
    2c50:	01 96       	adiw	r24, 0x01	; 1
    2c52:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <LCD_displayString>
}
    2c56:	62 96       	adiw	r28, 0x12	; 18
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	0e 94 af 11 	call	0x235e	; 0x235e <LCD_sendCommand>
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <PIR_init>:

/*
 * Description :
 * Initializes the PIR sensor by configuring the sensor pin as input.
 */
void PIR_init(void) {
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    /* Set the PIR sensor pin as input */
    GPIO_setupPinDirection(PIR_SENSOR_PORT, PIR_SENSOR_PIN, PIN_INPUT);
    2c84:	82 e0       	ldi	r24, 0x02	; 2
    2c86:	62 e0       	ldi	r22, 0x02	; 2
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_setupPinDirection>
}
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <PIR_getState>:
 * Description :
 * Returns the current state of the PIR sensor.
 * - 1: Motion detected
 * - 0: No motion detected
 */
uint8 PIR_getState(void) {
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	0f 92       	push	r0
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    /* Check if the PIR sensor pin is high (motion detected) */
    return (PIND & (1 << PIR_SENSOR_PIN)) ? 1 : 0;
    2c9e:	e0 e3       	ldi	r30, 0x30	; 48
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	84 70       	andi	r24, 0x04	; 4
    2caa:	90 70       	andi	r25, 0x00	; 0
    2cac:	19 82       	std	Y+1, r1	; 0x01
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	11 f0       	breq	.+4      	; 0x2cb6 <PIR_getState+0x22>
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <__vector_11>:

/***************************** TIMER0 **********************************/

/*interrupt service routine for timer0 OverFlow*/
ISR(TIMER0_OVF_vect)
{
    2cc0:	1f 92       	push	r1
    2cc2:	0f 92       	push	r0
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	0f 92       	push	r0
    2cc8:	11 24       	eor	r1, r1
    2cca:	2f 93       	push	r18
    2ccc:	3f 93       	push	r19
    2cce:	4f 93       	push	r20
    2cd0:	5f 93       	push	r21
    2cd2:	6f 93       	push	r22
    2cd4:	7f 93       	push	r23
    2cd6:	8f 93       	push	r24
    2cd8:	9f 93       	push	r25
    2cda:	af 93       	push	r26
    2cdc:	bf 93       	push	r27
    2cde:	ef 93       	push	r30
    2ce0:	ff 93       	push	r31
    2ce2:	df 93       	push	r29
    2ce4:	cf 93       	push	r28
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[0] != NULL_PTR)
    2cea:	80 91 42 01 	lds	r24, 0x0142
    2cee:	90 91 43 01 	lds	r25, 0x0143
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	29 f0       	breq	.+10     	; 0x2d00 <__vector_11+0x40>
	{
		g_Timers_callBackPtr[0]();
    2cf6:	e0 91 42 01 	lds	r30, 0x0142
    2cfa:	f0 91 43 01 	lds	r31, 0x0143
    2cfe:	09 95       	icall
	}
}
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	ff 91       	pop	r31
    2d06:	ef 91       	pop	r30
    2d08:	bf 91       	pop	r27
    2d0a:	af 91       	pop	r26
    2d0c:	9f 91       	pop	r25
    2d0e:	8f 91       	pop	r24
    2d10:	7f 91       	pop	r23
    2d12:	6f 91       	pop	r22
    2d14:	5f 91       	pop	r21
    2d16:	4f 91       	pop	r20
    2d18:	3f 91       	pop	r19
    2d1a:	2f 91       	pop	r18
    2d1c:	0f 90       	pop	r0
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	0f 90       	pop	r0
    2d22:	1f 90       	pop	r1
    2d24:	18 95       	reti

00002d26 <__vector_10>:
/*interrupt service routine for timer0 CTC*/
ISR(TIMER0_COMP_vect)
{
    2d26:	1f 92       	push	r1
    2d28:	0f 92       	push	r0
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	0f 92       	push	r0
    2d2e:	11 24       	eor	r1, r1
    2d30:	2f 93       	push	r18
    2d32:	3f 93       	push	r19
    2d34:	4f 93       	push	r20
    2d36:	5f 93       	push	r21
    2d38:	6f 93       	push	r22
    2d3a:	7f 93       	push	r23
    2d3c:	8f 93       	push	r24
    2d3e:	9f 93       	push	r25
    2d40:	af 93       	push	r26
    2d42:	bf 93       	push	r27
    2d44:	ef 93       	push	r30
    2d46:	ff 93       	push	r31
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[0] != NULL_PTR)
    2d50:	80 91 42 01 	lds	r24, 0x0142
    2d54:	90 91 43 01 	lds	r25, 0x0143
    2d58:	00 97       	sbiw	r24, 0x00	; 0
    2d5a:	29 f0       	breq	.+10     	; 0x2d66 <__vector_10+0x40>
	{
		g_Timers_callBackPtr[0]();
    2d5c:	e0 91 42 01 	lds	r30, 0x0142
    2d60:	f0 91 43 01 	lds	r31, 0x0143
    2d64:	09 95       	icall
	}
}
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	ff 91       	pop	r31
    2d6c:	ef 91       	pop	r30
    2d6e:	bf 91       	pop	r27
    2d70:	af 91       	pop	r26
    2d72:	9f 91       	pop	r25
    2d74:	8f 91       	pop	r24
    2d76:	7f 91       	pop	r23
    2d78:	6f 91       	pop	r22
    2d7a:	5f 91       	pop	r21
    2d7c:	4f 91       	pop	r20
    2d7e:	3f 91       	pop	r19
    2d80:	2f 91       	pop	r18
    2d82:	0f 90       	pop	r0
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	0f 90       	pop	r0
    2d88:	1f 90       	pop	r1
    2d8a:	18 95       	reti

00002d8c <__vector_9>:

/*************************** TIMER1 *******************************/

/*interrupt service routine for timer1 Overflow*/
ISR(TIMER1_OVF_vect)
{
    2d8c:	1f 92       	push	r1
    2d8e:	0f 92       	push	r0
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	0f 92       	push	r0
    2d94:	11 24       	eor	r1, r1
    2d96:	2f 93       	push	r18
    2d98:	3f 93       	push	r19
    2d9a:	4f 93       	push	r20
    2d9c:	5f 93       	push	r21
    2d9e:	6f 93       	push	r22
    2da0:	7f 93       	push	r23
    2da2:	8f 93       	push	r24
    2da4:	9f 93       	push	r25
    2da6:	af 93       	push	r26
    2da8:	bf 93       	push	r27
    2daa:	ef 93       	push	r30
    2dac:	ff 93       	push	r31
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[1] != NULL_PTR)
    2db6:	80 91 44 01 	lds	r24, 0x0144
    2dba:	90 91 45 01 	lds	r25, 0x0145
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	29 f0       	breq	.+10     	; 0x2dcc <__vector_9+0x40>
	{
		g_Timers_callBackPtr[1]();
    2dc2:	e0 91 44 01 	lds	r30, 0x0144
    2dc6:	f0 91 45 01 	lds	r31, 0x0145
    2dca:	09 95       	icall
	}
}
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	ff 91       	pop	r31
    2dd2:	ef 91       	pop	r30
    2dd4:	bf 91       	pop	r27
    2dd6:	af 91       	pop	r26
    2dd8:	9f 91       	pop	r25
    2dda:	8f 91       	pop	r24
    2ddc:	7f 91       	pop	r23
    2dde:	6f 91       	pop	r22
    2de0:	5f 91       	pop	r21
    2de2:	4f 91       	pop	r20
    2de4:	3f 91       	pop	r19
    2de6:	2f 91       	pop	r18
    2de8:	0f 90       	pop	r0
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	0f 90       	pop	r0
    2dee:	1f 90       	pop	r1
    2df0:	18 95       	reti

00002df2 <__vector_7>:

/*interrupt service routine for timer1 CTC*/
ISR(TIMER1_COMPA_vect)
{
    2df2:	1f 92       	push	r1
    2df4:	0f 92       	push	r0
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	0f 92       	push	r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	2f 93       	push	r18
    2dfe:	3f 93       	push	r19
    2e00:	4f 93       	push	r20
    2e02:	5f 93       	push	r21
    2e04:	6f 93       	push	r22
    2e06:	7f 93       	push	r23
    2e08:	8f 93       	push	r24
    2e0a:	9f 93       	push	r25
    2e0c:	af 93       	push	r26
    2e0e:	bf 93       	push	r27
    2e10:	ef 93       	push	r30
    2e12:	ff 93       	push	r31
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[1] != NULL_PTR)
    2e1c:	80 91 44 01 	lds	r24, 0x0144
    2e20:	90 91 45 01 	lds	r25, 0x0145
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	29 f0       	breq	.+10     	; 0x2e32 <__vector_7+0x40>
	{
		g_Timers_callBackPtr[1]();
    2e28:	e0 91 44 01 	lds	r30, 0x0144
    2e2c:	f0 91 45 01 	lds	r31, 0x0145
    2e30:	09 95       	icall
	}
}
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	ff 91       	pop	r31
    2e38:	ef 91       	pop	r30
    2e3a:	bf 91       	pop	r27
    2e3c:	af 91       	pop	r26
    2e3e:	9f 91       	pop	r25
    2e40:	8f 91       	pop	r24
    2e42:	7f 91       	pop	r23
    2e44:	6f 91       	pop	r22
    2e46:	5f 91       	pop	r21
    2e48:	4f 91       	pop	r20
    2e4a:	3f 91       	pop	r19
    2e4c:	2f 91       	pop	r18
    2e4e:	0f 90       	pop	r0
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	0f 90       	pop	r0
    2e54:	1f 90       	pop	r1
    2e56:	18 95       	reti

00002e58 <__vector_5>:

/************************** TIMER2 **************************/

/*interrupt service routine for timer2 Overflow*/
ISR(TIMER2_OVF_vect)
{
    2e58:	1f 92       	push	r1
    2e5a:	0f 92       	push	r0
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	0f 92       	push	r0
    2e60:	11 24       	eor	r1, r1
    2e62:	2f 93       	push	r18
    2e64:	3f 93       	push	r19
    2e66:	4f 93       	push	r20
    2e68:	5f 93       	push	r21
    2e6a:	6f 93       	push	r22
    2e6c:	7f 93       	push	r23
    2e6e:	8f 93       	push	r24
    2e70:	9f 93       	push	r25
    2e72:	af 93       	push	r26
    2e74:	bf 93       	push	r27
    2e76:	ef 93       	push	r30
    2e78:	ff 93       	push	r31
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[2] != NULL_PTR)
    2e82:	80 91 46 01 	lds	r24, 0x0146
    2e86:	90 91 47 01 	lds	r25, 0x0147
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	29 f0       	breq	.+10     	; 0x2e98 <__vector_5+0x40>
	{
		g_Timers_callBackPtr[2]();
    2e8e:	e0 91 46 01 	lds	r30, 0x0146
    2e92:	f0 91 47 01 	lds	r31, 0x0147
    2e96:	09 95       	icall
	}
}
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	ff 91       	pop	r31
    2e9e:	ef 91       	pop	r30
    2ea0:	bf 91       	pop	r27
    2ea2:	af 91       	pop	r26
    2ea4:	9f 91       	pop	r25
    2ea6:	8f 91       	pop	r24
    2ea8:	7f 91       	pop	r23
    2eaa:	6f 91       	pop	r22
    2eac:	5f 91       	pop	r21
    2eae:	4f 91       	pop	r20
    2eb0:	3f 91       	pop	r19
    2eb2:	2f 91       	pop	r18
    2eb4:	0f 90       	pop	r0
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	0f 90       	pop	r0
    2eba:	1f 90       	pop	r1
    2ebc:	18 95       	reti

00002ebe <__vector_4>:

/*interrupt service routine for timer2 CTC*/
ISR(TIMER2_COMP_vect)
{
    2ebe:	1f 92       	push	r1
    2ec0:	0f 92       	push	r0
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	0f 92       	push	r0
    2ec6:	11 24       	eor	r1, r1
    2ec8:	2f 93       	push	r18
    2eca:	3f 93       	push	r19
    2ecc:	4f 93       	push	r20
    2ece:	5f 93       	push	r21
    2ed0:	6f 93       	push	r22
    2ed2:	7f 93       	push	r23
    2ed4:	8f 93       	push	r24
    2ed6:	9f 93       	push	r25
    2ed8:	af 93       	push	r26
    2eda:	bf 93       	push	r27
    2edc:	ef 93       	push	r30
    2ede:	ff 93       	push	r31
    2ee0:	df 93       	push	r29
    2ee2:	cf 93       	push	r28
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
	if(g_Timers_callBackPtr[2] != NULL_PTR)
    2ee8:	80 91 46 01 	lds	r24, 0x0146
    2eec:	90 91 47 01 	lds	r25, 0x0147
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	29 f0       	breq	.+10     	; 0x2efe <__vector_4+0x40>
	{
		g_Timers_callBackPtr[2]();
    2ef4:	e0 91 46 01 	lds	r30, 0x0146
    2ef8:	f0 91 47 01 	lds	r31, 0x0147
    2efc:	09 95       	icall
	}
}
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	ff 91       	pop	r31
    2f04:	ef 91       	pop	r30
    2f06:	bf 91       	pop	r27
    2f08:	af 91       	pop	r26
    2f0a:	9f 91       	pop	r25
    2f0c:	8f 91       	pop	r24
    2f0e:	7f 91       	pop	r23
    2f10:	6f 91       	pop	r22
    2f12:	5f 91       	pop	r21
    2f14:	4f 91       	pop	r20
    2f16:	3f 91       	pop	r19
    2f18:	2f 91       	pop	r18
    2f1a:	0f 90       	pop	r0
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	0f 90       	pop	r0
    2f20:	1f 90       	pop	r1
    2f22:	18 95       	reti

00002f24 <Timer_setCallBack>:
/*
 * Description :
 * A function to set Call back for timers
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	00 d0       	rcall	.+0      	; 0x2f2a <Timer_setCallBack+0x6>
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <Timer_setCallBack+0x8>
    2f2c:	0f 92       	push	r0
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	9a 83       	std	Y+2, r25	; 0x02
    2f34:	89 83       	std	Y+1, r24	; 0x01
    2f36:	6b 83       	std	Y+3, r22	; 0x03

	switch(a_timer_ID)
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	28 2f       	mov	r18, r24
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	3d 83       	std	Y+5, r19	; 0x05
    2f40:	2c 83       	std	Y+4, r18	; 0x04
    2f42:	8c 81       	ldd	r24, Y+4	; 0x04
    2f44:	9d 81       	ldd	r25, Y+5	; 0x05
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	91 05       	cpc	r25, r1
    2f4a:	81 f0       	breq	.+32     	; 0x2f6c <Timer_setCallBack+0x48>
    2f4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f50:	22 30       	cpi	r18, 0x02	; 2
    2f52:	31 05       	cpc	r19, r1
    2f54:	91 f0       	breq	.+36     	; 0x2f7a <Timer_setCallBack+0x56>
    2f56:	8c 81       	ldd	r24, Y+4	; 0x04
    2f58:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	a1 f4       	brne	.+40     	; 0x2f86 <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer0 */
		g_Timers_callBackPtr[0]= a_ptr;
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	9a 81       	ldd	r25, Y+2	; 0x02
    2f62:	90 93 43 01 	sts	0x0143, r25
    2f66:	80 93 42 01 	sts	0x0142, r24
    2f6a:	0d c0       	rjmp	.+26     	; 0x2f86 <Timer_setCallBack+0x62>
		break;

	case TIMER1_ID:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer1 */
		g_Timers_callBackPtr[1] = a_ptr;
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f70:	90 93 45 01 	sts	0x0145, r25
    2f74:	80 93 44 01 	sts	0x0144, r24
    2f78:	06 c0       	rjmp	.+12     	; 0x2f86 <Timer_setCallBack+0x62>
		break;

	case TIMER2_ID:
		/* Save the address of the Call back function in a global Ptr to Function variable for timer2 */
		g_Timers_callBackPtr[2] = a_ptr;
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	90 93 47 01 	sts	0x0147, r25
    2f82:	80 93 46 01 	sts	0x0146, r24
		break;
	}

}
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	cf 91       	pop	r28
    2f92:	df 91       	pop	r29
    2f94:	08 95       	ret

00002f96 <Timer_init>:
/*
 * Description :
 * A function to initialize the timers
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	2a 97       	sbiw	r28, 0x0a	; 10
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	9a 83       	std	Y+2, r25	; 0x02
    2fac:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    2fae:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb2:	84 81       	ldd	r24, Z+4	; 0x04
    2fb4:	28 2f       	mov	r18, r24
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	3a 87       	std	Y+10, r19	; 0x0a
    2fba:	29 87       	std	Y+9, r18	; 0x09
    2fbc:	89 85       	ldd	r24, Y+9	; 0x09
    2fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc0:	81 30       	cpi	r24, 0x01	; 1
    2fc2:	91 05       	cpc	r25, r1
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <Timer_init+0x32>
    2fc6:	7d c0       	rjmp	.+250    	; 0x30c2 <Timer_init+0x12c>
    2fc8:	29 85       	ldd	r18, Y+9	; 0x09
    2fca:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fcc:	22 30       	cpi	r18, 0x02	; 2
    2fce:	31 05       	cpc	r19, r1
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <Timer_init+0x3e>
    2fd2:	fd c0       	rjmp	.+506    	; 0x31ce <Timer_init+0x238>
    2fd4:	89 85       	ldd	r24, Y+9	; 0x09
    2fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	09 f0       	breq	.+2      	; 0x2fde <Timer_init+0x48>
    2fdc:	69 c1       	rjmp	.+722    	; 0x32b0 <Timer_init+0x31a>
	{

	case TIMER0_ID:
		/*Clear registers of Timer0 And Interrupts Modules Enable before any access to prevent any mistakes
		 * on changing the mode of same timer as you might forget to use deinit() before init() one more*/
		TIMER0_TCCR0_REG.Byte=0;
    2fde:	e3 e5       	ldi	r30, 0x53	; 83
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	10 82       	st	Z, r1
		TIMER0_TCNT0_REG.Byte=0;
    2fe4:	e2 e5       	ldi	r30, 0x52	; 82
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	10 82       	st	Z, r1
		TIMER0_OCR0_REG.Byte=0;
    2fea:	ec e5       	ldi	r30, 0x5C	; 92
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer0 (OCIE0=0,TOIE0=0)*/
		TIMER_TIMSK_REG.Bits.OCIE0_Bit=0;
    2ff0:	e9 e5       	ldi	r30, 0x59	; 89
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	8d 7f       	andi	r24, 0xFD	; 253
    2ff8:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE0_Bit=0;
    2ffa:	e9 e5       	ldi	r30, 0x59	; 89
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	8e 7f       	andi	r24, 0xFE	; 254
    3002:	80 83       	st	Z, r24


		/*Set Intial Value*/
		TIMER0_TCNT0_REG.Byte=((Config_Ptr->timer_InitialValue))&0x00FF;
    3004:	a2 e5       	ldi	r26, 0x52	; 82
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e9 81       	ldd	r30, Y+1	; 0x01
    300a:	fa 81       	ldd	r31, Y+2	; 0x02
    300c:	80 81       	ld	r24, Z
    300e:	91 81       	ldd	r25, Z+1	; 0x01
    3010:	8c 93       	st	X, r24
		/*
		 * TIMER Prescaler value for Timer0 in TCCR0 Register
		 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
		 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
		 */
		TIMER0_TCCR0_REG.Byte=((TIMER0_TCCR0_REG.Byte&0xF8)|(Config_Ptr->timer_clock));
    3012:	a3 e5       	ldi	r26, 0x53	; 83
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	e3 e5       	ldi	r30, 0x53	; 83
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	98 2f       	mov	r25, r24
    301e:	98 7f       	andi	r25, 0xF8	; 248
    3020:	e9 81       	ldd	r30, Y+1	; 0x01
    3022:	fa 81       	ldd	r31, Y+2	; 0x02
    3024:	85 81       	ldd	r24, Z+5	; 0x05
    3026:	89 2b       	or	r24, r25
    3028:	8c 93       	st	X, r24
		 * Compare output mode:
		 * 		OC0 disconnected
		 *      Clear COM00 bit in TCCR0 register
		 *      Clear COM01 bit in TCCR0 register
		 */
		TIMER0_TCCR0_REG.Bits.COM00_Bit=0;
    302a:	e3 e5       	ldi	r30, 0x53	; 83
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	8f 7e       	andi	r24, 0xEF	; 239
    3032:	80 83       	st	Z, r24
		TIMER0_TCCR0_REG.Bits.COM01_Bit=0;
    3034:	e3 e5       	ldi	r30, 0x53	; 83
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	8f 7d       	andi	r24, 0xDF	; 223
    303c:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    303e:	e9 81       	ldd	r30, Y+1	; 0x01
    3040:	fa 81       	ldd	r31, Y+2	; 0x02
    3042:	86 81       	ldd	r24, Z+6	; 0x06
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	38 87       	std	Y+8, r19	; 0x08
    304a:	2f 83       	std	Y+7, r18	; 0x07
    304c:	8f 81       	ldd	r24, Y+7	; 0x07
    304e:	98 85       	ldd	r25, Y+8	; 0x08
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	31 f0       	breq	.+12     	; 0x3060 <Timer_init+0xca>
    3054:	2f 81       	ldd	r18, Y+7	; 0x07
    3056:	38 85       	ldd	r19, Y+8	; 0x08
    3058:	21 30       	cpi	r18, 0x01	; 1
    305a:	31 05       	cpc	r19, r1
    305c:	b1 f0       	breq	.+44     	; 0x308a <Timer_init+0xf4>
    305e:	28 c1       	rjmp	.+592    	; 0x32b0 <Timer_init+0x31a>
			/*
			 * Normal (Overflow) mode:
			 * 		Clear WGM00 bit in TCCR0 register
			 *      Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_TCCR0_REG.Bits.WGM00_Bit=0;
    3060:	e3 e5       	ldi	r30, 0x53	; 83
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	8f 7b       	andi	r24, 0xBF	; 191
    3068:	80 83       	st	Z, r24
			TIMER0_TCCR0_REG.Bits.WGM01_Bit=0;
    306a:	e3 e5       	ldi	r30, 0x53	; 83
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	87 7f       	andi	r24, 0xF7	; 247
    3072:	80 83       	st	Z, r24

			/* SET FOC0 in any mode except PWM mode */
			TIMER0_TCCR0_REG.Bits.FOC0_Bit=1;
    3074:	e3 e5       	ldi	r30, 0x53	; 83
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	80 68       	ori	r24, 0x80	; 128
    307c:	80 83       	st	Z, r24

			/* Enable Timer0 overflow interrupt */
			TIMER_TIMSK_REG.Bits.TOIE0_Bit=1;
    307e:	e9 e5       	ldi	r30, 0x59	; 89
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	81 60       	ori	r24, 0x01	; 1
    3086:	80 83       	st	Z, r24
    3088:	13 c1       	rjmp	.+550    	; 0x32b0 <Timer_init+0x31a>
			/*
			 * Compare mode:
			 * 		Clear WGM00 bit in TCCR0 register
			 *      SET WGM01 bit in TCCR0 register
			 */
			TIMER0_TCCR0_REG.Bits.WGM00_Bit=0;
    308a:	e3 e5       	ldi	r30, 0x53	; 83
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	8f 7b       	andi	r24, 0xBF	; 191
    3092:	80 83       	st	Z, r24
			TIMER0_TCCR0_REG.Bits.WGM01_Bit=1;
    3094:	e3 e5       	ldi	r30, 0x53	; 83
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	88 60       	ori	r24, 0x08	; 8
    309c:	80 83       	st	Z, r24

			/* SET FOC0 in any mode except PWM mode */
			TIMER0_TCCR0_REG.Bits.FOC0_Bit=1;
    309e:	e3 e5       	ldi	r30, 0x53	; 83
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	80 68       	ori	r24, 0x80	; 128
    30a6:	80 83       	st	Z, r24

			/* set the compare value in register OCR0 & with 0xFF to make sure that it doesn't exceed 8 bits */
			TIMER0_OCR0_REG.Byte=((Config_Ptr->timer_compare_MatchValue))&0x00FF;
    30a8:	ac e5       	ldi	r26, 0x5C	; 92
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e9 81       	ldd	r30, Y+1	; 0x01
    30ae:	fa 81       	ldd	r31, Y+2	; 0x02
    30b0:	82 81       	ldd	r24, Z+2	; 0x02
    30b2:	93 81       	ldd	r25, Z+3	; 0x03
    30b4:	8c 93       	st	X, r24

			/* Enable Timer0 compare match interrupt*/
			TIMER_TIMSK_REG.Bits.OCIE0_Bit=1;
    30b6:	e9 e5       	ldi	r30, 0x59	; 89
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	82 60       	ori	r24, 0x02	; 2
    30be:	80 83       	st	Z, r24
    30c0:	f7 c0       	rjmp	.+494    	; 0x32b0 <Timer_init+0x31a>

		case TIMER1_ID:
			/*Clear registers of Timer1 And Interrupts Modules Enables before any access to prevent any mistakes
			* on changing the mode of same timer as you might forget to use deinit() before init() one more
			* & with 0xC3 to Clear 4 bits of Interrupt modules Enables for timer1 in TIMSK*/
			TIMER1_TCCR1A_REG.Byte=0;
    30c2:	ef e4       	ldi	r30, 0x4F	; 79
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	10 82       	st	Z, r1
			TIMER1_TCCR1B_REG.Byte=0;
    30c8:	ee e4       	ldi	r30, 0x4E	; 78
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	10 82       	st	Z, r1
			TIMER1_TCNT1_REG.TwoBytes=0;
    30ce:	ec e4       	ldi	r30, 0x4C	; 76
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	11 82       	std	Z+1, r1	; 0x01
    30d4:	10 82       	st	Z, r1
			TIMER1_OCR1A_REG.TwoBytes=0;
    30d6:	ea e4       	ldi	r30, 0x4A	; 74
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	11 82       	std	Z+1, r1	; 0x01
    30dc:	10 82       	st	Z, r1

			/*Clear all Interrupt modules Enable of Timer1 (TICIE1=0,OCIE1A=0,OCIE1B=0,TOIE1=0)*/
			TIMER_TIMSK_REG.Byte&=0xC3;
    30de:	a9 e5       	ldi	r26, 0x59	; 89
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e9 e5       	ldi	r30, 0x59	; 89
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	83 7c       	andi	r24, 0xC3	; 195
    30ea:	8c 93       	st	X, r24

			/*Set Intial Value*/
			TIMER1_TCNT1_REG.TwoBytes=(Config_Ptr->timer_InitialValue);
    30ec:	ac e4       	ldi	r26, 0x4C	; 76
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e9 81       	ldd	r30, Y+1	; 0x01
    30f2:	fa 81       	ldd	r31, Y+2	; 0x02
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	11 96       	adiw	r26, 0x01	; 1
    30fa:	9c 93       	st	X, r25
    30fc:	8e 93       	st	-X, r24
			/*
			 * TIMER Prescaler value for Timer1 in TCCR1B Register
			 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
			 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
			 */
			TIMER1_TCCR1B_REG.Byte=(TIMER1_TCCR1B_REG.Byte&0xF8)|(Config_Ptr->timer_clock);
    30fe:	ae e4       	ldi	r26, 0x4E	; 78
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	ee e4       	ldi	r30, 0x4E	; 78
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	98 2f       	mov	r25, r24
    310a:	98 7f       	andi	r25, 0xF8	; 248
    310c:	e9 81       	ldd	r30, Y+1	; 0x01
    310e:	fa 81       	ldd	r31, Y+2	; 0x02
    3110:	85 81       	ldd	r24, Z+5	; 0x05
    3112:	89 2b       	or	r24, r25
    3114:	8c 93       	st	X, r24
			 * Compare mode:
			 * 		OC1A/OC1B disconnected
			 *      Clear COM1A0/COM1A1 bits in TCCR1A register
			 *      Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_TCCR1A_REG.Byte&=0x0F;
    3116:	af e4       	ldi	r26, 0x4F	; 79
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	ef e4       	ldi	r30, 0x4F	; 79
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	8f 70       	andi	r24, 0x0F	; 15
    3122:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode)
    3124:	e9 81       	ldd	r30, Y+1	; 0x01
    3126:	fa 81       	ldd	r31, Y+2	; 0x02
    3128:	86 81       	ldd	r24, Z+6	; 0x06
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	3e 83       	std	Y+6, r19	; 0x06
    3130:	2d 83       	std	Y+5, r18	; 0x05
    3132:	8d 81       	ldd	r24, Y+5	; 0x05
    3134:	9e 81       	ldd	r25, Y+6	; 0x06
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	31 f0       	breq	.+12     	; 0x3146 <Timer_init+0x1b0>
    313a:	2d 81       	ldd	r18, Y+5	; 0x05
    313c:	3e 81       	ldd	r19, Y+6	; 0x06
    313e:	21 30       	cpi	r18, 0x01	; 1
    3140:	31 05       	cpc	r19, r1
    3142:	d9 f0       	breq	.+54     	; 0x317a <Timer_init+0x1e4>
    3144:	b5 c0       	rjmp	.+362    	; 0x32b0 <Timer_init+0x31a>
				/*
				 * Normal Overflow mode:
				 * 		Clear WGM10/WMG11 bit in TCCR1A register
				 *      Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_TCCR1A_REG.Bits.WGM10_Bit=0;
    3146:	ef e4       	ldi	r30, 0x4F	; 79
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	8e 7f       	andi	r24, 0xFE	; 254
    314e:	80 83       	st	Z, r24
				TIMER1_TCCR1A_REG.Bits.WGM11_Bit=0;
    3150:	ef e4       	ldi	r30, 0x4F	; 79
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	8d 7f       	andi	r24, 0xFD	; 253
    3158:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM12_Bit=0;
    315a:	ee e4       	ldi	r30, 0x4E	; 78
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	87 7f       	andi	r24, 0xF7	; 247
    3162:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM13_Bit=0;
    3164:	ee e4       	ldi	r30, 0x4E	; 78
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	8f 7e       	andi	r24, 0xEF	; 239
    316c:	80 83       	st	Z, r24

				/* Enable Timer1 overflow interrupt */
				TIMER_TIMSK_REG.Bits.TOIE1_Bit=1;
    316e:	e9 e5       	ldi	r30, 0x59	; 89
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	84 60       	ori	r24, 0x04	; 4
    3176:	80 83       	st	Z, r24
    3178:	9b c0       	rjmp	.+310    	; 0x32b0 <Timer_init+0x31a>
				 *  Compare mode:
				 *  	Clear WGM10/WGM11 bits in TCCR1A register
				 *      Set WGM12 bit in TCCR1B register
				 *      Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_TCCR1A_REG.Byte&=0xFC;
    317a:	af e4       	ldi	r26, 0x4F	; 79
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	ef e4       	ldi	r30, 0x4F	; 79
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	8c 7f       	andi	r24, 0xFC	; 252
    3186:	8c 93       	st	X, r24
				TIMER1_TCCR1B_REG.Bits.WGM12_Bit=1;
    3188:	ee e4       	ldi	r30, 0x4E	; 78
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	88 60       	ori	r24, 0x08	; 8
    3190:	80 83       	st	Z, r24
				TIMER1_TCCR1B_REG.Bits.WGM13_Bit=0;
    3192:	ee e4       	ldi	r30, 0x4E	; 78
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	8f 7e       	andi	r24, 0xEF	; 239
    319a:	80 83       	st	Z, r24

				/* SET FOC1A/FOC1B in any mode except PWM mode */
				TIMER1_TCCR1A_REG.Bits.FOC1A_Bit=1;
    319c:	ef e4       	ldi	r30, 0x4F	; 79
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	84 60       	ori	r24, 0x04	; 4
    31a4:	80 83       	st	Z, r24
				TIMER1_TCCR1A_REG.Bits.FOC1B_Bit=1;
    31a6:	ef e4       	ldi	r30, 0x4F	; 79
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	88 60       	ori	r24, 0x08	; 8
    31ae:	80 83       	st	Z, r24

				/* set the compare value in register OCR1A*/
				TIMER1_OCR1A_REG.TwoBytes = (Config_Ptr->timer_compare_MatchValue);
    31b0:	aa e4       	ldi	r26, 0x4A	; 74
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e9 81       	ldd	r30, Y+1	; 0x01
    31b6:	fa 81       	ldd	r31, Y+2	; 0x02
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	11 96       	adiw	r26, 0x01	; 1
    31be:	9c 93       	st	X, r25
    31c0:	8e 93       	st	-X, r24

				/* Enable Timer1 compare match module interrupt*/
				TIMER_TIMSK_REG.Bits.OCIE1A_Bit=1;
    31c2:	e9 e5       	ldi	r30, 0x59	; 89
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	80 61       	ori	r24, 0x10	; 16
    31ca:	80 83       	st	Z, r24
    31cc:	71 c0       	rjmp	.+226    	; 0x32b0 <Timer_init+0x31a>

			case TIMER2_ID:

				/*Clear registers of Timer2 And Interrupts Modules Enable before any access to prevent any mistakes
				 * on changing the mode of same timer as you might forget to use deinit() before init() one more*/
				TIMER2_TCCR2_REG.Byte=0;
    31ce:	e5 e4       	ldi	r30, 0x45	; 69
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	10 82       	st	Z, r1
				TIMER2_TCNT2_REG.Byte=0;
    31d4:	e4 e4       	ldi	r30, 0x44	; 68
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	10 82       	st	Z, r1
				TIMER2_OCR2_REG.Byte=0;
    31da:	e3 e4       	ldi	r30, 0x43	; 67
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	10 82       	st	Z, r1

				/*Clear all Interrupt modules Enable of Timer2 (OCIE2=0,TOIE2=0)*/
				TIMER_TIMSK_REG.Bits.OCIE2_Bit=0;
    31e0:	e9 e5       	ldi	r30, 0x59	; 89
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	8f 77       	andi	r24, 0x7F	; 127
    31e8:	80 83       	st	Z, r24
				TIMER_TIMSK_REG.Bits.TOIE2_Bit=0;
    31ea:	e9 e5       	ldi	r30, 0x59	; 89
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	8f 7b       	andi	r24, 0xBF	; 191
    31f2:	80 83       	st	Z, r24

				/*Set Intial Value & with 0xFF to make sure that it doesn't exceed 8 bits */
				TIMER2_TCNT2_REG.Byte=((Config_Ptr->timer_InitialValue))&0x00FF;
    31f4:	a4 e4       	ldi	r26, 0x44	; 68
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	80 81       	ld	r24, Z
    31fe:	91 81       	ldd	r25, Z+1	; 0x01
    3200:	8c 93       	st	X, r24
				/*
				 * TIMER2 Prescaler value for Timer0 in TCCR2 Register
				 * insert the required clock value in the first three bits (CS20, CS21 and CS22)
				 * 0XF8 to make sure that the least 3-bits in TCCR2 register=0
				 */
				TIMER2_TCCR2_REG.Byte=((TIMER2_TCCR2_REG.Byte&0xF8)|(Config_Ptr->timer_clock));
    3202:	a5 e4       	ldi	r26, 0x45	; 69
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e5 e4       	ldi	r30, 0x45	; 69
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	98 2f       	mov	r25, r24
    320e:	98 7f       	andi	r25, 0xF8	; 248
    3210:	e9 81       	ldd	r30, Y+1	; 0x01
    3212:	fa 81       	ldd	r31, Y+2	; 0x02
    3214:	85 81       	ldd	r24, Z+5	; 0x05
    3216:	89 2b       	or	r24, r25
    3218:	8c 93       	st	X, r24
				 *  Compare mode:
				 *  	OC2 disconnected
				 *      Clear COM20 bit in TCCR2 register
				 *      Clear COM21 bit in TCCR2 register
				 */
				TIMER2_TCCR2_REG.Bits.COM20_Bit=0;
    321a:	e5 e4       	ldi	r30, 0x45	; 69
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	8f 7e       	andi	r24, 0xEF	; 239
    3222:	80 83       	st	Z, r24
				TIMER2_TCCR2_REG.Bits.COM21_Bit=0;
    3224:	e5 e4       	ldi	r30, 0x45	; 69
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	8f 7d       	andi	r24, 0xDF	; 223
    322c:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    322e:	e9 81       	ldd	r30, Y+1	; 0x01
    3230:	fa 81       	ldd	r31, Y+2	; 0x02
    3232:	86 81       	ldd	r24, Z+6	; 0x06
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	3c 83       	std	Y+4, r19	; 0x04
    323a:	2b 83       	std	Y+3, r18	; 0x03
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	9c 81       	ldd	r25, Y+4	; 0x04
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	31 f0       	breq	.+12     	; 0x3250 <Timer_init+0x2ba>
    3244:	2b 81       	ldd	r18, Y+3	; 0x03
    3246:	3c 81       	ldd	r19, Y+4	; 0x04
    3248:	21 30       	cpi	r18, 0x01	; 1
    324a:	31 05       	cpc	r19, r1
    324c:	b1 f0       	breq	.+44     	; 0x327a <Timer_init+0x2e4>
    324e:	30 c0       	rjmp	.+96     	; 0x32b0 <Timer_init+0x31a>
					/*
					 * Normal Overflow mode:
					 * 		Clear WGM20 bit in TCCR2 register
					 *      Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_TCCR2_REG.Bits.WGM20_Bit=0;
    3250:	e5 e4       	ldi	r30, 0x45	; 69
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	8f 7b       	andi	r24, 0xBF	; 191
    3258:	80 83       	st	Z, r24
					TIMER2_TCCR2_REG.Bits.WGM21_Bit=0;
    325a:	e5 e4       	ldi	r30, 0x45	; 69
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	87 7f       	andi	r24, 0xF7	; 247
    3262:	80 83       	st	Z, r24

					/* SET FOC2 in any mode except PWM mode */
					TIMER2_TCCR2_REG.Bits.FOC2_Bit=1;
    3264:	e5 e4       	ldi	r30, 0x45	; 69
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	80 81       	ld	r24, Z
    326a:	80 68       	ori	r24, 0x80	; 128
    326c:	80 83       	st	Z, r24

					/* Enable Timer2 overflow interrupt */
					TIMER_TIMSK_REG.Bits.TOIE2_Bit=1;
    326e:	e9 e5       	ldi	r30, 0x59	; 89
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	80 64       	ori	r24, 0x40	; 64
    3276:	80 83       	st	Z, r24
    3278:	1b c0       	rjmp	.+54     	; 0x32b0 <Timer_init+0x31a>
					/*
					 *  Compare mode:
					 *  	Clear WGM20 bit in TCCR2 register
					 *      SET WGM21 bit in TCCR2 register
					 */
					TIMER2_TCCR2_REG.Bits.WGM20_Bit=0;
    327a:	e5 e4       	ldi	r30, 0x45	; 69
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	8f 7b       	andi	r24, 0xBF	; 191
    3282:	80 83       	st	Z, r24
					TIMER2_TCCR2_REG.Bits.WGM21_Bit=1;
    3284:	e5 e4       	ldi	r30, 0x45	; 69
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	88 60       	ori	r24, 0x08	; 8
    328c:	80 83       	st	Z, r24

					/* SET FOC2 in any mode except PWM mode */
					TIMER2_TCCR2_REG.Bits.FOC2_Bit=1;
    328e:	e5 e4       	ldi	r30, 0x45	; 69
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	80 68       	ori	r24, 0x80	; 128
    3296:	80 83       	st	Z, r24

					/* set the compare value in register OCR2 & with 0xFF to make sure that it doesn't exceed 8 bits */
					TIMER2_OCR2_REG.Byte=((Config_Ptr->timer_compare_MatchValue))&0x00FF;
    3298:	a3 e4       	ldi	r26, 0x43	; 67
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e9 81       	ldd	r30, Y+1	; 0x01
    329e:	fa 81       	ldd	r31, Y+2	; 0x02
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	8c 93       	st	X, r24

					/* Enable Timer2 compare match interrupt*/
					TIMER_TIMSK_REG.Bits.OCIE2_Bit=1;
    32a6:	e9 e5       	ldi	r30, 0x59	; 89
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	80 68       	ori	r24, 0x80	; 128
    32ae:	80 83       	st	Z, r24

				break; /*End of Timer2 case*/

	}/*End of the outer Super switch case*/

}/*End of the Timer_init*/
    32b0:	2a 96       	adiw	r28, 0x0a	; 10
    32b2:	0f b6       	in	r0, 0x3f	; 63
    32b4:	f8 94       	cli
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	cd bf       	out	0x3d, r28	; 61
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <Timer_deInit>:
/*
 * Description :
 * A function to Deinitialize the timers
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    32c2:	df 93       	push	r29
    32c4:	cf 93       	push	r28
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <Timer_deInit+0x6>
    32c8:	0f 92       	push	r0
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	3b 83       	std	Y+3, r19	; 0x03
    32d8:	2a 83       	std	Y+2, r18	; 0x02
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	9b 81       	ldd	r25, Y+3	; 0x03
    32de:	81 30       	cpi	r24, 0x01	; 1
    32e0:	91 05       	cpc	r25, r1
    32e2:	e9 f0       	breq	.+58     	; 0x331e <Timer_deInit+0x5c>
    32e4:	2a 81       	ldd	r18, Y+2	; 0x02
    32e6:	3b 81       	ldd	r19, Y+3	; 0x03
    32e8:	22 30       	cpi	r18, 0x02	; 2
    32ea:	31 05       	cpc	r19, r1
    32ec:	71 f1       	breq	.+92     	; 0x334a <Timer_deInit+0x88>
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	9b 81       	ldd	r25, Y+3	; 0x03
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	e9 f5       	brne	.+122    	; 0x3370 <Timer_deInit+0xae>
	{
	case TIMER0_ID:

		/*Clear all register of Timer0*/
		TIMER0_TCCR0_REG.Byte=0;
    32f6:	e3 e5       	ldi	r30, 0x53	; 83
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	10 82       	st	Z, r1
		TIMER0_TCNT0_REG.Byte=0;
    32fc:	e2 e5       	ldi	r30, 0x52	; 82
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	10 82       	st	Z, r1
		TIMER0_OCR0_REG.Byte=0;
    3302:	ec e5       	ldi	r30, 0x5C	; 92
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer0 (OCIE0=0,TOIE0=0)*/
		TIMER_TIMSK_REG.Bits.OCIE0_Bit=0;
    3308:	e9 e5       	ldi	r30, 0x59	; 89
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	8d 7f       	andi	r24, 0xFD	; 253
    3310:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE0_Bit=0;
    3312:	e9 e5       	ldi	r30, 0x59	; 89
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	8e 7f       	andi	r24, 0xFE	; 254
    331a:	80 83       	st	Z, r24
    331c:	29 c0       	rjmp	.+82     	; 0x3370 <Timer_deInit+0xae>
		break;

	case TIMER1_ID:

		/*Clear all register of TIMER1_ID_ID_ID*/
		TIMER1_TCCR1A_REG.Byte=0;
    331e:	ef e4       	ldi	r30, 0x4F	; 79
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	10 82       	st	Z, r1
		TIMER1_TCCR1B_REG.Byte=0;
    3324:	ee e4       	ldi	r30, 0x4E	; 78
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	10 82       	st	Z, r1
		TIMER1_TCNT1_REG.TwoBytes=0;
    332a:	ec e4       	ldi	r30, 0x4C	; 76
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	10 82       	st	Z, r1
		TIMER1_OCR1A_REG.TwoBytes=0;
    3332:	ea e4       	ldi	r30, 0x4A	; 74
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	11 82       	std	Z+1, r1	; 0x01
    3338:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer1 (TICIE1=0,OCIE1A=0,OCIE1B=0,TOIE1=0)*/
		TIMER_TIMSK_REG.Byte&=0xC3;
    333a:	a9 e5       	ldi	r26, 0x59	; 89
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e9 e5       	ldi	r30, 0x59	; 89
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	83 7c       	andi	r24, 0xC3	; 195
    3346:	8c 93       	st	X, r24
    3348:	13 c0       	rjmp	.+38     	; 0x3370 <Timer_deInit+0xae>


	case TIMER2_ID:

		/*Clear all register of Timer2*/
		TIMER2_TCCR2_REG.Byte=0;
    334a:	e5 e4       	ldi	r30, 0x45	; 69
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	10 82       	st	Z, r1
		TIMER2_TCNT2_REG.Byte=0;
    3350:	e4 e4       	ldi	r30, 0x44	; 68
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	10 82       	st	Z, r1
		TIMER2_OCR2_REG.Byte=0;
    3356:	e3 e4       	ldi	r30, 0x43	; 67
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	10 82       	st	Z, r1

		/*Clear all Interrupt modules Enable of Timer2 (OCIE2=0,TOIE2=0)*/
		TIMER_TIMSK_REG.Bits.OCIE2_Bit=0;
    335c:	e9 e5       	ldi	r30, 0x59	; 89
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	8f 77       	andi	r24, 0x7F	; 127
    3364:	80 83       	st	Z, r24
		TIMER_TIMSK_REG.Bits.TOIE2_Bit=0;
    3366:	e9 e5       	ldi	r30, 0x59	; 89
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	8f 7b       	andi	r24, 0xBF	; 191
    336e:	80 83       	st	Z, r24
		break;

	}

}
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config_ptr)
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	00 d0       	rcall	.+0      	; 0x3382 <UART_init+0x6>
    3382:	00 d0       	rcall	.+0      	; 0x3384 <UART_init+0x8>
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	9c 83       	std	Y+4, r25	; 0x04
    338a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    338c:	1a 82       	std	Y+2, r1	; 0x02
    338e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3390:	eb e2       	ldi	r30, 0x2B	; 43
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	82 e0       	ldi	r24, 0x02	; 2
    3396:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * don't use RXB8 and TXB8 because we don't support 9-bit data , so that UCSZ2 = 0
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) ;
    3398:	ea e2       	ldi	r30, 0x2A	; 42
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	88 e1       	ldi	r24, 0x18	; 24
    339e:	80 83       	st	Z, r24
	 * UPM1 and UPM0 select Parity mode
	 * UCSZ1 and UCSZ0 data size
	 * USBS select number of stop bits
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | ((config_ptr->parity)<<UPM0) | ((config_ptr->stop_bit)<<USBS) | ((config_ptr->bit_data)<<UCSZ0);
    33a0:	a0 e4       	ldi	r26, 0x40	; 64
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	eb 81       	ldd	r30, Y+3	; 0x03
    33a6:	fc 81       	ldd	r31, Y+4	; 0x04
    33a8:	81 81       	ldd	r24, Z+1	; 0x01
    33aa:	88 2f       	mov	r24, r24
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	82 95       	swap	r24
    33b0:	92 95       	swap	r25
    33b2:	90 7f       	andi	r25, 0xF0	; 240
    33b4:	98 27       	eor	r25, r24
    33b6:	80 7f       	andi	r24, 0xF0	; 240
    33b8:	98 27       	eor	r25, r24
    33ba:	28 2f       	mov	r18, r24
    33bc:	20 68       	ori	r18, 0x80	; 128
    33be:	eb 81       	ldd	r30, Y+3	; 0x03
    33c0:	fc 81       	ldd	r31, Y+4	; 0x04
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	88 2f       	mov	r24, r24
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	88 0f       	add	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	28 2b       	or	r18, r24
    33d6:	eb 81       	ldd	r30, Y+3	; 0x03
    33d8:	fc 81       	ldd	r31, Y+4	; 0x04
    33da:	80 81       	ld	r24, Z
    33dc:	88 2f       	mov	r24, r24
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	82 2b       	or	r24, r18
    33e6:	8c 93       	st	X, r24

	/* calculate the UBRR register value*/
	ubrr_value = ((F_CPU / ((config_ptr->baud_rate)* 8UL) ) - 1);
    33e8:	eb 81       	ldd	r30, Y+3	; 0x03
    33ea:	fc 81       	ldd	r31, Y+4	; 0x04
    33ec:	83 81       	ldd	r24, Z+3	; 0x03
    33ee:	94 81       	ldd	r25, Z+4	; 0x04
    33f0:	a5 81       	ldd	r26, Z+5	; 0x05
    33f2:	b6 81       	ldd	r27, Z+6	; 0x06
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	aa 1f       	adc	r26, r26
    33fa:	bb 1f       	adc	r27, r27
    33fc:	88 0f       	add	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	aa 1f       	adc	r26, r26
    3402:	bb 1f       	adc	r27, r27
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	aa 1f       	adc	r26, r26
    340a:	bb 1f       	adc	r27, r27
    340c:	9c 01       	movw	r18, r24
    340e:	ad 01       	movw	r20, r26
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	92 e1       	ldi	r25, 0x12	; 18
    3414:	aa e7       	ldi	r26, 0x7A	; 122
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	bc 01       	movw	r22, r24
    341a:	cd 01       	movw	r24, r26
    341c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__udivmodsi4>
    3420:	da 01       	movw	r26, r20
    3422:	c9 01       	movw	r24, r18
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	9a 83       	std	Y+2, r25	; 0x02
    3428:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
	/* URSEL must be zero when writing the UBRRH */
	UBRRL = (uint8) ubrr_value;
    342a:	e9 e2       	ldi	r30, 0x29	; 41
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	80 83       	st	Z, r24
	UBRRH = (ubrr_value>>8);
    3432:	e0 e4       	ldi	r30, 0x40	; 64
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	9a 81       	ldd	r25, Y+2	; 0x02
    343a:	89 2f       	mov	r24, r25
    343c:	99 27       	eor	r25, r25
    343e:	80 83       	st	Z, r24
}
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	cf 91       	pop	r28
    344a:	df 91       	pop	r29
    344c:	08 95       	ret

0000344e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	0f 92       	push	r0
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    345a:	eb e2       	ldi	r30, 0x2B	; 43
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	88 2f       	mov	r24, r24
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	80 72       	andi	r24, 0x20	; 32
    3466:	90 70       	andi	r25, 0x00	; 0
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	b9 f3       	breq	.-18     	; 0x345a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    346c:	ec e2       	ldi	r30, 0x2C	; 44
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	80 83       	st	Z, r24
}
    3474:	0f 90       	pop	r0
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	0f 92       	push	r0
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3486:	eb e2       	ldi	r30, 0x2B	; 43
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	88 23       	and	r24, r24
    348e:	dc f7       	brge	.-10     	; 0x3486 <UART_recieveByte+0xa>
	/*
	 * check on frame error and parity error before read data
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	if(BIT_IS_CLEAR(UCSRA,FE) && BIT_IS_CLEAR(UCSRA,PE))
    3490:	eb e2       	ldi	r30, 0x2B	; 43
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	88 2f       	mov	r24, r24
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	80 71       	andi	r24, 0x10	; 16
    349c:	90 70       	andi	r25, 0x00	; 0
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	71 f4       	brne	.+28     	; 0x34be <UART_recieveByte+0x42>
    34a2:	eb e2       	ldi	r30, 0x2B	; 43
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	80 81       	ld	r24, Z
    34a8:	88 2f       	mov	r24, r24
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	84 70       	andi	r24, 0x04	; 4
    34ae:	90 70       	andi	r25, 0x00	; 0
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	29 f4       	brne	.+10     	; 0x34be <UART_recieveByte+0x42>
	{
		return UDR;
    34b4:	ec e2       	ldi	r30, 0x2C	; 44
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	89 83       	std	Y+1, r24	; 0x01
    34bc:	01 c0       	rjmp	.+2      	; 0x34c0 <UART_recieveByte+0x44>
	}
	else
	{
		return 0;
    34be:	19 82       	std	Y+1, r1	; 0x01
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    34c2:	0f 90       	pop	r0
    34c4:	cf 91       	pop	r28
    34c6:	df 91       	pop	r29
    34c8:	08 95       	ret

000034ca <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	00 d0       	rcall	.+0      	; 0x34d0 <UART_sendString+0x6>
    34d0:	0f 92       	push	r0
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	9b 83       	std	Y+3, r25	; 0x03
    34d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34da:	19 82       	std	Y+1, r1	; 0x01
    34dc:	0e c0       	rjmp	.+28     	; 0x34fa <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	8a 81       	ldd	r24, Y+2	; 0x02
    34e6:	9b 81       	ldd	r25, Y+3	; 0x03
    34e8:	fc 01       	movw	r30, r24
    34ea:	e2 0f       	add	r30, r18
    34ec:	f3 1f       	adc	r31, r19
    34ee:	80 81       	ld	r24, Z
    34f0:	0e 94 27 1a 	call	0x344e	; 0x344e <UART_sendByte>
		i++;
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	8f 5f       	subi	r24, 0xFF	; 255
    34f8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	28 2f       	mov	r18, r24
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	9b 81       	ldd	r25, Y+3	; 0x03
    3504:	fc 01       	movw	r30, r24
    3506:	e2 0f       	add	r30, r18
    3508:	f3 1f       	adc	r31, r19
    350a:	80 81       	ld	r24, Z
    350c:	88 23       	and	r24, r24
    350e:	39 f7       	brne	.-50     	; 0x34de <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    351c:	0f 93       	push	r16
    351e:	1f 93       	push	r17
    3520:	df 93       	push	r29
    3522:	cf 93       	push	r28
    3524:	00 d0       	rcall	.+0      	; 0x3526 <UART_receiveString+0xa>
    3526:	0f 92       	push	r0
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	9b 83       	std	Y+3, r25	; 0x03
    352e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3530:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	28 2f       	mov	r18, r24
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	9b 81       	ldd	r25, Y+3	; 0x03
    353c:	8c 01       	movw	r16, r24
    353e:	02 0f       	add	r16, r18
    3540:	13 1f       	adc	r17, r19
    3542:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
    3546:	f8 01       	movw	r30, r16
    3548:	80 83       	st	Z, r24
    354a:	0f c0       	rjmp	.+30     	; 0x356a <UART_receiveString+0x4e>

	/* set our own Null # */
	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	8f 5f       	subi	r24, 0xFF	; 255
    3550:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	28 2f       	mov	r18, r24
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	8a 81       	ldd	r24, Y+2	; 0x02
    355a:	9b 81       	ldd	r25, Y+3	; 0x03
    355c:	8c 01       	movw	r16, r24
    355e:	02 0f       	add	r16, r18
    3560:	13 1f       	adc	r17, r19
    3562:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
    3566:	f8 01       	movw	r30, r16
    3568:	80 83       	st	Z, r24
	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* set our own Null # */
	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	28 2f       	mov	r18, r24
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	9b 81       	ldd	r25, Y+3	; 0x03
    3574:	fc 01       	movw	r30, r24
    3576:	e2 0f       	add	r30, r18
    3578:	f3 1f       	adc	r31, r19
    357a:	80 81       	ld	r24, Z
    357c:	83 32       	cpi	r24, 0x23	; 35
    357e:	31 f7       	brne	.-52     	; 0x354c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	28 2f       	mov	r18, r24
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	8a 81       	ldd	r24, Y+2	; 0x02
    3588:	9b 81       	ldd	r25, Y+3	; 0x03
    358a:	fc 01       	movw	r30, r24
    358c:	e2 0f       	add	r30, r18
    358e:	f3 1f       	adc	r31, r19
    3590:	10 82       	st	Z, r1
}
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	cf 91       	pop	r28
    359a:	df 91       	pop	r29
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    35a0:	08 95       	ret

000035a2 <UART_sendData>:
/*
 * Description :
 * send the required data
 * */
void UART_sendData(uint8 *array,uint8 arrLength)
{
    35a2:	df 93       	push	r29
    35a4:	cf 93       	push	r28
    35a6:	00 d0       	rcall	.+0      	; 0x35a8 <UART_sendData+0x6>
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <UART_sendData+0x8>
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	9b 83       	std	Y+3, r25	; 0x03
    35b0:	8a 83       	std	Y+2, r24	; 0x02
    35b2:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i =0;i<arrLength;i++)
    35b4:	19 82       	std	Y+1, r1	; 0x01
    35b6:	0e c0       	rjmp	.+28     	; 0x35d4 <UART_sendData+0x32>
	{
		UART_sendByte(array[i]);
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	8a 81       	ldd	r24, Y+2	; 0x02
    35c0:	9b 81       	ldd	r25, Y+3	; 0x03
    35c2:	fc 01       	movw	r30, r24
    35c4:	e2 0f       	add	r30, r18
    35c6:	f3 1f       	adc	r31, r19
    35c8:	80 81       	ld	r24, Z
    35ca:	0e 94 27 1a 	call	0x344e	; 0x344e <UART_sendByte>
 * send the required data
 * */
void UART_sendData(uint8 *array,uint8 arrLength)
{
	uint8 i;
	for(i =0;i<arrLength;i++)
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	8f 5f       	subi	r24, 0xFF	; 255
    35d2:	89 83       	std	Y+1, r24	; 0x01
    35d4:	99 81       	ldd	r25, Y+1	; 0x01
    35d6:	8c 81       	ldd	r24, Y+4	; 0x04
    35d8:	98 17       	cp	r25, r24
    35da:	70 f3       	brcs	.-36     	; 0x35b8 <UART_sendData+0x16>
	{
		UART_sendByte(array[i]);

	}

}
    35dc:	0f 90       	pop	r0
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <UART_receiveData>:
/*
 * Description :
 * receive the required data
 * */
void UART_receiveData(uint8 *data,uint8 length)
{
    35ea:	0f 93       	push	r16
    35ec:	1f 93       	push	r17
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	00 d0       	rcall	.+0      	; 0x35f4 <UART_receiveData+0xa>
    35f4:	00 d0       	rcall	.+0      	; 0x35f6 <UART_receiveData+0xc>
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	9b 83       	std	Y+3, r25	; 0x03
    35fc:	8a 83       	std	Y+2, r24	; 0x02
    35fe:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i = 0;i<length;i++)
    3600:	19 82       	std	Y+1, r1	; 0x01
    3602:	0f c0       	rjmp	.+30     	; 0x3622 <UART_receiveData+0x38>
	{
		data[i] = UART_recieveByte();
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	28 2f       	mov	r18, r24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	9b 81       	ldd	r25, Y+3	; 0x03
    360e:	8c 01       	movw	r16, r24
    3610:	02 0f       	add	r16, r18
    3612:	13 1f       	adc	r17, r19
    3614:	0e 94 3e 1a 	call	0x347c	; 0x347c <UART_recieveByte>
    3618:	f8 01       	movw	r30, r16
    361a:	80 83       	st	Z, r24
 * receive the required data
 * */
void UART_receiveData(uint8 *data,uint8 length)
{
	uint8 i;
	for(i = 0;i<length;i++)
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	8f 5f       	subi	r24, 0xFF	; 255
    3620:	89 83       	std	Y+1, r24	; 0x01
    3622:	99 81       	ldd	r25, Y+1	; 0x01
    3624:	8c 81       	ldd	r24, Y+4	; 0x04
    3626:	98 17       	cp	r25, r24
    3628:	68 f3       	brcs	.-38     	; 0x3604 <UART_receiveData+0x1a>
	{
		data[i] = UART_recieveByte();
	}
}
    362a:	0f 90       	pop	r0
    362c:	0f 90       	pop	r0
    362e:	0f 90       	pop	r0
    3630:	0f 90       	pop	r0
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	08 95       	ret

0000363c <__udivmodsi4>:
    363c:	a1 e2       	ldi	r26, 0x21	; 33
    363e:	1a 2e       	mov	r1, r26
    3640:	aa 1b       	sub	r26, r26
    3642:	bb 1b       	sub	r27, r27
    3644:	fd 01       	movw	r30, r26
    3646:	0d c0       	rjmp	.+26     	; 0x3662 <__udivmodsi4_ep>

00003648 <__udivmodsi4_loop>:
    3648:	aa 1f       	adc	r26, r26
    364a:	bb 1f       	adc	r27, r27
    364c:	ee 1f       	adc	r30, r30
    364e:	ff 1f       	adc	r31, r31
    3650:	a2 17       	cp	r26, r18
    3652:	b3 07       	cpc	r27, r19
    3654:	e4 07       	cpc	r30, r20
    3656:	f5 07       	cpc	r31, r21
    3658:	20 f0       	brcs	.+8      	; 0x3662 <__udivmodsi4_ep>
    365a:	a2 1b       	sub	r26, r18
    365c:	b3 0b       	sbc	r27, r19
    365e:	e4 0b       	sbc	r30, r20
    3660:	f5 0b       	sbc	r31, r21

00003662 <__udivmodsi4_ep>:
    3662:	66 1f       	adc	r22, r22
    3664:	77 1f       	adc	r23, r23
    3666:	88 1f       	adc	r24, r24
    3668:	99 1f       	adc	r25, r25
    366a:	1a 94       	dec	r1
    366c:	69 f7       	brne	.-38     	; 0x3648 <__udivmodsi4_loop>
    366e:	60 95       	com	r22
    3670:	70 95       	com	r23
    3672:	80 95       	com	r24
    3674:	90 95       	com	r25
    3676:	9b 01       	movw	r18, r22
    3678:	ac 01       	movw	r20, r24
    367a:	bd 01       	movw	r22, r26
    367c:	cf 01       	movw	r24, r30
    367e:	08 95       	ret

00003680 <__prologue_saves__>:
    3680:	2f 92       	push	r2
    3682:	3f 92       	push	r3
    3684:	4f 92       	push	r4
    3686:	5f 92       	push	r5
    3688:	6f 92       	push	r6
    368a:	7f 92       	push	r7
    368c:	8f 92       	push	r8
    368e:	9f 92       	push	r9
    3690:	af 92       	push	r10
    3692:	bf 92       	push	r11
    3694:	cf 92       	push	r12
    3696:	df 92       	push	r13
    3698:	ef 92       	push	r14
    369a:	ff 92       	push	r15
    369c:	0f 93       	push	r16
    369e:	1f 93       	push	r17
    36a0:	cf 93       	push	r28
    36a2:	df 93       	push	r29
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62
    36a8:	ca 1b       	sub	r28, r26
    36aa:	db 0b       	sbc	r29, r27
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	09 94       	ijmp

000036b8 <__epilogue_restores__>:
    36b8:	2a 88       	ldd	r2, Y+18	; 0x12
    36ba:	39 88       	ldd	r3, Y+17	; 0x11
    36bc:	48 88       	ldd	r4, Y+16	; 0x10
    36be:	5f 84       	ldd	r5, Y+15	; 0x0f
    36c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    36c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    36c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    36c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    36c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    36ca:	b9 84       	ldd	r11, Y+9	; 0x09
    36cc:	c8 84       	ldd	r12, Y+8	; 0x08
    36ce:	df 80       	ldd	r13, Y+7	; 0x07
    36d0:	ee 80       	ldd	r14, Y+6	; 0x06
    36d2:	fd 80       	ldd	r15, Y+5	; 0x05
    36d4:	0c 81       	ldd	r16, Y+4	; 0x04
    36d6:	1b 81       	ldd	r17, Y+3	; 0x03
    36d8:	aa 81       	ldd	r26, Y+2	; 0x02
    36da:	b9 81       	ldd	r27, Y+1	; 0x01
    36dc:	ce 0f       	add	r28, r30
    36de:	d1 1d       	adc	r29, r1
    36e0:	0f b6       	in	r0, 0x3f	; 63
    36e2:	f8 94       	cli
    36e4:	de bf       	out	0x3e, r29	; 62
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	cd bf       	out	0x3d, r28	; 61
    36ea:	ed 01       	movw	r28, r26
    36ec:	08 95       	ret

000036ee <itoa>:
    36ee:	fb 01       	movw	r30, r22
    36f0:	9f 01       	movw	r18, r30
    36f2:	e8 94       	clt
    36f4:	42 30       	cpi	r20, 0x02	; 2
    36f6:	c4 f0       	brlt	.+48     	; 0x3728 <itoa+0x3a>
    36f8:	45 32       	cpi	r20, 0x25	; 37
    36fa:	b4 f4       	brge	.+44     	; 0x3728 <itoa+0x3a>
    36fc:	4a 30       	cpi	r20, 0x0A	; 10
    36fe:	29 f4       	brne	.+10     	; 0x370a <itoa+0x1c>
    3700:	97 fb       	bst	r25, 7
    3702:	1e f4       	brtc	.+6      	; 0x370a <itoa+0x1c>
    3704:	90 95       	com	r25
    3706:	81 95       	neg	r24
    3708:	9f 4f       	sbci	r25, 0xFF	; 255
    370a:	64 2f       	mov	r22, r20
    370c:	77 27       	eor	r23, r23
    370e:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__udivmodhi4>
    3712:	80 5d       	subi	r24, 0xD0	; 208
    3714:	8a 33       	cpi	r24, 0x3A	; 58
    3716:	0c f0       	brlt	.+2      	; 0x371a <itoa+0x2c>
    3718:	89 5d       	subi	r24, 0xD9	; 217
    371a:	81 93       	st	Z+, r24
    371c:	cb 01       	movw	r24, r22
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	a1 f7       	brne	.-24     	; 0x370a <itoa+0x1c>
    3722:	16 f4       	brtc	.+4      	; 0x3728 <itoa+0x3a>
    3724:	5d e2       	ldi	r21, 0x2D	; 45
    3726:	51 93       	st	Z+, r21
    3728:	10 82       	st	Z, r1
    372a:	c9 01       	movw	r24, r18
    372c:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <strrev>

00003730 <strrev>:
    3730:	dc 01       	movw	r26, r24
    3732:	fc 01       	movw	r30, r24
    3734:	67 2f       	mov	r22, r23
    3736:	71 91       	ld	r23, Z+
    3738:	77 23       	and	r23, r23
    373a:	e1 f7       	brne	.-8      	; 0x3734 <strrev+0x4>
    373c:	32 97       	sbiw	r30, 0x02	; 2
    373e:	04 c0       	rjmp	.+8      	; 0x3748 <strrev+0x18>
    3740:	7c 91       	ld	r23, X
    3742:	6d 93       	st	X+, r22
    3744:	70 83       	st	Z, r23
    3746:	62 91       	ld	r22, -Z
    3748:	ae 17       	cp	r26, r30
    374a:	bf 07       	cpc	r27, r31
    374c:	c8 f3       	brcs	.-14     	; 0x3740 <strrev+0x10>
    374e:	08 95       	ret

00003750 <__udivmodhi4>:
    3750:	aa 1b       	sub	r26, r26
    3752:	bb 1b       	sub	r27, r27
    3754:	51 e1       	ldi	r21, 0x11	; 17
    3756:	07 c0       	rjmp	.+14     	; 0x3766 <__udivmodhi4_ep>

00003758 <__udivmodhi4_loop>:
    3758:	aa 1f       	adc	r26, r26
    375a:	bb 1f       	adc	r27, r27
    375c:	a6 17       	cp	r26, r22
    375e:	b7 07       	cpc	r27, r23
    3760:	10 f0       	brcs	.+4      	; 0x3766 <__udivmodhi4_ep>
    3762:	a6 1b       	sub	r26, r22
    3764:	b7 0b       	sbc	r27, r23

00003766 <__udivmodhi4_ep>:
    3766:	88 1f       	adc	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	5a 95       	dec	r21
    376c:	a9 f7       	brne	.-22     	; 0x3758 <__udivmodhi4_loop>
    376e:	80 95       	com	r24
    3770:	90 95       	com	r25
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	08 95       	ret

00003778 <_exit>:
    3778:	f8 94       	cli

0000377a <__stop_program>:
    377a:	ff cf       	rjmp	.-2      	; 0x377a <__stop_program>
